[
    {
        "course_code": "INFR08031",
        "course_title": "Discrete Mathematics and Probability",
        "course_summary": "The first part of this course covers fundamental topics in discrete mathematics that underlie many areas of computer science and presents standard mathematical reasoning and proof techniques such as proof by induction. The second part of this course covers discrete and continuous probability theory, including standard definitions and commonly used distributions and their applications.\n\n*This course replaces \"Discrete Mathematics and Mathematical Reasoning\" (INFR08023). from academic year 2020/21*",
        "course_desc": "The course will cover roughly the following topics: \n\nBlock 1: Discrete Mathematics  \n- Logical equivalences, conditional statements, predicates and quantifiers \n- Methods of proof using properties of integers, rational numbers and divisibility  \n- Set theory, properties of functions and relations, cardinality \n- Sequences, sums and products, Induction and Recursion \n- Modular arithmetic, primes, greatest common divisors and their applications \n- Introductory graph topics  \n\nBlock 2: Probability Theory \n- Counting techniques: product rule, permutations, combinations \n- Axioms of probability, sample space, events, De Morgan's Law \n- Joint and conditional probability, independence, chain rule, law of total probability, Bayes' Theorem \n- Random variables, expectation, variance, covariance \n- Common discrete and continuous distributions (e.g., Bernoulli, binomial, Poisson, uniform, exponential, normal) \n- Central limit Theorem",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": [
            "Probability (MATH08066)",
            "Proofs and Problem Solving (MATH08059)"
        ],
        "other_requirements": "",
        "learning_outcomes": "use mathematical and logical notation to define and formally reason about mathematical concepts such as sets, relations, functions, and integers, and discrete structures, including proof by induction\nuse graph theoretic terminology and apply concepts from introductory graph theory to model and solve some basic problems in Informatics (e.g., network connectivity, etc.)\nprove elementary arithmetic and algebraic properties of the integers, and modular arithmetic, explain some of their basic applications in Informatics, e.g., to cryptography\ncarry out practical computations with standard concepts from discrete and continuous probability, such as joint and conditional probabilities, expectations, variances, standardization\nrecognize and work with standard discrete and continuous probability distributions and apply them to model and solve concrete problems"
    },
    {
        "course_code": "INFR08020",
        "course_title": "Informatics 1 - Cognitive Science",
        "course_summary": "This course is designed as a first introduction to Cognitive Science. It will provide a selective but representative overview of the subject, suitable for all interested students, including students on the Cognitive Science degrees and external students.\n\nThe aim of the lecturing team is to present a unified view of the field, based on a computational approach to analysing cognition. The material is organized by cognitive function (e.g., language, vision), rather than by subdiscipline (e.g., psychology, neuroscience).\n\nThe course covers language, vision, memory, control and action, and reasoning and generalization. All topics will be presented from a computational point of view, and this perspective will be reinforced by lab sessions in which students implement simple cognitive models.",
        "course_desc": "The syllabus covers the following topics. \nThey are listed separately here, but in some cases they will be presented in an interleaved fashion: \n\n1. Language \n- cognitive instinct or cognitive technology?\n- linguistic representations: productivity and reuse\n- Connectionist and Bayesian models of language \n- language acquisition: speech segmentation and word learning\n- categorization and models of word meaning \n\n 2. Reasoning and generalization \n- inductive reasoning \n- fallacies and (ir)rationality \n- models of abstraction and generalisation \n- theory formation and the origins of knowledge \n\n3. Fundamentals of cognitive neuroscience \n- basic brain anatomy and function \n- experimental techniques to record brain activity \n- simple models of neurons \n\n4. Vision \n- the anatomy of vision, neural correlates of visual perception \n- comparison of biological and artificial visual systems \n\n5. Memory and Attention \n- types of memory, memory impairments \n- computational models of memory \n\n6. Actions and behaviour \n- reinforcement learning \n\nNote that this course is intended to give a high-level introduction to the topics listed; subsequent courses (e.g., Computational Cognitive Science) will then provide a more detailed coverage.",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "demonstrate knowledge of key areas of cognitive science, and be able to take an integrated, rather than disciplinary perspective on the field\nevaluate the most important conceptual problems in cognitive science and discuss the solutions that have been proposed\nanalyse and modify simple computational models in a variety of modelling paradigms\nunderstand how cognition and cognitive science is societally situated and the ethical issues raised in researching cognition"
    },
    {
        "course_code": "INFR08025",
        "course_title": "Informatics 1 - Introduction to Computation",
        "course_summary": "This course is only available to Informatics students and those on combined Informatics degrees with Maths and PPLS.\n\n**This 20 credit course replaces the two 10 credit courses - 'Informatics 1 - Functional Programming INFR08013' and 'Informatics 1 - Computation and Logic INFR08012' from 2018/19**.\n\nAn introduction to concepts of programming, using a functional programming language, and to concepts of computation and specification using finite-state systems and propositional logic. These provide examples of the logical ideas of syntax and semantics and the computational ideas of structure and behaviour. Students learn to specify, model and solve small-scale problems succinctly and at an abstract level.",
        "course_desc": "An introduction to concepts of programming, using the Haskell functional programming language, and to concepts of computation and specification, using finite-state machines and propositional logic. The use of sets, functions and relations to describe models of logic and computation. Programming using functions and data structures, including lists and trees, equational reasoning, case analysis, recursion, higher-order functions, algebraic and abstract data types. Finite-state machines as a basic model of computation: deterministic and non-deterministic automata; regular expressions; acceptors; structured design of finite state machines. Propositional logic: truth tables; satisfiability; deduction. Applications from different areas will be used to illustrate and motivate the material.",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "use sets, functions and relations to create a simple mathematical model of a real-world situation and use the syntax and semantics of propositional logic to express simple constraints\nsolve simple programming tasks and define appropriate data types. Choose appropriate decompositions of given problems and compose corresponding functional programs from suitable function definitions, including their types\nread and write programs that use basic list processing functions, list comprehensions, case analysis, recursion, and higher-order functions. Understand algorithms for searching and sorting. Document, test and debug programs\nformalise simple propositional reasoning using various methods, including truth tables\ndesign finite state acceptors for particular languages. Use regular expressions to search for simple patterns. Understand the relationship between finite state acceptors and regular expressions"
    },
    {
        "course_code": "INFR08029",
        "course_title": "Informatics 1 - Object Oriented Programming",
        "course_summary": "This course is available to Informatics students and those on combined Informatics degrees with Maths and PPLS.\n\nThis course presents a conceptual and practical introduction to object oriented programming and software engineering practices, exemplified by Java. As well as providing a grounding in the use of Java, the course will cover general principles of programming in imperative and object oriented frameworks. After completing the course successfully, students will be able to develop programs that support experimentation, simulation and exploration in other parts of the Informatics curriculum (e.g. the capacity to implement, test and observe a particular algorithm).",
        "course_desc": "An introduction to the concepts of programming and software engineering using an object oriented programming language.",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "implement components of an object-oriented program, given a specification, and demonstrate the use of an object-oriented approach to enable group development of larger applications\njustify implementation decisions, compare implementations, and comment on their strengths and weaknesses\ndemonstrate an awareness of good software engineering practice, including the use of version control, testing and readable code\nlocate and use additional sources of information (to include discussion with peers where appropriate) to facilitate independent problem-solving, and reflect on ones own and others contribution to a collaborative learning environment\nplan and organize time, working consistently to a goal"
    },
    {
        "course_code": "INFR08030",
        "course_title": "Informatics 2 - Foundations of Data Science",
        "course_summary": "This course introduces students to a core set of knowledge, skills, and ways of thinking that are needed for data science. It brings together several strands: mathematical and computational techniques from statistics and machine learning; practical work with toolchains for data wrangling, analysis, and presentation; critical thinking and writing skills needed to evaluate and present claims; and case studies prompting discussion of the real world implications of data science.",
        "course_desc": "The course will be delivered through a combination of lectures, workshops, and practical labs; students will be expected to complete both pencil-and-paper and programming-based exercises on their own time as well as during workshops and scheduled labs. Students will complete a data science project to assess their practical and writing skills. Technical topics in the course will be covered in three sections, with indicative topics listed below. Practical aspects of these will use a Python-based ecosystem. \n\n1. Data wrangling and exploratory data analysis \n- Working with tabular data \n- Descriptive statistics and visualisation \n- Linear regression and correlation \n- Clustering \n\n2. Supervised machine learning \n- Classification \n- More on linear regression; logistic regression \n- Generalization and regularization \n\n3. Statistical inference \n- Randomness, simulation and sampling \n- Confidence intervals, law of large numbers \n- Randomized studies, hypothesis testing   \n\nInterleaved with these topics will be topics focusing on real-world implications (often using case studies), critical thinking, working and writing skills. These may be introduced in lecture but will often include a workshop discussion and/or peer review of written work. Indicative topics include: \n\nA. Implications: \n- Where does data come from? (Sample bias, data licensing and privacy issues) \n- Visualisation: misleading plots, accessible design \n- Machine learning: algorithmic bias and discrimination \n\nB. Thinking, working, and writing: \n- Claims and evidence: what can we conclude; analysis of errors \n- Reproducibility; programming \"notebooks\" vs modular code \n- Scientific communication; structure of a lab report \n- Reading and critique of data science articles",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": [
            "Introduction to Data Science (MATH08077)"
        ],
        "other_requirements": "",
        "learning_outcomes": "describe and apply good practices for storing, manipulating, summarising, and visualising data\nuse standard packages and tools for data analysis and describing this analysis, such as Python and LaTeX\napply basic techniques from descriptive and inferential statistics and machine learning; interpret and describe the output from such analyses\ncritically evaluate data-driven methods and claims from case studies, in order to identify and discuss a) potential ethical issues and b) the extent to which stated conclusions are warranted given evidence provided\ncomplete a data science project and write a report describing the question, methods, and results"
    },
    {
        "course_code": "INFR08026",
        "course_title": "Informatics 2 - Introduction to Algorithms and Data Structures",
        "course_summary": "This course provides a formal and practical introduction to the algorithms and data structures that underlie all areas of computation. It aims to provide students with a toolbox of standard algorithms and data structures, as well as the skills to analyse both the theoretical complexity of algorithms and their practical behaviour. Both written and programming exercises will be used, with examples from all areas of Informatics.",
        "course_desc": "This course is an important foundation for all areas of Informatics. \n\nIt runs for the full year (10 credits in each semester), with approximately 15 lectures per semester. A mixture of tutorials and labs will be used to reinforce both mathematical and practical knowledge of algorithms and data structures, including differences between theoretical and empirical analysis. \n\nStudents' ability to implement and empirically analyse algorithms will be assessed via practical coursework, with an exam to assess other aspects of the course (knowledge and choice of existing algorithms and data structures, theoretical analysis, algorithmic strategies, and applications).\n\nThe following is an indicative list of topics covered:\nAsymptotic notation and algorithmic analysis\nSequential data structures (lists, stacks, queues)\nBasic and more advanced sorting algorithms\nTree data structures, heaps and priority queues\nHashing and dictionaries\nGraphs and graph algorithms\nDynamic programming\nThe classes P and NP\n\nThroughout, different specific algorithms and algorithmic strategies (such as divide-and-conquer, greedy, recursive backtracking, dynamic programming) will be introduced using real-world examples.",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "explain both formally and informally the difference between \"best\", \"expected\", and \"worst\" case behaviour of an algorithm, and use asymptotic notation to analyse the time and space complexity of algorithms. Use recurrence relations to determine the time complexity of recursively defined algorithms\ndescribe the properties, typical implementations, and example application use cases of abstract data types (e.g., stacks, queues, sets, dictionaries, priority queues) and discuss the costs and benefits of dynamic and static data structure implementations; use the above knowledge to justify the selection of appropriate data types in a range of settings\nwork with a range of data structures to implement basic algorithms given pseudocode or a task specification; perform empirical studies to compare the performance of different implementations of the same algorithm or data type on various input (or different algorithms for the same problem) and explain what can be learned from empirical analysis that cannot be learned from asymptotic analysis (and vice versa)\ndescribe various algorithmic strategies (e.g., brute-force, greedy, divide-and-conquer, recursive backtracking, dynamic programming) and give examples of each from a range of application areas including language processing and information retrieval. Hand-simulate a range of algorithms, including algorithms for searching, sorting, hashing, solving graph problems, and examples of dynamic programming. Give example applications that would use each algorithm and choose appropriate algorithms to use for example problems\ndefine informally the classes P and NP and give examples of problems in NP. Explain the halting problem and its significance"
    },
    {
        "course_code": "INFR08032",
        "course_title": "Informatics 2 - Software Engineering and Professional Practice",
        "course_summary": "Software Engineering and Professional Practice teaches the practice of small team software development in modern society, equipping students to participate in a start-up, modern tech company or a software-dependent research team.\n\nStudents will gain experience developing a software system from scratch, using some of the key tools of the trade: analysing requirements, designing and implementing new features, testing, version control.\n\nProfessional aspects of Software Engineering - its legal, ethical and social environment, including issues of privacy, security, equality, democracy and intellectual property - will be approached through lectures and some practical work.",
        "course_desc": "As students enter this course they team up in groups of 3-4 to develop a small-scale software system from scratch using an iterative waterfall process. Over the course of the semester, they consider an incomplete specification to derive and analyse requirements, design their solution from a static and dynamic perspective using UML diagrams, construct and test their solution in Java. There is room for interpretation, creativity, and some of the requirements change along the way. Moreover, there are technical, professional and ethical issues surrounding the problem at hand, on which students will need to reflect. \n\nIncluded in the experience will be use of industry standard tools for software development (integrated development environments, version control, issue tracking), and key elements of modern development practice, such as code review, peer review, and pair programming. \n\nAs students engage in this practical work, the course will contextualise it against the broader themes, both of large-scale software engineering and its academic literature, and of today's urgent professional issues: the legal, ethical and social context in which software and its authors exist. Guest lecturers will speak on technical topics, but also on topics such as privacy, security, equality, democracy and intellectual property - some of which will have a direct impact on students' practical work.",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "explain the modern techniques used in the design and development of large-scale software systems\napply, evaluate and reflect on these techniques in a small-scale, but realistic scenario\nanalyse the professional and ethical implications of software engineering decisions and propose solutions\ncomfortably read and write technical documentation\nconstructively engage in interaction with peers"
    },
    {
        "course_code": "INFR08027",
        "course_title": "Informatics 2C - Introduction to Computer Systems",
        "course_summary": "This course is concerned with the design, implementation and engineering of digital computer systems. It offers an introduction to the internal structure of digital computers.",
        "course_desc": "The primary aim of the course is to convey an understanding of the internal structure and implementation of digital computers. To impart this knowledge, we first explain how the interface between hardware and software is typically constructed. This interface consists of several key components:\n\n* The binary representation and manipulation of atomic data.\n* The structure of a typical instruction set.\n* The environment in which a program executes, and the notion of processes and virtual memory.\n\nIn addition to explaining the interface between hardware and software, this course introduces the ideas behind the hardware implementation of a processor. This consists of several further components:\n\n* Combinational logic - how simple stateless building blocks such as adders, multiplexers and decoders can be constructed from logic elements.\n* Sequential logic - how components with state, such as latches, registers, register files and memories can be constructed from logic elements.\n* Processor structure - how a simple instruction set can be implemented using combinational and sequential logic components.\n\nThis course includes a brief introduction to the C programming language, which is widely used as a systems programming language.\n\n*** This course replaces Informatics 2C - Introduction to Computer Systems (INFR08018) (10 credit) course. ***",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "describe the trade-offs in different binary representation systems\nexplain the principles of: instruction set architecture, digital logic design, cache hierarchy, virtual memory, I/O devices, exceptions and processor management\ndemonstrate an understanding of how a high-level programming language (C) maps to the assembly code by converting a simple C program to MIPS assembly\nsketch the design of a simple single- and multi-cycle processor and explain how it operates by combining the knowledge of the logic design basics with that of the MIPS instruction set architecture"
    },
    {
        "course_code": "INFR08010",
        "course_title": "Informatics 2D - Reasoning and Agents",
        "course_summary": "This course focuses on approaches relating to representation, reasoning and planning for solving real world inference. The course illustrates the importance of (i) using a smart representation of knowledge such that it is conducive to efficient reasoning, and (ii) the need for exploiting task constraints for intelligent search and planning. The notion of representing action, space and time is formalized in the context of agents capable of sensing the environment and taking actions that affect the current state. There is also a strong emphasis on the ability to deal with uncertain data in real world scenarios and hence, the planning and reasoning methods are extended to include inference in probabilistic domains.",
        "course_desc": "1.  Intelligent Agents: Introduction\n* Nature of agents, performance measures and environments\n* Wumpus World Problem : An example thread (Programming environment) setup \n\n2. Search based Planning\n* Planning as a Search Problem: In deterministic, observable, static and known environments\n* Smart Searching 1: Using constraints\n* Smart Searching 2: Exploiting subproblems/Memoisation\n* Informed Search and Exploration for agents \n\n3. Logical Representation and Planning\n* Propositional Logic Revisited (Shortcomings)\n* First Order Logic & Encoding facts/rules in FOL\n* Inference Rules for Propositional & FOL Calculus\n* Unification and Generalized Modus Ponens\n* Resolution based Inference and directing search with it\n* Knowledge representation : Using FOL to represent action, space, time -- Wumpus Example\n* Situation Calculus: Representing time in plans \n\n4. Scaling Planning for Complex Tasks\n* Representing States, Goals and Actions in STRIPS\n* Partial Order Planning\n* Planning and Acting in the Real World \n\n5. Acting in Uncertain (real world) Environments\n* Representation with Bayes Net\n* Probabilistic Reasoning in Bayes Net\n* Planning under Uncertainity : Wumpus world revisited\n* Probabilistic Reasoning over Time I: hidden markov models\n* Probabilistic Reasoning over Time II: dynamic Bayesian networks\n* Markov Decision Processes \n\nRelevant QAA Computing Curriculum Sections:  Artificial Intelligence, Human-Computer Interaction (HCI), Intelligent Information Systems Technologies, Simulation and Modelling",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "use task constraints to make search efficient\nperform Inference with First Order Logic and appreciate the strengths and weaknesses of this and other logic representations (eg Propositional)\nuse PDDL to plan and execute actions using either Propositional or First Order Logic representations\ncreate and reason with a representation of a Bayesian agent for handling a non-deterministic planning problem\nconstructively engage in both self-study and peer-learning"
    },
    {
        "course_code": "INFR08033",
        "course_title": "Informatics Experiential Learning (Level 8)",
        "course_summary": "Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.\n\nThis course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. \n\nThis level 8 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area.",
        "course_desc": "The Informatics Experiential Learning requires students to propose, develop and manage a unique learning experience that will enable the student to evidence how they have achieved the learning outcomes of the course. \n\nThe student's self-designed learning experience is required to adhere to a defined structure that supports and enables the student to self-direct and manage their own learning experience. Within this structure however, students have limitless possibilities regarding the topic or theme, content of study and nature of their experience, provided their proposal is academically feasible and is approved by the course organiser or tutor. \n\nInformatics Experiential Learning, for example, may be based upon a particular extra-curricular learning opportunity such as an internship, work experience, pro-bono activity, community engagement, volunteering, or study-abroad and may also focus on a theme of personal and/or professional interest such as sustainability, social responsibility, equality and cultural diversity, or a disciplinary or interdisciplinary-based research theme. \n\nThe steps in undertaking this course are as follows: \n1. Visit the IEL Information Page (https://uoe.sharepoint.com/sites/IEL2) to help you identify a suitable opportunity within which to undertake your learning experience. (Currently only pre-approved projects listed on the IEL Information Page are permitted.)\n2. Follow the application procedure given on the IEL Information Page for the project / opportunity you are interested. Your application must be approved by the IEL tutor before you can register for this course\n3. Self-direct and manage your own learning experience \n4. Actively and regularly reflect upon and document your experience with evidence and use that as a basis for writing your self-critical 'Interim Reflective Report', then your 'Final Reflective Report' \n5. Formatively self-assess and submit your 'Final Reflective Report' for summative assessment by your tutor. \n\nThe steps identified above each require a significant amount of thought and input and will ultimately form part of a 'time-based' e-portfolio of evidence which will be used in the assessment of the Informatics Experiential Learning course. \n\nUndertaking Informatics Experiential Learning, students will not only develop the content of their learning experience but also produce an agreed portfolio of outputs where they must evidence what they have learned and, importantly, where they demonstrate how they met the learning outcomes for the course.",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "demonstrate how they have actively developed their understanding of the context/setting of their Informatics Experiential Learning\ndraw on and apply a range of relevant skills and attributes (academic, professional and/or personal) in order to engage effectively with their Informatics Experiential Learning, identifying where they need to improve these skills and attributes and/or develop new ones\ndemonstrate how they have used experiences during their Informatics Experiential Learning course to actively develop their skills in the focussed area of.. (Student selects one of the four skills groups contained in the University's Graduate Attributes Framework: http://www.ed.ac.uk/employability/graduate-attributes) either/ research and enquiry, or/ personal and intellectual autonomy, or/ communication, or personal effectiveness (Student may need to add specific skill of focus, for example 'in the focussed area of personal effectiveness, in particular teamwork.') This is supported by their Informatics Experiential Learning course organiser or tutor\ndemonstrate how they have used experiences during their Informatics Experiential Learning course to actively explore their mindset towards.. (Student selects one of the three mindsets contained in the University's Graduate Attributes Framework: http://www.ed.ac.uk/employability/graduate-attributes ) either/ enquiry and lifelong learning, or/ aspiration and personal development, or/ outlook and engagement. Making this choice is supported by their Informatics Experiential Learning course tutor\nevaluate and critically reflect upon their approach, learning and development throughout the Informatics Experiential Learning course"
    },
    {
        "course_code": "INFR09053",
        "course_title": "Entrepreneurship and Innovation Project",
        "course_summary": "The Entrepreneurship and Innovation Project course enables Informatics students to approach real life problems with an entrepreneurial perspective, through developing their ability to apply disciplinary knowledge, resources and academic skills. The teaching environment for the EIP course will be in-person, face-to-face, with a core teaching facilitator who organises the weekly lesson plans, the guest lecturers, and who serves as a facilitator and introducer of weekly learning. Teaching will be delivered in a way that enables students to build on their entrepreneurial knowledge each week through formal and informal interactions with the course organiser.",
        "course_desc": "The Entrepreneurship and Innovation Project covers three levels of cognitive domains (Knowledge, Comprehension, and Application): it exposes the enrolled students to entrepreneurial knowledge, and then teaches them how to explain and represent their new knowledge through applying it to constructing a solution to a problem that they have identified. Students will be assessed on their ability to develop and execute a semester-long project and team management plan. On a weekly basis, each individual in the team will be required to reflect on/provide a personal perspective of the effectiveness of their teamwork. Like a real-life business with co-founders, the EIP course requires students face and address challenges as a team.\n\nStudent teams will be provided with formative assessment throughout the semester on the basis of their contributions to weekly reflective exercises, which evaluate their progress on collaboratively planning for and presenting a group business plan as their final project. All students will be required to attend weekly business planning workshops, which will guide students on how to research for and populate sections of their business plans that will be assessed as a summative portfolio of each team's collaborative learning journey throughout the semester. Weekly class attendance and effective team work are both essential in order for students to get a good grade for EIP.\n\nThe EIP course provides students with an opportunity to define and engage with an entrepreneurial project that they can continue pursue beyond the 1-semester of the EIP course delivery.\n\nThe course organiser of EIP will provide students with a guided learning pathway, which enables the teaching team (organiser and tutors) to get to know the individual teams 'intimately' through the semester, so as to offer them individualised/team-specific feedback within the context of the larger learning outcomes and with regard to the components of the business plan that are assessed for a final team and individual grade.",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "System Design Project (INFR09032)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify appropriate market segments for their innovations and justify decision to choose one market over another\ncommunicate the process through which they achieve their final product to stakeholders\ndifferentiate and appraise the different aspects of business models, financial plans and customer channels\ncollaboratively construct a business plan and model associated financial statements (for their entrepreneurial idea)\nwork as a member of a team to demonstrate multidisciplinary application of their Informatics' knowledge and skills to delivering an entrepreneurial solution"
    },
    {
        "course_code": "INFR09051",
        "course_title": "Informatics Large Practical",
        "course_summary": "**This course replaces AI Large Practical (INFR09043), Software Engineering Large Practical (INFR09045) and Computer Science Large Practical (INFR09044).**\n\nThe Informatics Large Practical exposes students to the problems that arise with the design and implementation of large-scale software systems, and to methods of coping with such problems.\n\nStudents will gain experience in how to:\n- Schedule their work load\n- Design clearly and coherently structured systems\n- Discover and use relevant technical information\n- Implement a large-scale software system\n- Design and run experiments and tests\n- Analyse and report results\n- Present their work in a clear and concise way.",
        "course_desc": "The Informatics Large Practical gives students experience in developing a non-trivial software system and reporting on the end product. In this way, the practical provides an introduction to the issues and requirements of the more demanding fourth-year project. In particular, the student gains practical experience of:\n\n- Reading technical material and identifying the important content\n- Identifying and formalising project requirements\n- Identifying computational problems and inventing algorithmic solutions\n- Constructing a detailed design which does not over-commit to implementation detail\n- Implementing and testing a software application which realises the design\n- Experimenting with the implementation to explore the solutions to the computational problems\n- Writing a report which documents the solutions and the implementation\n- Managing a software project using a source-code repository.",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": [
            "Informatics Project Proposal (INFR11147)"
        ],
        "other_requirements": "",
        "learning_outcomes": "consider alternative algorithm designs and data structures for tackling a given problem\nshow awareness of the difference between design and implementation in software development\nimplement and debug a software system of medium to large size\ndesign and carry out experiments and tests, and explain the methodology involved\nwrite a well-structured report providing clear and concise documentation for a software project"
    },
    {
        "course_code": "INFR09032",
        "course_title": "System Design Project",
        "course_summary": "The System Design Project is intended to give students practical experience of (a) building a large scale system (b) working as members of a team. The project involves applying and combining material from several courses to complete a complex design and implementation task. At the end of course each group demonstrates its implemented system and gives a formal presentation to an audience of the students, supervisors, and visitors from industry.",
        "course_desc": "During this project students work in groups of about ten on the design and implementation of a complete system to solve some practical and useful problem. Each group can choose the specific task within the broad theme of 'assistive robotics',  i.e., the system should be envisioned as able to perform an autonomous task in the real world, and will develop a demonstrator (which may exist in simulation or hardware). Recent examples of projects include: a robot shopping trolley for the visually impaired; smart switches to convert any household switch to be remote controlled with an app; a robot chess opponent; robot rubbish collection and sorting; etc. \n\nThe aim is to produce a system that provides a convincing demonstration of a potential product, suitable for presentation to a client/investor. It should thus include significant development of supporting software, user interfaces, and either real or physical simulation mock-ups. These should be integrated into a complete working system, showing that core problems have been solved. There will be support for hardware construction as required, through a dedicated lab space with a wide range of equipment available, and/or through commissioning the technical support team, with a budget for equipment and support time available to each group. \n\nOnline workshops and dedicated office hours from domain experts will be available to advise and guide all aspects of the task, such as time and task management, hardware design, software libraries, interfaces, etc. Each group is assigned a mentor. The mentor's task is to advise and provide feedback on the progress of the group during the project but not to provide technical support. Groups meet with their mentors at least once a week. They also meet amongst themselves more frequently to plan and coordinate their activities. Specific demonstration points are timetabled regularly during the semester when progress will be assessed and feedback provided. \n\nTowards the end of the semester, a day is set aside for groups to demonstrate their implemented system and to give a formal presentation of it to an audience of the students, mentors, and visitors from industry. \n\nRelevant QAA Computing Curriculum Sections: Computer Based Systems, Systems Analysis and Design",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Informatics Project Proposal (INFR11147)       \nEntrepreneurship and Innovation Project (INFR09053)"
        ],
        "other_requirements": "",
        "learning_outcomes": "work as members of a team in designing and implementing a complex and multi-faceted system\nplan and monitor the effort of a project to meet milestones and deadlines, within a limited time scale\ndraw together knowledge and understanding of wide areas of software and hardware systems\nDemonstrate and present the outcome from a practical project\nDocument the feasibility, design and development of a potential product"
    },
    {
        "course_code": "INFR10052",
        "course_title": "Algorithms and Data Structures",
        "course_summary": "The course aims to provide general techniques for the design of efficient algorithms and, in parallel, develop appropriate mathematical tools for analysing their performance. In this, it broadens and deepens the study of algorithms and data structures initiated in INF2. The focus is on algorithms, more than data structures. Along the way, problem solving skills are exercised and developed.",
        "course_desc": "Introductory concepts\nReview of CS2. Models of computation; time and space complexity; upper and lower bounds, big-O and big-Omega notation; average and worst case analysis.\n\nDivide and conquer\nMatrix multiplication: Strassen's algorithm; the discrete Fourier transform (DFT), the fast Fourier transform (FFT). Expressing the runtime of a recursive algorithm as a recurrence relation; solving recurrence relations.\n\nSorting\nQuicksort and its analysis; worst-case, best-case and average-case.\n\nData structures: Disjoint sets\nThe \"disjoint sets'' (union-find) abstract data type: specification and implementations as lists and trees. Union-by-rank, path-compression, etc., \"heuristics''. Applications to finding minimum spanning trees.\n\nDynamic programming\nIntroduction to the technique; examples: Matrix-chain multiplication, Longest common subsequences.\n\nGraph/Network algorithms\nNetwork flow, Max-flow/min-cut theorem, Ford-Fulkerson algorithm.\n\nGeometric algorithms\nConvex hull of a set of points (in 2-d).\n\nRelevant QAA Computing Curriculum Sections: Data Structures and Algorithms",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "describe, and implement, the major algorithms for well known combinatorial problems such as Sorting, Matrix Multiplication, Minimum Spanning Trees, and other problems listed in the syllabus.\ndemonstrate familiarity with algorithmic strategies such as Divide-and-Conquer, the Greedy strategy and Dynamic Programming; and should be able to test these strategies on new problems and identify whether or not they are likely to be useful for those problems.\nconstruct clear and rigorous arguments to prove correctness/running-time bounds of algorithms, and should be able to present these arguments in writing.\nexplain the importance of the data structures used in a particular implementation of an algorithm, and how the data structure that is used can affect the running time.\nconstruct simple lower bound arguments for algorithmic problems, and to understand the relationship between upper and lower bounds. Also should be able to perform simple average-case analyses of the running-time of an algorithm, as well as worst-case analyses."
    },
    {
        "course_code": "INFR10087",
        "course_title": "Automated Reasoning",
        "course_summary": "**This course replaces the Level 9 Automated Reasoning INFR09042 10 credit course from 2022-23**\n\nAutomated Reasoning covers the theory, implementation and applications of logic-based reasoning via computers. It is one of the oldest subfields of Artificial Intelligence, originating in the mid-1950s when it was first used to reason about propositional logic. Since then, it has been applied to domains ranging from the formalisation of advanced mathematics to the formal verification of software and hardware systems.\n\nIn this course, we take an interactive approach to automated reasoning and explore how the proof assistant Isabelle can work with the user to establish mathematical correctness via a formal but human-friendly proof language. This provides a way of turning logic based reasoning into a form of programming that can then be used (among other things) to reason about problems in mathematics, e.g. probability theory and multivariate analysis, and industrially-relevant areas e.g. the safety of autonomous systems.",
        "course_desc": "The course starts with an introduction to higher order logic, theorem provers and, more specifically, Isabelle / HOL. This will set the context for the rest of the course in which Isabelle will be the framework for getting hands-on experience about the application of various theoretical concepts.\n\nThrough the lectures and weekly exercises that incorporate practical aspects the students will gain the skills needed to get started with Isabelle and progress to more complex concepts involving both representation and reasoning.\n\nThe second part will look at representation/modelling of concepts in (higher order) logic in details. Axiomatic versus conservative extensions of theories will be covered and mechanisms such as Isabelle locales will be introduced and used. Recursive definitions and inductive notions will be covered too.\n\nThe third part of the course will focus on fundamental notions such as unification and rewriting, within both a first and higher order context. It will look at notions such as termination and use Isabelle's simplifier as the tool for understanding many of the concepts. It will also look at the interplay between (fully) automatic and interactive proofs.\n\nThe fourth part will introduce declarative/structured proofs and using the Isar language of Isabelle show how proofs resembling pencil and paper ones can be formalized.\n\nFinally the various strands will be brought together through the discussion of a non-trivial case study. This may involve either formalized mathematics (e.g. looking at a geometric theory) or a formal verification example.\n\nThe assignment will be a combination of basic to intermediate representation and reasoning in Isabelle (up to 40%), more advanced proof tackling one particular domain or example (up to 40%) and a final part which, if completed successfully, will clearly demonstrate that the student has a good grasp of the challenges that advanced interactive theorem proving entails.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "use sophisticated mechanisms available in theorem provers to represent problem\nwrite interactive proof in procedural and declarative styles\nuse interactive and automated methods to carry out proofs in the theorem prover\nrepresent and reason about mathematical and other less formal knowledge using logic\nunderstand and compare automated reasoning techniques and apply them using pen-and-paper"
    },
    {
        "course_code": "INFR10065",
        "course_title": "Compiling Techniques",
        "course_summary": "This course describes the phases of a modern programming language compiler with an emphasis on widely-used techniques. The course project will require students to implement a complete compiler from scratch for a simple programming language, targeting a real machine assembly such as RISC-V. \n\nStudents will also learn about implementing a compiler pass in a real compiler framework.",
        "course_desc": "* Introduction: structure of a compiler \n* Lexical analysis: tokens, regular expressions, Lex \n* Parsing: context-free grammars, predictive and LR parsing \n* Abstract syntax: semantic actions, abstract parse trees \n* Semantic analysis: symbol tables, bindings, type-checking \n* Stack frames: representation and abstraction \n* Intermediate code: representation trees, translation \n* Basic blocks and traces: canonical trees and conditional branches \n* Instruction selection: algorithms for selection, RISC and CISC \n* Liveness analysis: solution of dataflow equations \n* Register allocation: colouring by simplification, coalescing \n* Real assembly language: ARM, MIPS, or RISC-V \n* Advanced Topics may include: automatic parallelisation, popular open-source compilers: GCC, LLVM, MLIR",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "analyse compilation tasks and to apply standard compilation techniques\ndevelop, implement and apply modifications to standard compilation techniques and algorithms wherever this is necessary\nunderstand and implement design decisions in modern compilers"
    },
    {
        "course_code": "INFR10054",
        "course_title": "Computational Cognitive Science",
        "course_summary": "This course aims to introduce students to the basic concepts and methodology needed to implement and analyse computational models of cognition. It considers the fundamental issues of using a computational approach to explore and model cognition. In particular, we explore the way that computational models relate to, are tested against, and illuminate psychological theories and data.\n\nThe course will introduce both symbolic and subsymbolic modelling methodologies, and provide practical experience with implementing models. The symbolic part will focus on cognitive architectures,while the subsymbolic part will introduce probabilistic models.",
        "course_desc": "- An introduction/review of the idea of computational approaches to studying cognition; the mind as information-processing system; Marr's levels of analysis (computational, algorithmic, implementation).\n\n- The general motivations underlying the computational modelling of cognition, and different kinds of questions that can be answered (e.g., why do cognitive processes behave as they do, or what algorithms might be used to carry out this behaviour? What kinds of information are used, or how is this information processed/integrated over time?)\n\n- Mechanistic/algorithmic approaches and issues addressed by these approaches: parallel versus serial processing, flow of information, timing effects.\n\n- Rational/probabilistic approaches and issues addressed by these approaches: adaptation to the environment, behaviour under uncertainty, learning, timing effects.\n\n- General issues: top-down versus bottom-up processing, online processing, integration of multiple sources of information.\n\n- Methodology and issues in the development and evaluation of cognitive models: Which psychological data are relevant? What predictions are made by a model? How could these be tested?\n\n- Modelling techniques: in the assignments, students will experiment with both symbolic (rulebased) and subsymbolic (probabilistic) cognitive models.\n\n- Example models: in a number of areas we will look at the theories proposed and different ways of modelling them. Areas discussed will include several of the following: language processing, reasoning, memory, high-level vision, categorization. Specific models will be introduced and analysed with regard to relevant psychological data.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "demonstrate knowledge of the basic concepts and methodologies of cognitive modelling, by being able to design simple cognitive models for sample problems\ndemonstrate understanding of the relationship between computational models and psychological theories, by being able to critically assess the psychological adequacy of a given model\nqualitatively and quantitatively evaluate computational models of cognition using a range of techniques, when given a model and a set of experimental data that it is supposed to account for\ndemonstrate an awareness of the most important computational approaches to cognitive modelling, by being able to use these approaches to formalise theories that are couched in potentially vague and ambiguous terms (e.g., natural language)\nimplement and test cognitive models, including existing models from the literature and simple models they have designed themselves"
    },
    {
        "course_code": "INFR10076",
        "course_title": "Computer Architecture and Design",
        "course_summary": "In this course you will learn how to design a computer and understand the performance characteristics of computers. You will first acquire a working knowledge of digital design, through the Verilog Hardware Description Language, along with a good theoretical grounding in the design of the key components of a microprocessor. You will have an opportunity to learn, both theoretically and practically, how the Quantitative Approach to computer architecture enables computer architects to analyse and optimize microprocessors to maximize performance. Along the way you will design real hardware, and later in the course you will apply your recently-acquired knowledge of quantitative computer architecture to analyse a simulated system and optimize its performance.",
        "course_desc": "The aim of this course is to give students a comparatively deep understanding of computer architecture, to an intermediate level, together with a solid understanding of techniques used to design the logical building blocks from which a computer is constructed. We consider an intermediate level in computer architecture to extend up to the point where students have a good understanding of instruction set architecture, single-issue in-order pipelined execution of instructions, superscalar out-of-order execution, and the memory hierarchies required by those processors. Within a processor, we explore the principles and practice of arithmetic and logic unit design, of the caches from which memory hierarchies are constructed, and the memory and logic gate technologies from which computers are constructed. Throughout the course, there is a strong emphasis on the Quantitative Approach to computer architecture; this informs not only the theoretical topics but also the practical assignments, which always embody some element of the quantitative approach.\n\nThe philosophy of this course is that learning about computer architecture is particularly effective if reinforced by implementing key aspects of processor design, in real hardware when feasible, but also at higher levels of abstraction using simulated systems. This approach has been used very effectively in the previous Computer Design and Computer Architecture courses, and feedback often cites the value placed on the lab exercises by students.\n\nOutline Contents\n\nFundamentals\nReview of logic design and implementation technologies; from simple combinational logic to state machines for sequential circuits; logic design using Verilog and introduction to FPGAs.\nRegister Transfer Level design principles; registers, clocks, timing budgets, setup and hold margins, clock skew, clock-domain crossing and synchronization, metastability.\nQuantitative computer architecture; performance evaluation methods and metrics, principles of high-performance design.\n\nProcessor Architecture\nInstruction Set Architecture (ISA) design; instruction set classes, registers, memory addressing. RISC vs CISC, how the ISA supports high-level languages, quantitative approach to ISA design. Example      ISAs (e.g. MIPS, RISC-V). ISA requirements for embedded systems.\nPipelined processor design; pipeline hazards and interlocks, control prediction techniques and their usage.\nOut-of-order execution; scoreboards, reservation stations, register renaming, quantitative analysis of performance.\n\nComputer Arithmetic and ALU Design\nIntroduction to binary arithmetic functions; fixed-point addition, subtraction, multiplication and division.\nAdvanced techniques in computer arithmetic; carry-look ahead adders, parallel-prefix adders, Booth-coded multipliers, Wallace and Dadda trees, sub-word parallelism, fractional fixed-point multiply-        accumulate operations.\nFloating-point computations; IEEE standard, floating-point addition and multiplication, high-performance fused-multiply-add architectures.\n\nMemory System Design\nMemory hierarchies; review of principles, quantitative analysis of memory hierarchy performance; exploring the design space of cache parameters.\nCache coherence in multi-core architectures; protocols and implementation techniques.\nMain memory design; Interfacing between processor and memory, synchronous and asynchronous bus protocols.\nError detection and correction schemes; parity, Hamming codes, SECDED.\n\n***This course replaces Computer Design (INFR09046) and Computer Architecture (INFR09009) FROM 2019/20.***",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": [
            "Digital System Design 4 (ELEE10007)"
        ],
        "other_requirements": "",
        "learning_outcomes": "describe the structure and operating characteristics of a high-performance microprocessor, and explain the principles of: orthogonal instruction set design; pipeline hazards and interlocks; branch prediction (both static and dynamic); out-of-order execution\nexplain the design and operating principles of arithmetic units including: high-speed adders and multipliers; dividers; and floating-point units. And also demonstrate how selected fixed-point arithmetic functions can be implemented (in a laboratory setting)\ndesign and implement both combinational and synchronous digital systems using state-of-the-art FPGA design tools and hardware description languages\ndescribe the structure and operating characteristics of memory systems; demonstrate the ability to evaluate quantitatively the performance of a combined processor and memory system with respect to cycles-per-instruction (CPI) and memory bandwidth requirements; describe the operating principles of error detection and correction techniques applied to memory systems, and design a SECDED solution for a given memory system\nreason about the ways in which memory hierarchies can be configured to exploit locality in order to reduce average memory access times, and quantitatively evaluate the impact of varying cache design parameters (e.g. capacity, associativity, block size, and write policies) on performance; understand the operating principles of cache coherency protocols, and be able to compare and contrast different implementation techniques"
    },
    {
        "course_code": "INFR10074",
        "course_title": "Computer Communications and Networks",
        "course_summary": "This is a comprehensive first course in Computer Communications and Networks, focusing on fundamental concepts, principles and techniques. The course will introduce basic networking concepts, including: protocol, network architecture, reference models, layering, service, interface, multiplexing, switching and standards. An overview of digital communication from the perspective of computer networking will also be provided. \n\nTopics covered in this course include: Internet (TCP/IP) architecture and protocols, network applications, congestion/flow/error control, routing and internetworking, data link protocols, error detection and correction, channel allocation and multiple access protocols, communication media and selected topics in wireless and data centre networks. It will cover recent advances in network control and management architectures by introducing the concepts of software-defined networking (SDN) and network (function) virtualisation. \n\nStudents taking this course will gain hands-on experience in network programming using the socket API; network traffic/protocol analysis; and on assessment of alternative networked systems and architectures.",
        "course_desc": "* Introduction to Computer Networking and the Internet\n* Digital Communication Basics\n* The Application Layer with comprehensive treatment of networked applications (incl. multimedia data and applications)\n* The Transport Layer\n* The Network Layer\n* The Data Link Layer\n* The Medium Access Control Sub-Layer\n* The Physical Layer\n* Software-defined networking (SDN)\n* Network virtualisation and network function virtualisation (NFV)\n* Network management\n* Introduction to data centre and wireless networks\n* Overview and selected aspects of network security",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "explain key networking concepts, principles, design issues and techniques at all protocol layers\ncontrast between different types of networks (e.g., wide area networks vs. local area networks, wired vs. wireless) in terms of their characteristics and protocols used\ndescribe different types of networked applications and what underlying network protocols are needed to meet their diverse requirements\ndistinguish between control and data planes in computer networks, and their corresponding architectures in real-world networks (including the Internet)\nunderstand reliable transport protocols and networked system architectures via implementation using Socket APIs, measurement and analysis"
    },
    {
        "course_code": "INFR10067",
        "course_title": "Computer Security",
        "course_summary": "Computer Security is concerned with the protection of computer systems and their data from threats which may compromise integrity, availability, or confidentiality; the focus is on threats of a malicious nature rather than accidental. This course aims to give a broad understanding of computer security. Topics include security risks, attacks, prevention and defence methods; techniques for writing secure programs; an overview of the foundations for cryptography, security protocols and access control models.\n\n ***This course replaces INFR10058 Computer Security (10 credits).***",
        "course_desc": "The goal of this course is to introduce students to fundamental security concepts and offer them working knowledge of threats and counter-measures.\n\nThe topics covered in the course are:\n-  Introduction:   fundamental  concepts,  access  control  models,  threat modelling. \n-  Network security: basic networking concepts, DoS, Transport layer security, Link layer security, DNS attacks, Firewalls, Intrusion detection.\n-  Usable  security:  basic  human  factors,  warning  design,  phishing,  authentication, device authentication.\n-  Cryptography:   symmetric  ciphers,  asymmetric  ciphers,  MACs  and hash functions, digital signatures.\n-  Cryptographic protocols:  identification, authentication and key agreement, SSL/TLS, anonymity protocols, TOR.\n-  OS security:  OS concepts, memory and file system, access control, file permissions, memory safety, stack-based buffer overflows.\n-  Malware:  viruses, trojan horses, worms, rootkits.\n-  Web security: WWW basics, client-side attacks, session hijacking XSS, CSRF, defences, server-side attacks, SQL injection, RFI, LFI.",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "describe common security threats against computer systems, and identify appropriate mechanisms to address them.\nexplain techniques and design principles that underlie the common mechanisms for protecting the security, privacy, and trust of computer systems and networks.\ncomplete a basic security analysis of computer systems or networks.\nindependently collect, filter out, and contextualise information about security vulnerabilities and their mitigations."
    },
    {
        "course_code": "INFR10077",
        "course_title": "Computing in the Classroom",
        "course_summary": "This course will give fourth year students the opportunity to make a positive contribution to the local community by sharing the knowledge of Informatics with school pupils and teachers. They will work with teachers to design appropriate teaching material and practical projects for computing education in schools, communicate effectively with young people and instil in them passion for computing disciplines, and support them in developing skills necessary in an increasingly digital society. Students will gain a critical understanding of the theory and practice of computer science pedagogy as appropriate for different stages of school learners. In addition, studying this course will enable students to develop a range of communication and organisational skills in a high pressure but supported real world setting. \n\nThe course offers an in-depth, sustained experience in the classroom to students contemplating a career in education.",
        "course_desc": "Students will contribute to the teaching of computer science and data science in primary / secondary / special schools in Scotland. This could include a diverse range of activities including creating online materials, teaching classes online, developing software to support live events, and where appropriate, visiting classrooms. They will be supported by primary and secondary teachers and by academic mentors from the School of Informatics and School of Education.\n\nThe aim of the course is for the students to design and deliver a project based on discussions with academic staff and classroom teachers, analysis of the appropriate school curricula, assessment of pupil's interests, and feedback received from an academic mentor. Students will receive formative feedback from an academic mentor based on observation notes and reflective writing recorded throughout the year.\n\nCourse topics include:\n* Computer science in schools curricula in Scotland and other countries\n* Good practice in computer science pedagogy research evidence\n* Effective teaching techniques\n* Giving and receiving feedback\n* Lesson planning\n* Child protection and appropriate measures for risk management (e.g. infection control)",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "critique key aspects of emerging research on computer science pedagogy, and analyse how these pedagogies may be applied to deliver topics either within Curriculum for Excellence or the relevant SQA qualifications\nengage with the local community by helping to upskill primary and secondary school teachers about up to date topics in Informatics\ndesign and develop effective teaching material, methodologies, and practical projects for computing modules taught in schools based on a synthesis of research knowledge with techniques and ap-proaches learned through observation of teaching practice in the school setting and discussions with teachers\nskilfully communicate to a range of audiences and convey clearly technical concepts to different age groups"
    },
    {
        "course_code": "INFR10061",
        "course_title": "Elements of Programming Languages",
        "course_summary": "Programming languages are unique forms of communication that play a dual role: not only as ways for programmers to instruct machines, but as ways for programmers to talk to each other about computation. Paradoxically, they are among the most permanent features of the computing landscape (Fortran, for example, is still widely used 60 years since its invention), and among the most energetic and innovative, with new programming languages introduced every few months, often aiming to simplify Web programming, parallel, or distributed computing.\n\nAlthough few computer scientists will ever design a new, general-purpose language like Java or C++, all computer scientists need the ability to learn new languages quickly, recognise and use (or avoid misusing) common language features, and even design new domain-specific languages for restricted problem domains. The design of programming languages involves many subtle choices and tradeoffs among performance, convenience, and elegance. \n\nThis course covers the essential programming structures for managing data and controlling computation, as well as abstractions that facilitate decomposing large systems into modules. The course also covers pragmatics of programming languages, including abstract syntax, interpretation and domain-specific language implementation. You will not learn how to use any one language, but instead you will learn the basic elements you need to understand the next 700 programming languages, or even design your own.",
        "course_desc": "* Abstract syntax and name-binding; Lexical vs. dynamic scope\n* Modelling programming language features using inference rules\n* Interpreters as a way of defining and exploring language features\n* Domain specific languages, translators, and pragmatics of language processing\n* A selection of topics illustrated by case studies from current or historically important language designs:\n  - data structures: pairs/record types; variant/union types; recursion\n  - abstracting data: overloading; generics; ad hoc vs. parametric polymorphism\n  - control structures: goto, loops, case/switch, exceptions\n  - abstracting control: procedure call/return; function types; continuations\n  - design dimensions: eager vs. lazy evaluation; purity vs. side-effects; state\n  - object-oriented features: objects, classes, interfaces, subtyping, (multiple) inheritance\n* Advanced topics/guest lectures on concurrent, parallel, distributed programming, security, or verification (linking to UG4 year courses)",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "investigate the design and behaviour of programming languages by studying implementations in an interpreter\nemploy abstract syntax and inference rules to understand and compare programming language features\nfesign and implement a domain-specific language capturing a problem domain\nunderstand the design space of programming languages, including common elements of current languages and how they are combined to construct language designs\ncritically evaluate the programming languages in current use, acquire and use language features quickly, recognise problematic programming language features, and avoid their (mis)use."
    },
    {
        "course_code": "INFR10078",
        "course_title": "Foundations of Natural Language Processing",
        "course_summary": "This course covers some of the linguistic and algorithmic foundations of natural language processing (NLP). It builds on algorithmic and data science concepts developed in second year courses, applying these to NLP problems.  It also equips students for more advanced NLP courses in year 4. The course is strongly empirical, using corpus data to illustrate both core linguistic concepts and algorithms, including language modelling, part of speech tagging, syntactic processing, the syntax-semantics interface, and aspects of semantic and pragmatic processing. The theoretical study of linguistic concepts and the application of algorithms to corpora in the empirical analysis of those concepts will be interleaved throughout the course.",
        "course_desc": "An indicative list of topics to be covered include:\n\n1. Lexicon and lexical processing:\n* morphology\n* language modeling\n* hidden Markov Models and associated algorithms\n* part of speech tagging (e.g., for a language other than English) to illustrate HMMs\n* smoothing\n* text classification\n\n2. Syntax and syntactic processing:\n* the Chomsky hierarchy\n* syntactic concepts: constituency (and tests for it), subcategorization, bounded and unbounded dependencies, feature representations\n* context-free grammars \n* lexicalized grammar formalisms (e.g., dependency grammar)\n* chart parsing and dependency parsing (eg, shift-reduce parsing)\n* treebanks: lexicalized grammars and corpus annotation \n* statistical parsing\n\n3. Semantics and semantic processing:\n* word senses: regular polysemy and the structured lexicon; distributional models; word embeddings (including biases found)\n* compositionality, constructing a formal semantic representation from a (disambiguated) sentential syntactic analysis.\n* predicate argument structure\n* word sense disambiguation\n* semantic role labelling\n* pragmatic phenomena in discourse and dialogue, including anaphora, presuppositions, implicatures and coherence relations.\n* labelled corpora addressing word senses (e.g., Brown), semantic roles (e.g., Propbank, SemCor), discourse information (e.g., PDTB, STAC, RST Treebank). \n\n4. Data and evaluation (interspersed throughout other topics):\n* cross-linguistic similarities and differences\n* commonly used datasets \n* annotation methods and issues (e.g., crowdsourcing, inter-annotator agreement)\n* evaluation methods and issues (e.g., standard metrics, baselines)\n* effects of biases in data",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Accelerated Natural Language Processing (INFR11125)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify and analyse examples of ambiguity in natural language---ambiguity in part-of-speech, word sense, syntax, semantics and pragmatics. Explain how ambiguity presents a problem for computational analysis and NLP applications and some of the ways it can be addressed (see (2) to (5)).\ndescribe and apply standard sequence models (e.g., HMMs), classification models (e.g., Na\u00c3\u00afve Bayes, MaxEnt); parsing algorithms (e.g., statistical chart parsing and dependency parsing) for processing language at different levels (e.g. morphology, syntax and semantics), and simulate each algorithm on `toy linguistic examples step-by-step with pen and paper.\nexplain and provide examples of how sparse data can be a problem for machine learning in NLP; describe and apply methods for addressing the sparse data problem.\ngiven an appropriate NLP problem, students should also be able to identify suitable evaluation measures for testing solutions to the problem, explain the role of annotated corpora in developing those solutions, and assess and justify which sequence of algorithms are most appropriate for solving the problem, based on an understanding of the algorithms in (2) and (3).\nimplement parts of the NLP pipeline with the help of appropriate support code and/or tools. Evaluate and interpret the results of implemented methods on natural language data sets."
    },
    {
        "course_code": "INFR10081",
        "course_title": "Honours Project (Data Science Graduate Apprenticeship)",
        "course_summary": "This is a major project and is intended to allow students to demonstrate their ability to organise and carry out a substantial piece of work. The project involves both the application of skills learnt in the past and the acquisition of new skills. Typical areas of activity will be: gathering and understanding background information; solving conceptual problems; design; implementation; experimentation and evaluation; writing up.\n\nThis course is designed for students on the Data Science Apprenticeship, and therefore the project should focus on some aspect of Data Science, whether this may be Data Analytics, Machine Learning, Security and Privacy, Human Factors, Software, Algorithms, Data Visualisation, or another theme of the field of Data Science.\n\nThe project will be conducted individually by the student under the joint supervision of a member of teaching staff at the University, and a Mentor at the Industrial Partner which hosts this Graduate Apprentice. We expect the project specification to be designed by the student (as a self-proposed project) with input from the Mentor and proposed supervisor. All project specifications must be approved by the Project Coordinator, and any IP or Ethics concerns must be formally addressed before work on the project begins.",
        "course_desc": "We expect that the student will carry out work on the project during semester 1 of 4th year (while attending University) and complete the work during semester 2 (while on placement with the Industrial host).\n\nThe details of the course will be 'Project dependent'.\n\nThe project is assessed on the basis of a written report which should typically contain:\n- Title page with abstract (a one or two paragraph summary of the contents).\n- Introduction and synopsis, in which the project topic is described and set in the context of published literature, and the main results are briefly summarised.\n- Discussion of the Industrial collaboration, any extra considerations necessary because of that collaboration, and a discussion of the Data Skills and techniques learned/employed in carrying out the project work.\n- Discussion of the work undertaken, in which the various sub-problems, solutions and difficulties are examined.\n- If appropriate, a description of experiments undertaken, a presentation of the data gleaned from them, and an interpretation of that data.\n- Conclusion, in which the main achievements are reviewed, and unsolved problems and directions for further work are presented.\n- Bibliography.",
        "course_credits": 40,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "structure, summarise and critically evaluate a body of knowledge relating to a substantial project topic in Data Science\nconduct a programme of work in further investigation of issues related to this topic\ndiscuss and solve conceptual and/or pragmatic problems which arise during the investigation, and critically evaluate the investigation, with reference to design decisions made.\ndiscuss and evaluate considerations that arise from carrying out a project in collaboration with industry, and evaluate how such an experience can influence development as a Data Scientist.\npresent the work orally and visually, with demonstration of working artefacts when appropriate"
    },
    {
        "course_code": "INFR10044",
        "course_title": "Honours Project (Informatics)",
        "course_summary": "This is a major project and is intended to allow students to demonstrate their ability to organise and carry out a substantial piece of work. The project involves both the application of skills learnt in the past and the acquisition of new skills. Typical areas of activity will be: gathering and understanding background information; solving conceptual problems; design; implementation; experimentation and evaluation; writing up.\n\nThe project is conducted individually by the student under the supervision of a member of teaching staff. The project specification is usually provided by a member of staff, but students are also free to specify their own project. All project specifications must be approved by the Project Coordinator.\n\nFor a single honours Informatics degree, the project will normally involve the construction of an artefact, whether software, hardware, a robotic device, some other artefact incorporating computation, or some combination of these. This requirement does not necessarily apply to combined honours degrees.",
        "course_desc": "Project dependent",
        "course_credits": 40,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "structure, summarise and critically evaluate a body of knowledge relating to a substantial project topic in Informatics\nconduct a programme of work in further investigation of issues related to the topic\ndiscuss and solve conceptual problems which arise during the investigation\ncritically evaluate the investigation, including design choices made\npresent their work orally and visually, with demonstration of working artefacts where appropriate"
    },
    {
        "course_code": "INFR10084",
        "course_title": "Informatics Experiential Learning (Level 10)",
        "course_summary": "Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.\n\nThis course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. \n\nThis level 10 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area. \n\nThis course will require students to specifically demonstrate learning in the context of the higher order skills such as analysis, evaluation, and creation and demonstration of meta-cognitive development. \n\nIt is expected that students taking this course would not only engage in the EUFS team effort, but take on additional responsibility in team management and organisation.",
        "course_desc": "The Informatics Experiential Learning requires students to propose, develop and manage a unique learning experience that will enable the student to evidence how they have achieved the learning outcomes of the course. \n\nThe student's self-designed learning experience is required to adhere to a defined structure that supports and enables the student to self-direct and manage their own learning experience. Within this structure however, students have limitless possibilities regarding the topic or theme, content of study and nature of their experience, provided their proposal is academically feasible and is approved by the course organiser or tutor. \n\nInformatics Experiential Learning, for example, may be based upon a particular extra-curricular learning opportunity such as an internship, work experience, pro-bono activity, community engagement, volunteering, or study-abroad and may also focus on a theme of personal and/or professional interest such as sustainability, social responsibility, equality and cultural diversity, or a disciplinary or interdisciplinary-based research theme. \n\nThe steps in undertaking this course are as follows: \n\n1. Identify a suitable opportunity within which to undertake your learning experience, and attend an introductory Informatics Experiential Learning workshop \n2. Write your draft proposal and submit to your tutor/advisor for approval \n3. Self-direct and manage your own learning experience \n4. Actively and regularly reflect upon and document your experience with evidence and use that as a basis for writing your self-critical 'Interim Reflective Report', then your 'Final Reflective Report' \n5. Formatively self-assess and submit your 'Final Reflective Report' for summative assessment by your tutor. \n\nThe steps identified above each require a significant amount of thought and input and will ultimately form part of a 'time-based' e-portfolio of evidence which will be used in the assessment of the Informatics Experiential Learning course. \n\nUndertaking Informatics Experiential Learning, students will not only develop the content of their learning experience but also produce an agreed portfolio of outputs where they must evidence what they have learned and, importantly, where they demonstrate how they met the learning outcomes for the course.",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "demonstrate how they have actively developed their understanding of the context/setting of their Informatics Experiential Learning.\ndraw on and apply a range of relevant skills and attributes (academic, professional and/or personal) in order to engage effectively with their Informatics Experiential Learning, identifying where they need to improve these skills and attributes and/or develop new ones.\ndemonstrate how they have used experiences during their Informatics Experiential Learning course to actively develop their skills in the focussed area of.. (Student selects one of the four skills groups contained in the University's Graduate Attributes Framework: http://www.ed.ac.uk/employability/graduate-attributes) either/ research and enquiry, or/ personal and intellectual autonomy, or/ communication, or personal effectiveness (Student may need to add specific skill of focus, for example 'in the focussed area of personal effectiveness, in particular teamwork.') This is supported by their Informatics Experiential Learning course organiser or tutor.\ndemonstrate how they have used experiences during their Informatics Experiential Learning course to actively explore their mindset towards.. (Student selects one of the three mindsets contained in the University's Graduate Attributes Framework: http://www.ed.ac.uk/employability/graduate-attributes ) either/ enquiry and lifelong learning, or/ aspiration and personal development, or/ outlook and engagement. Making this choice is supported by their Informatics Experiential Learning course tutor.\nevaluate and critically reflect upon their approach, learning and development throughout the Informatics Experiential Learning course."
    },
    {
        "course_code": "INFR10082",
        "course_title": "Informatics Project Proposal (Graduate Apprenticeship)",
        "course_summary": "The aim of this course is to develop generic research and/or practical skills that can be deployed in academic or commercial environments. Apprentices will demonstrate their ability to develop interesting concepts and/or hypotheses into proposals appropriate for larger research or implementation-based project and demonstrate their ability to identify legal, social, ethical and professional issues.",
        "course_desc": "The structure and delivery of this course will vary according to the nature of the project and will be agreed upon between student and supervisor at the start of the semester. Representative activities might include literature review, data preparation, preliminary implementation, or establishing connections and gathering requirements from stakeholders. The student will then produce a project proposal that explains the hypotheses and/or goals, project management, and milestones with approximate times with some justification for these decisions. Key methodologies should be introduced.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "critically evaluate research literature or other prior work appropriate for their project subject.\nuse existing research literature or other prior work to justify choices in experimental design, theoretical goals, and/or implementation.\ndevelop a structured project proposal.\noutline project/research management issues and potential legal, social, ethical or professional issues.\nillustrate how the proposed project is linked to their professional development as a data science practitioner under the Graduate Apprenticeship scheme."
    },
    {
        "course_code": "INFR10080",
        "course_title": "Introduction to Databases",
        "course_summary": "Data is one of the most important assets of any enterprise and plays a central role in many aspects of everyday life, from healthcare, to education, to commerce. In order to be turned into meaningful information that enables and supports decision making, data must be stored, maintained, processed and analysed. Database management systems are complex software programs that allow their users to perform these tasks in an efficient and reliable way. This course is an introduction to the principles underlying the design and implementation of relational databases and database management systems.\n\n*This course replaces \"Database Systems\" (INFR10070) from academic year 2020/21*",
        "course_desc": "Databases encompass many areas of Computer Science, from formal logic to programming languages, from operating systems to algorithms and data structures. This course will cover in detail the main language for relational databases, SQL, which is an international standard supported by virtually all systems on the market today. It will also cover the theoretical query languages on which SQL's core is based, namely relational algebra and relational calculus. Other important topics covered during the course include normal forms, transaction processing, concurrency control, incomplete data and rudiments of query optimization. \n\nSyllabus (core topics)\n- The relational model and rudiments of SQL\n- Query languages: relational algebra and calculus\n- Multisets, grouping and aggregation\n- Database design: constraints and normal forms\n- Advanced SQL: nested queries, triggers, null values\n- Transaction management: concurrent schedules, conflict-serializability, locking\n- Database access from applications: using SQL in a host programming language\n- Basics of indexing, query evaluation and optimisation \n\nSyllabus (advanced topics, if time allows)\n- Datalog and recursive queries\n- Incomplete data and certain answers",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "compare strengths and weaknesses of different database designs\nprocess and analyse data by means of SQL statements\nformulate and manipulate queries in both declarative and procedural database languages\nreason about the correctness of concurrent database interactions among multiple users"
    },
    {
        "course_code": "INFR10085",
        "course_title": "Introduction to Mobile Robotics",
        "course_summary": "A mobile robot is a machine controlled by software that uses sensors and algorithms to understand its surroundings and complete specific tasks in its environment. This course provides a general understanding of related concepts such as sensing (e.g., visual perception), state estimation (e.g., localisation and mapping) and sequential decision making. The emphasis is on algorithms for probabilistic state estimation, reasoning, control, and coordination, as opposed to electromechanical systems design. Practically useful tools and simulators for developing real robotic systems will also be covered in this course. \nAt the end of the course, students will develop sufficient skills in the analysis of perception, state estimation, navigation, and decision making algorithms for mobile robots.",
        "course_desc": "Delivery Method:\nThe course will be delivered through a combination of: (1) live lectures; (2) tutorials; and (3) (optional) online discussion forum. (it originally also said practical labs)\n\nContent/Syllabus:\nThis is an introductory course in robotics. We will primarily explore a probabilistic treatment of the associated challenges, while also briefly discussing other formulations (e.g., based on logics, hybrid methods). The specific methods discussed may vary depending on how we make progress but the course will most likely focus on the following topics:\n\n- Introduction to probabilistic robotics; refresher of basic mathematical concepts from probability theory.\n- Probabilistic state estimation and Bayes filters.\n- Kalman filters and extensions: EKF, UKF; Particle filters.\n- Sensor models and motion models.\n- Basic control theory: open-loop and closed-loop control.\n- Localization based on different sensors (range finders, cameras etc).\n- Mapping: environment model, grid map.                                                                 \n- Simultaneous Localization and Mapping (SLAM): basic principles and example algorithms.\n- Probabilistic sequential decision making: MDP (also RL), POMDP.\n- Logics for robotics; hybrid methods combining logics and probabilistic methods.\n- Ethics and practical issues in robotics.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": [
            "Introduction to Vision and Robotics (INFR09019)"
        ],
        "other_requirements": "",
        "learning_outcomes": "recall and explain the essential facts, concepts, principles and potential ethi-cal concerns of mobile robotics and related concepts, demonstrated through written answers in exam-ination conditions\ndescribe and evaluate the strengths and weaknesses of some specific sensor and motor hardware; and some specific software for sensory processing and perception, demonstrat-ed through written answers\nemploy useful software and tools (e.g. robot simulator, robotic operating sys-tem) to solve a core problem of mobile robots, and will show a working system via proof-of-concept simulation environments\nin writing a joint report, identify problem criteria and context, discuss design and development, test, analyse and evaluate the behaviour of typical mobile robots they have developed in simulation"
    },
    {
        "course_code": "INFR10059",
        "course_title": "Introduction to Theoretical Computer Science",
        "course_summary": "This course introduces the fundamental concepts of the theory of computer science, which include some of the greatest intellectual advances of the last century: what does `computing' mean? Are all `computers' basically the same? Can we tell whether our programs are `correct' - and what does `correct' mean, anyway? Can we solve problems in reasonable time, and can we tell whether we can?\n\nThe course concentrates primarily on conceptual understanding, but adds enough detail to allow students to go on to further courses, and illustrates how the fundamental concepts are reflected throughout the discipline.",
        "course_desc": "The first section of the course asks the question, what does it mean to compute? We start with the finite automata introduced in earlier years, and then generalise to pushdown automata, and show that they have more power. Next we generalize further to very simple abstract general computers, and argue they can do everything real computers can do. We then ask, can we solve every computational question? The answer, with which Turing shocked the mathematicians of the 1930s, is \"no\", with a remarkably easy but beautiful argument (introduced at the end of Inf2-IADS INFR08026). We then explore some different, but always equivalent, ways of defining \"a computer\". We finish the section by asking how we can compare the difficulty of different problems, and introduce the idea of \"reduction\" as a way of compiling one problem into another. Technically, this covers register machines, undecidability, Turing machines, and reductions.\n\nThe second section thinks about how hard it is to solve solvable problems, leading to one of the most important problems in all mathematics, and the foundation of internet security. We start by reprising Inf2-IADS INFR08026 analysis of algorithms, and then discuss the idea of classifying problems as `tractable' (easy) or `intractable' (hard). We find that the idea of algorithms whose running time grows polynomially in the problem size is a good mathematical definition of `tractable', though not always a practical one. After making this more precise, we ask what happens if we're allowed to just check all the possible answers in parallel - does this give us more problem-solving power? The question is made precise by the concept of NP, and we show that there are \"hardest\" such problems, such as the famous Travelling Salesman. Although the question is easy to ask, nobody knows how to answer it. This is P = NP - if you can solve it, you win a million dollars, and fame for as long as civilization lasts.   So far, NP problems are very hard to solve in practice, so we discuss how to deal with them. We finish the section by talking about much harder problems still. Technically, this section covers P, NP, hardness and completeness, Cook's Theorem, P = NP, and the complexity hierarchy above NP.\n\nThe third section takes brief look at a different way of seeing computation. Haskell needn't be seen as a programming language, it can be the computer itself. We'll show how the lambda-calculus (on which Haskell is based) can do all the computing our other models could, and how the halting problem was actually first solved (or rather unsolved) within lambda-calculus.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "explain (non-)deterministic finite and pushdown automata and use the pumping lemma to show languages non-regular\nexplain decidability, undecidability and the halting problem\nuse reductions to show (un)decidability\nexplain P and NP and use reductions to show (non)-membership of them\nwrite short programs in lambda-calculus"
    },
    {
        "course_code": "INFR10051",
        "course_title": "MInf Project (Part 1)",
        "course_summary": "This is the first half a major project that runs over the fourth and fifth years. It is intended to allow students to demonstrate their ability to organise and carry out a substantial piece of work. The project involves both the application of skills learnt in the past and the acquisition of new skills. Typical areas of activity will be: gathering and understanding background information; solving conceptual problems; design; implementation; experimentation and evaluation; writing up.\n\nThe project is conducted individually by the student under the supervision of a member of teaching staff. The project specification is usually provided by a member of staff, but students are also free to specify their own project. All project specifications must be approved by the Project Coordinator.\n\nThe project will normally involve the construction of an artefact, whether software, hardware, a robotic device, some other artefact incorporating computation, or some combination of these.\n\nThis first half consists of a project that is essentially self contained but it should be planned in such a way as to allow for expansion and greater depth for the following year. Note that as this is the first half of an 80 point project it is recognized that a longer planning phase might be involved as compared to a standard UG4 project. In any case, the report should include a clear account of this aspect along with a justification.",
        "course_desc": "Project dependent",
        "course_credits": 40,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "structure, summarise and critically evaluate a body of knowledge relating to a substantial project topic in Informatics\nconduct a programme of work in further investigation of issues related to the topic\ndiscuss and solve conceptual problems which arise during the investigation\ncritically evaluate the investigation, including design choices made\npresent their work orally and visually, with demonstration of working artefacts where  appropriate"
    },
    {
        "course_code": "INFR10086",
        "course_title": "Machine Learning",
        "course_summary": "***This course is a replacement for Introductory Applied Machine Learning (INFR10069)***\n\nSince the early days of AI, researchers have been interested in making computers learn, rather than simply programming them to do tasks. This is the field of machine learning.  The main area that will be discussed is supervised learning, which is concerned with learning to predict an output, given in-puts. A second area of study is unsupervised learning, where we wish to discover the structure in a set of patterns, i.e. there is no output \"teacher signal\".\n\nThe aims of the course are to develop knowledge and a critical appreciation of the various techniques covered in the syllabus, and to be able to apply, validate and refine the methods in practice.",
        "course_desc": "The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.\n\n-\t Classification and Regression:  Linear Regression, logistic regression, Bayes classifiers \n-\t Expanded feature representations: Basis functions, decision trees, neural networks, kernel methods \n-\t Generalization and regularization: Penalised cost functions, Bayesian prediction, under- and over-fitting \n-\t Model selection and performance evaluation: Cross-validation, ROC and PR curves \n-\t Ethics and machine learning: Fairness, accountability, transparency, privacy concerns \n-\t Representation learning: Dimensionality reduction, clustering, feature learning \n-\t More advanced methods\n\nTo support these topics we will also cover: \n-\tOptimization and Stochastic gradient descent \n-\tPractical issues: Formulating problems as machine learning, adapting methods to fit problems.  Numerical and programming issues important for machine learning.",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Machine Learning and Pattern Recognition (INFR11130) OR\nApplied Machine Learning (INFR11211)"
        ],
        "other_requirements": "",
        "learning_outcomes": "explain the scope, goals and limits of machine learning (ML), and the main sub-areas of the field\ndescribe and critically compare the various techniques covered in the syllabus, and explain where they fit within the structure of the discipline\ndemonstrate knowledge about the limitations and possible failure modes of ML models, and ethical issues in relation to machine learning\ncheck and refine implementation of learning algorithms, and apply them in practice\nuse a systematic approach to conducting experimental investigations, including best practices on how to assess model performance"
    },
    {
        "course_code": "INFR10089",
        "course_title": "Modelling Concurrent Systems (Level 10)",
        "course_summary": "Concurrent and distributed systems are famously hard to analyse. This theoretical course presents state-of-the-art mathematical models and techniques that make understanding concurrency possible. In the process, we will touch on fundamental philosophical, mathematical and computational questions. What does 'concurrency' actually mean? How do we know our concurrent system behaves correctly? What does 'correctly' actually mean? This course is especially relevant to any student with an interest in a scientific career in programming languages, models, or distributed systems, and also to students looking to design or implement distributed systems in industry.",
        "course_desc": "Beginning with simple examples and protocols, we will develop a theory to describe models of concur-rent systems of increasing complexity, based on process algebra. We will learn how to compare these models, and the key concepts that describe what it means for systems to be equivalent, such as bisimulation and trace equivalence. We will learn how to specify prove  properties of systems, and the assumptions we must make about the environment in which these systems operate, such as fairness. The course lectures will introduce concepts using standard examples, and students will apply what they have learned to new problems in homework questions delivered weekly. In tutorials, students can discuss solutions to their homework problems and get feedback on their work, developing their solutions into a summative homework portfolio that they submit for grading at two checkpoints throughout the semester.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": [
            "Modelling Concurrent Systems (Level 11) (INFR11248)"
        ],
        "other_requirements": "",
        "learning_outcomes": "construct accurate models of concurrent systems, including protocols and other distributed communicating systems\nanalyse (models of) concurrent systems and show various notions of equivalence and refinement between them\nevaluate the comparative benefits and drawbacks of various concurrency\narticulate safety and liveness properties of concurrent systems using temporal logic and other tools\njustify the correctness of concurrent systems under various assumptions about their executing context"
    },
    {
        "course_code": "INFR10088",
        "course_title": "Modelling of Systems for Sustainability",
        "course_summary": "This course takes an interacting systems perspective on sustainability, using computational modelling and visualisation to gain understanding of system behaviours and interactions. Relevant complex systems key to sustainability arise from natural evolution (atmosphere, biosphere), social interactions (community, nation, economy), and engineering (energy, transport) - we look at computational models of such systems. Key concepts explored include emergent behaviour, stability and tipping points. Students from across the university will bring knowledge of the type of systems under study, or of computational methods - knowledge of both is not required.  Multidisciplinary group projects provide the opportunity to explore systems and gain experience working in interdisciplinary teams.",
        "course_desc": "The fundamental aim of this course is for students from a variety of backgrounds, including Informatics, to get hands-on experience with specifying, implementing, exploring and presenting results from models of real-world systems that are key to planetary sustainability.  The range of such systems is vast, encompassing large parts of earth sciences, engineering, health sciences, social and political sciences.  Some key systems include the climate system, many ecosystems, agricultural systems, water systems, public health systems, social systems, international political systems, energy systems and transport systems. We will describe a subset of these systems, and there will be opportunity to develop deeper understanding in the project.\n\nMost of these are what are known as \"complex systems\", meaning: their behaviour and evolution often cannot be reduced to a few equations or paragraphs of description; they exhibit patterns of emergent global behaviour that are not explicitly encoded in any local interactions; they often exhibit multiple potential stable states, with not-easily-triggered \"tipping points\" to move to another stable state; stability is often exhibited as a dynamic pattern over time rather than as a fixed state. We will touch on the science of complex systems, focussing on those aspects that are of most relevance to the particular real-world systems we study.\n\nA ubiquitous challenge in sustainability is to appreciate how these individually complex systems interact with each other in the real world to produce unexpected outcomes.  The key methodology we will bring to the study of these systems and how they interact is computational modelling and visualisation.  We will study specific systems for which there are reasonably tractable computational models and visualisations.  For each, we will explore the underlying computational framework, be it a statistical model of observed data, a physical model of known physical / chemical / biological interactions, or an abstract model of ecological or social systems.  The modelling paradigms studied and used in practical work will include system dynamics and agent-based modelling, with brief mention of other paradigms such as discrete event and finite-step simulations.\n\nThe first half will consist of lecture material covering the key system concepts, the specific systems to be studied, and the computational modelling and visualisation methods used for each system.  These will be supplemented by hands-on lab sessions, to explore computational models and visualisations using tools such as NetLogo and Python; and small-group tutorial sessions aimed at multidisciplinary discussions of specific systems.  The second half of the semester will be devoted to a group project in which each 3/4-person group will have students from at least 2 and ideally 3 or 4 disciplines; the project will aim to construct and explore a model of one or two complex systems related to sustainability (e.g., energy, economic and political); and project supervision will be provided by staff and PhD students familiar with the project systems and models.\n\nAssessment will be by coursework, aimed at the material covered in the first half of the semester, (systems and modelling paradigms) and a group project report and presentation for the work in the second half of the semester.",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "explain how computational modelling frameworks can be used to understand the behaviours of complex interacting systems involved in sustainability such as social, economic and ecological systems\ninvestigate a sustainability system question, identify system elements and their interactions, and codify a system model using an appropriate model description framework\ncritique and interpret the results / output of models of sustainability systems\ncommunicate findings of sustainability modelling studies, including uncertainty, to a variety of audiences\nwork collaboratively and accountably with other students to formulate, explore and communicate a sustainability system model"
    },
    {
        "course_code": "INFR10079",
        "course_title": "Operating Systems",
        "course_summary": "This course provides an introduction to the design and implementation of modern general-purpose operating systems. It concentrates on the operating system kernel with the emphasis being on concepts that lead to practical implementations. Throughout the course reference is made to a number of widely-adopted general-purpose operating systems (including Linux, Windows, and OS X) to illustrate real implementations. An educational operating system is used for the coursework.",
        "course_desc": "The OS Kernel\n*Micro and Monolithic kernels\n*Multi-tasking, multi-user\n*Interrupt handling, system calls\n\nProcess Management\n*The process concept\n*The thread concept\n*Inter-process communication\n\nTime Management\n*CPU scheduling algorithms\n\nResource Management\n*Synchronisation, mutual exclusion\n*Semaphores, and monitors\n*Deadlock prevention, avoidance, and detection\n\nMemory Management\n*The problem of allocation, protection, and sharing\n*Physical and virtual memory\n*Paged virtual memory\n\nStorage Management\n*Storage technologies\n*File Systems\n\nVirtualization \n*Virtual Machines\n*Containers\n\nRelevant QAA Computing Curriculum Sections: Operating Systems",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "describe the structure and components of modern operating systems\nexplain the abstract concepts and concrete implementations of operating systems\ncompare and contrast the differing approaches taken by various operating systems\nevaluate the suitability of differing approaches in different application domains\ndesign OS components to address particular needs"
    },
    {
        "course_code": "INFR10022",
        "course_title": "Professional Issues (Level 10)",
        "course_summary": "The aim of the course is to highlight and allow students to develop understanding of key aspects of the wider context in which their practice as Informatics professionals will occur.\u00c2\u00a0 Students will develop individual capabilities that complement the technical capacities developed elsewhere in Informatics programmes.\u00c2\u00a0 These include communication, reflection, reasoning and analysis skills that consider the broader ethical and social implications of their work.",
        "course_desc": "The course will be structured around professional and ethical behaviour, and the wider context in which technologies are developed and deployed. Beginning with the ACM Code of Ethics and Professional Conduct, the course will consider the wider context technologies are developed within and teach students to be considerate in their role as ICT professionals. \n\nA standard breakdown of the course can be expected to be:\n- Introduction (week 1 - gives an overview of the course)\n- Responsibility (2 weeks, ACM principles 1.1, 1.2, 1.4): this will cover the responsibility of computing professionals. It will explore the notion of harms in the context of complex, multi-stakeholder situations, where benefit and harm are contested.\n- Personal Attributes (2 weeks, ACM principles 1.3, 1.5, 1.6 and 1.7): this will cover personal attributes and why these are important by covering a range of situations that challenge professional integrity and work out how to respond to such challenges.\n- Society (3 weeks, ACM principles 3.1, 3.2, 3.6 and 3.7) this will cover the obligations of computing professionals to recognise broader social requirements on their actions, particularly in areas where decisions involve the creation of new infrastructures that will underpin the delivery of public services or they are likely to be incorporated into widely used privately-owned platforms.\n- Leadership (2 weeks, ACM principles 3.3, 3.4 and 3.5) will cover leadership amongst computing professionals, the obligations on leaders to ensure their leadership is fair and benefits those who are being led. This section will include a reflection on how these materials are taught.\n\nThe course will use articles and research from the social sciences, alongside short case studies drawn from contemporary situations that illustrate how knowledge of the decision-making context influences professional conduct and decision-making. Students will develop analytical skills to identify the critical influences on professionals in a range of real-world situations.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": [
            "Informatics Project Proposal (INFR11147)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify a range of professional and unprofessional behaviour in ICT- related contexts and recommend remedial action\nidentify broader social and ethical considerations influencing the work of ICT professionals and how their work might be mindful of these\nidentify legitimate interests of broader society in computing systems and suggest approaches incorporating these into development\nidentify potential harms and benefits of the interventions of computing professionals, considering different stakeholder viewpoints and frameworks\nidentify examples of good and poor leadership and suggest leadership approaches which themselves encourage and uphold professional conduct"
    },
    {
        "course_code": "INFR10064",
        "course_title": "Software Design and Modelling",
        "course_summary": "This course introduces the design and modelling of software systems using object-oriented techniques. We start by exploring the use of modelling in software development. Students learn to document designs in the Unified Modeling Language, UML, with emphasis on class, sequence and state diagrams and the Object Constraint Language, OCL. We use modern model-driven development tools and discuss their strengths and weaknesses. We study criteria that make one design better than another in context and introduce design principles and patterns that capture good practice.",
        "course_desc": "The course begins by placing design and modelling in the context of the various software engineering processes in widespread use today. Via labs, lectures and self-study using readings, videos and formative exercises, it teaches students to produce (initially straightforward) designs and to document them using UML models, both on paper and with an appropriate tool. We discuss the different affordances of these modes and how models may be used (i) purely informally, (ii) as reviewed documentation for designs, and/or (iii) in model-driven development in which models are formal artefacts and code may be generated from them.\n\nThe second part of the course focuses on identifying and producing good designs. What principles should a good object-oriented design follow? We learn some common design patterns and their role in development and learning.\n\nFinally we turn to practical model-driven development: how can the cost-benefit ratio of modelling be improved, now and potentially in the future? Students will learn about model transformations, both model-to-model and model-to-text (e.g., code generation) and be introduced to current tools supporting these. We discuss the role of domain specific languages and the integration of model driven development with agile processes. Throughout the course, we identify the deficiencies as well as the benefits of the fast-changing state of the art, aiming to equip students to critically evaluate tools and techniques that become available to them in future.",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "design simple object-oriented systems\ncreate, read and modify UML diagrams documenting designs, both on paper and in an appropriate tool\ndetermine whether a UML model and a body of Java code are consistent; if they are inconsistent, identify the inconsistencies precisely and propose remedies\nevaluate and evolve object-oriented software designs, making use of common design patterns if appropriate\ndiscuss the use of modelling and model-driven development tools in software development, e.g. why and how models of software can have varying degrees of formality, capabilities and limitations of the tools"
    },
    {
        "course_code": "INFR10057",
        "course_title": "Software Testing",
        "course_summary": "This course further develops the introduction to testing in Informatics 2 - Software Engineering and Professional Practice. The course develops skills to select and apply a testing strategy and testing techniques that are appropriate to a particular development process, software system, or component. Class members will become capable users of test tools; will be able to assess the effectiveness of their testing activity; and will be able provide evidence to justify their evaluation. The course is assessed by portfolio demonstrating the achievement of the learning outcomes. This course is based on the IEEE Software Engineering 2004 Software Testing syllabus.",
        "course_desc": "Software testing is embedded in all software development processes and in recent years with the widespread adoption of DevOps and Continuous Integration, Delivery and Deployment, testing tools, automated testing, and the use of operational data in testing have become increasingly important.  \n\nThe course includes the following topics:\n\nTesting techniques and principles: Defects vs. failures, equivalence classes, boundary testing.\nTypes of defects.\nBlack-box vs. Structural testing.\nTesting strategies: Unit testing, integration testing, profiling, test driven development.\nState based testing; configuration testing; compatibility testing; web site testing.\nAlpha, beta, and acceptance testing.\nCoverage criteria.\nTest instrumentation and tools.\nDeveloping test plans.\nManaging the testing process: Development Lifecycles\nProblem reporting, tracking, and analysis. \nRelevant QAA Computing Curriculum Sections: Software Engineering\n\nClass members will take the development of tests for a small software project as their focus.  For students taking the Informatics Large Practical course we recommend they take the software developed there as their focus.  However, students are free to choose other software projects if they prefer.  The goal is to gain experience of the full spectrum of testing techniques, test planning, testing process and demonstrate that experience on the chosen software project.  \n\nClass members will work in groups of 10 and will be encouraged to share experience by providing comment and reviews of others work.  Weekly tutorials will be structured around different aspects of the course and the development of a portfolio describing the work done on the selected software project.\n\nEach class member will develop an individual portfolio demonstrating they have achieved the learning outcomes of the course.   This will use work on the testing of their chosen software project as evidence, augmented by appropriate other evidence.  Acceptable kinds of evidence demonstrating achievement of the learning outcomes are diverse so part of the assessment is the design of the portfolio in advance of its construction.  There are two or three \"standard\" portfolio\ndesigns but class members are encouraged to develop their own approaches that take account of their personal strengths and weaknesses.  Portfolio designs will include specific assessment criteria.   \n\nEach week there will be a group meeting, around 1-2 hours of recorded material covering the lecture material in the course.  Guest lectures given by a practitioner on their experience of testing in different contexts will illustrate the application of the concepts covered in the course in the development of a real-world product.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "analyze requirements to determine appropriate testing strategies\ndesign and implement comprehensive test plans with instrumented code\napply a wide variety of testing techniques and compute test coverage and yield according to a variety of criteria\nevaluate the limitations of a given testing process, using statistical methods where appropriate, and summarise outcomes\nconduct reviews and inspections and design and implement automated testing processes"
    },
    {
        "course_code": "INFR10083",
        "course_title": "Work-Based Professional Practice C in Data Analytics",
        "course_summary": "This course is work-based and is focused on the real-world application of data analytics and the development of self-analytic skills in a workplace environment. It includes experiencing how computation, analysis, mathematical modelling and statistics are applied to conduct data analysis studies on real data in a commercial environment. Students who do this course will obtain practical experience in the design, implementation, and evaluation of data analysis approaches. They will also learn how to reflect on their personal development throughout their time in the placement and their own professional development as a data scientist.",
        "course_desc": "*This is a work-based course and is only available as part of the Graduate Apprenticeship BSc Hons in Data Science.*\n\nThe aim of this course is to provide data science graduate apprenticeship students with work-based professional practice in the application of data analysis and statistical techniques. It gives students a practical introduction and understanding of the foundations, concepts and techniques applied to data analytics and provides an opportunity to apply the learning gained in the core courses to address data analysis problems and challenges in the workplace. The main topics are: the application of data analysis tools and techniques, an introduction to common data quality problems, and the application of statistics and machine learning. In addition, this course covers the meta-skills required to operate in a professional environment including teamwork, problem-solving and communication skills and personal self-awareness.\n\nThe course is delivered over four months during Semester 2 of Year 4. Students are expected to spend around 200 hours in total on this course on data science activities embedded in the work activities the employer will set. The work will directly link to their own contexts in the workplace. Students will be directed in their learning using the Student-Led Individually Created Course (SLICC) approach. They will reflect on and evaluate data analysis studies from their own work context in data analytics. \n\nThe SLICC framework requires that students use the generic learning outcomes to articulate their learning in their own defined project, reflect frequently using a blog, and collect and curate evidence of their learning in an e-portfolio. The final report which forms the summative assessment will draw together the evidence in the reflective journals and portfolios. All this is carried out with the guidance of a professional practice academic tutor. The course will encourage appraisal of students' own practical experiences and allow them to reflect on their learning, professional and personal development in the context of data analytics.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "demonstrate an understanding of applied data science, and the challenges and wider implications of the contexts in which data analysis problems occur in the workplace\ndraw on and apply relevant data analysis approaches, tools and frameworks from their courses in mathematics and computing in different settings in real world situations\ndevelop and apply skills and attributes to engage effectively on data analysis issues in the workplace, including problem solving, communicating clearly and for reflective thinking\nreview, evaluate and reflect upon their personal development of meta-skills in the work-place during their placement\nmaintain a journal reflecting on the development of their meta-skills and data science skills along with an e-portfolio of supporting evidence"
    },
    {
        "course_code": "INFR11125",
        "course_title": "Accelerated Natural Language Processing",
        "course_summary": "This course synthesizes ideas from linguistics and computer science to provide students with a fast-paced introduction to the field of natural language processing. We cover a range of foundational concepts, theoretical and computational models of language, and linguistic phenomena. We focus on what makes automatic processing of language unique and challenging: its statistical properties, complex structure, and pervasive ambiguity. We use English as the primary exemplar throughout, but also discuss similarities and differences to other languages, and the implications for computational models. \n\nAs we progress from lower levels of linguistic structure (words and morphemes) through syntax to semantics and discourse, we cover formal models and algorithms for representing and analysing these different types of structure (e.g., n-gram models, HMMs, dependency parsing, dynamic programming, and word embeddings). These methods form the conceptual foundation for understanding state-of-the-art approaches, which are covered in depth in the Semester 2 follow-on course NLU+. We also introduce methodological and ethical considerations (e.g., evaluation, data collection, algorithmic bias) that are important for research in the field.",
        "course_desc": "The course follows a roughly 3-part structure, following the progression of linguistic structure. Each part introduces linguistic phenomena and associated NLP models and algorithms. Interspersed throughout we discuss potential applications (e.g., sentiment analysis, text classification, QA systems) and methodological topics (e.g., evaluation, annotation, ethical concerns). \n\nPart I: Words \n* Inflectional and derivational morphology \n* Finite state methods and Regular expressions \n* Bag-of-Words models and their applications \n* Word Classes and Parts of speech \n* Sequence Models (n-gram and Hidden Markov models, smoothing) \n* The Viterbi algorithm, Forward Backward, EM \n\nPart II: Syntax \n* Syntactic Concepts (e.g., constituency, subcategorisation, bounded and unbounded dependencies, feature representations) \n* Analysis in CFG - Greedy algorithms---Shift-reduce parsing \n* Divide-and-conquer algorithms---CKY \n* Lexicalised grammar formalisms (e.g., CCG, dependency grammar) \n* Statistical parsing (PCFGs, dependency parsing) \n\nPart III: Semantics and Discourse \n* Logical semantics and compositionality \n* Semantic derivations in grammar \n* Lexical Semantics (e.g., word embeddings, word senses, semantic roles) \n* Discourse (e.g., anaphora)",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": [
            "Foundations of Natural Language Processing (INFR09028) OR\nFoundations of Natural Language Processing (INFR10078)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify, construct, and analyse examples of different kinds of ambiguity in natural language (e.g., ambiguity in part-of-speech, word sense, syntactic attachment). Explain how ambiguity presents a problem for computational analysis, and some of the ways it can be addressed.\ndescribe and apply standard sequence and classification models; describe parsing and search algorithms for different levels of analysis (e.g. morphology, syntax, and semantics) and simulate each algorithm step-by-step with pen and paper.\nfor a range of NLP tasks, outline a processing pipeline for that task, including standard data sets, models, algorithms, and evaluation methods. Given a particular pipeline or part of the pipeline, identify potential strengths and weaknesses of the suggested dataset/method (including both technical and ethical issues, where appropriate), and provide examples to illustrate.\nimplement parts of the NLP pipeline with the help of appropriate support code and/or tools. Evaluate and interpret the results of implemented methods on natural language data sets."
    },
    {
        "course_code": "INFR11199",
        "course_title": "Advanced Database Systems",
        "course_summary": "Database management systems are at the core of computer applications that need to store, manipulate, and query data. This course takes a deep dive into how modern database systems function internally, from studying their high-level design to understanding the underlying data structures and algorithms used for efficient data processing. The course covers a range of data management techniques from both commercial systems and cutting-edge research literature, enabling students to apply these techniques to other fields of computer science.\n\nThe covered topics include database architecture, storage manager, data models (row, columnar), indexing (tree-based, hash tables), transaction processing (ACID, concurrency control), crash recovery, parallel architectures (multi-core, distributed), and large-scale data processing systems. These topics will be valuable to students who plan to work in the data science industry but also to students who want to do research in the area of data management. The programming component of this course will allow students to develop first-hand experience working with database systems that goes beyond writing SQL queries.",
        "course_desc": "Lectures will cover roughly the following topics:\n- Database systems architectures, row stores and column stores, OLTP vs. OLAP, in-memory database systems\n- Storage: secondary-storage devices\n- Indexing: tree-based and hash-based techniques, multi-dimensional indexing, learning indices from data\n- Query evaluation: theory of query evaluation, sorting and join processing, selection, projection, aggregation\n- Query optimisation: cardinality estimation, cost-based query optimisation, dynamic programming, rule-based optimisation\n- Transaction management: ACID properties, concurrency control, locking and multi-version protocols, crash recovery\n- Distributed database systems: parallel query evaluation, distributed transaction processing\n- Big data and NoSQL systems",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Advanced Database Systems (UG) (INFR11217)"
        ],
        "other_requirements": "",
        "learning_outcomes": "Describe how database management systems function internally. Interpret and comparatively criticise database systems architectures.\nImplement major components of a database management system and analyse their performance.\nAnalyse and compare the fundamental query evaluation and concurrency control algorithms, identify strengths and weaknesses of query evaluation plans, and optimise query evaluation plans.\nIdentify trade-offs among database systems techniques and contrast distributed / parallel techniques for OLTP and OLAP workloads."
    },
    {
        "course_code": "INFR11217",
        "course_title": "Advanced Database Systems (UG)",
        "course_summary": "This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.",
        "course_desc": "This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Advanced Database Systems (INFR11199)"
        ],
        "other_requirements": "",
        "learning_outcomes": "describe how database management systems function internally. Interpret and comparatively criticise database systems architectures\nimplement major components of a database management system and analyse their performance\nanalyse and compare the fundamental query evaluation and concurrency control algorithms, identify strengths and weaknesses of query evaluation plans, and optimise query evaluation plans\nidentify trade-offs among database systems techniques and contrast distributed / parallel techniques for OLTP and OLAP workloads"
    },
    {
        "course_code": "INFR11213",
        "course_title": "Advanced Robotics",
        "course_summary": "***This course replaces Robotics: Science and Systems (INFR11092)***\n\nRobotics is about turning high level goals into plans for action, i.e. robots sense the environment and produce physical motions and interactions with the environment to achieve a goal. In this course, students will learn the major algorithmic techniques and practical skills in robotics that can be applied and transferred to many real-world applications, such as manipulation of surgical robotics and robot assembly in automobile and manufacturing. \n\nThe course assumes no prior knowledge of robotics, so begins with a high-level overview of the major areas in robotics and then introduces core topics: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation and optimal control; robot motion planning and basics of robot learning. \n\nBuilding on these fundamentals, the course then focuses on the advanced control and task planning of articulated robotic systems, e.g. robotic manipulators. Students develop a lab practical in both simulation and on a real robot, so as to consolidate theoretical knowledge and develop practical skills.",
        "course_desc": "This is a fast-paced course that starts with the fundamentals and then proceeds to go in-depth with core elements in robotics. The focused topics cover: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation, robot motion planning; and robot learning. \n\nThe aim of the course is to present essentials in robotics, articulated robots in particular, culminating in a robotic lab practical. The lab involves the development of an integrated robotic system which embodies the major algorithmic techniques used in real-world robotic applications. To bridge the lectures on algorithms and lab sessions, the course also provides tutorials dedicated to the practice of programming and the implementation of algorithms - from the equations to code.\n\nLectures on these topics will be complemented by labs that exercise knowledge of a cross section of these techniques, based on realistic tasks driven by real-world applications, such as dual-arm robot manipulation. The practical lab consists of 2 parts: individual-based simulation (80%), and group-based real robot demonstration (20%). The lab demonstration will be carried out on an advanced humanoid robot and students will work in groups to deploy their work on the real robot.",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "analyse the fundamental principles and the essential concepts in canonical robotics topics, evaluate the suitability and applicability of the algorithms given a robotics problem. Identify, propose and develop robotic solutions to solve practical robotic tasks\nprogram and implement theoretical algorithms using common programming languages, and develop proficiency in debugging the code\nuse common robotics-related software, and use simulation tools to successfully set up robotic tasks and environments\nwrite up and deliver a technical and scientific report, and demonstrate analytical and critical thinking to explain the positive and negative results of the tasks, and evaluate the performance by using quantifiable metrics\nincrease awareness of health and safety issues while working with real robotic systems, acquire knowledge of basic safety procedures of operating robotic and / or electronic systems, learn practical skills in using physical emergency devices and implementing software safety measures"
    },
    {
        "course_code": "INFR11156",
        "course_title": "Algorithmic Foundations of Data Science",
        "course_summary": "The course aims to introduce algorithmic techniques that form the foundations of processing and analysing massive datasets of various forms. In particular, the course discusses how to pre-process massive datasets, efficiently store massive datasets, design fast algorithms for massive datasets, and analyse the performance of designed algorithms. Through various examples and the coursework, the students will see applications of the topics discussed in class in other areas of computer science, e.g., machine learning, and network science.",
        "course_desc": "The course is to discuss algorithmic techniques that form the foundations of processing and analysing massive datasets of various forms. Specific techniques covered in the course include effective representation of datasets, extracting useful information from a dataset based on algebraic tools, designing faster algorithms based on sampling and sketching techniques. Students in class will learn these techniques through intuitions, theoretical reasoning, and practical examples.\n\nThe syllabus includes:\nHigh-dimensional spaces\nBest-fit subspaces and singular value decomposition\nSpectral algorithms for massive datasets\nData streaming algorithms\nClustering\nGraph sparsification",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "demonstrate familiarity with fundamentals for processing massive datasets.\ndescribe and compare the various algorithmic design techniques covered in the syllabus to process massive datasets\napply the learned techniques to design efficient algorithms for massive datasets\napply basic knowledge in linear algebra and probability theory to prove the efficiency of the designed algorithm\nuse an appropriate software to solve certain algorithmic problems for a given dataset"
    },
    {
        "course_code": "INFR11279",
        "course_title": "Algorithmic Foundations of Data Science (UG)",
        "course_summary": "This course follows the delivery and assessment of Algorithmic Foundations of Data Science (INFR11156) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11156 instead.",
        "course_desc": "This course follows the delivery and assessment of Algorithmic Foundations of Data Science (INFR11156) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11156 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "demonstrate familiarity with fundamentals for processing massive datasets.\ndescribe and compare the various algorithmic design techniques covered in the syllabus to process massive datasets\napply the learned techniques to design efficient algorithms for massive datasets\napply basic knowledge in linear algebra and probability theory to prove the efficiency of the designed algorithm\nuse an appropriate software to solve certain algorithmic problems for a given dataset"
    },
    {
        "course_code": "INFR11020",
        "course_title": "Algorithmic Game Theory and its Applications",
        "course_summary": "Game theory is the formal study of interaction between \"self-interested\" (or \"goal-oriented\") \"systems\" (or \"agents\" or \"decision makers\" or \"players\"), & strategic scenarios that arise in such settings. It began life in Economics in the 1940's with the work of von Neumann & Morgenstern, but has since been applied to an extraordinary range of subjects, including political science, evolutionary biology & even to inspection regimes for arms control. \n\nGame theory has for years also played an important, if less recognized, role in several branches of computer science. Applications within computer science include the use of games in automated verification & model checking to model computing systems in an unknown and possibly adverse environment. In AI games are applied to the analysis of multi-agent systems. Recently, with the advent of the internet and e-commerce, many game theoretic questions in the interplay between economics & computing have received extensive attention. These include electronic auctions, & more generally mechanism design questions (inverse game theory) related to finding incentive structures for cooperation between independent entities on the internet. \n\nWherever game theory plays a quantitative role, algorithmic and computational questions related to \"solving\" games are also of central importance. \n\nThis course aims to bring together as a coherent body of knowledge the game theoretic algorithms & models that underpin several flourishing subjects at the intersection of computer science, economics and e-commerce, & AI.",
        "course_desc": "Examples of diverse games\nZero-sum two-person games: LP, simplex, LP-duality, mixed strategies and the minimax theorem\n\nGeneral games in strategic form:\n - Equilibria and Nash's theorem\n - 2-player equilibria: Lemke-Howson algorithm and its variants. \n\nGames in Extensive form (mainly zero-sum, perfect information):\n - Game trees. Relation to Strategic games\n - and / or game graphs and reachability games\n - bisimulation, simulation, parity games, and other omega-games on automata (finitely presented, infinite duration games)\n - mean value games, MDPs, and stochastic games\n\nMechanism design and inverse game theory: designing games where selfish players will behave as desired:\n - Vickery auctions and other mechanisms\n - Combinatorial auctions\n - Incentive structures for the internet. \n\nRelevant QAA Computing Curriculum Sections:  Artificial Intelligence, Data Structures and Algorithms, e-commerce, Simulation and Modelling, Theoretical Computing",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Algorithmic Game Theory and its Applications (UG) (INFR11218)"
        ],
        "other_requirements": "",
        "learning_outcomes": "understand various models of games, how they are related, and how they arise in various applications in computer science and elsewhere\nunderstand linear programming and some of its broad applicability\nunderstand how algorithms are used to \"solve\" such games and their efficiency\nmodel various scenarios as strategic games, and devise algorithms to solve them\nunderstand the aims of the current research frontier"
    },
    {
        "course_code": "INFR11218",
        "course_title": "Algorithmic Game Theory and its Applications (UG)",
        "course_summary": "This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.",
        "course_desc": "This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Algorithmic Game Theory and its Applications (INFR11020)"
        ],
        "other_requirements": "",
        "learning_outcomes": "understand various models of games, how they are related, and how they arise in various applications in computer science and elsewhere\nunderstand linear programming and some of its broad applicability\nunderstand how algorithms are used to \"solve\" such games and their efficiency\nmodel various scenarios as strategic games, and devise algorithms to solve them\nunderstand the aims of the current research frontier"
    },
    {
        "course_code": "INFR11245",
        "course_title": "Applied Cloud Programming",
        "course_summary": "This course provides students with a hands-on introduction to programming in the cloud environment, contemporary tools and technologies and their application in individual software projects. \n\nStudents will gain the experience needed to differentiate between different architecture styles (like CaaS, SaaS, IaaS, PaaS, etc.) and explain the basic building blocks of cloud programming like containerization, micro-services, event-processing and the various communication protocols and methodologies used. They will be able to summarize cloud service offerings by the main providers like Amazon, Azure, Google and IBM and contrast differences and explain the need and structure of CI/CD-chains in cloud programming.",
        "course_desc": "The course gives students experience in developing in cloud environments with their special requirements and the current toolset used. In this way, the course provides a working foundation and overview for later in-depth experiences in more specialized areas of cloud-programming. \n\nAll implementations are done in Java; some extra information (non-assessed) will be provided in Golang, Rust or other suitable languages for the problem at hand, thus exposing and equipping the student further in cloud-programming specific technologies. \n\nIn particular, the student gains practical experience of:\n\n-\tIdentifying cloud specific problems, patterns and solutions\n-\tUnderstanding available tools and their application\n-\tIdentifying and formalising project requirements\n-\tIdentifying the most suitable toolsets and language environments to use for a given problem\n-\tConstructing a detailed design which does not over-commit to implementation detail\n-\tImplementing and testing a software application which realises the design\n-\tExperimenting with the implementations to explore the solutions to the computational problems\n-\tWriting a report which documents the solutions and the implementation",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Applied Cloud Programming (UG) (INFR11249)"
        ],
        "other_requirements": "",
        "learning_outcomes": "implement the basic building blocks of cloud programming like containerization, micro-services, event-processing and cloud data storage using standard service offerings by the main cloud providers in combination with several communication protocols\ncompare / contrast the differences between architecture styles like IaaS, PaaS, CaaS, SaaS, etc\nsummarize cloud service offerings by the main providers and evaluate the differences\ncontrast different contemporary cloud runtime environments\ndifferentiate the need and structure of Continuous Integration / Continuous deployment (CI/CD)-chains in cloud programming"
    },
    {
        "course_code": "INFR11249",
        "course_title": "Applied Cloud Programming (UG)",
        "course_summary": "This course follows the delivery and assessment of Applied Cloud Programming (INFR11245) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11245 instead.",
        "course_desc": "This course follows the delivery and assessment of Applied Cloud Programming (INFR11245) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11245 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Applied Cloud Programming (INFR11245)"
        ],
        "other_requirements": "",
        "learning_outcomes": "implement the basic building blocks of cloud programming like containerization, micro-services, event-processing and cloud data storage using standard service offerings by the main cloud providers in combination with several communication protocols\ncompare / contrast the differences between architecture styles like IaaS, PaaS, CaaS, SaaS, etc\nsummarize cloud service offerings by the main providers and evaluate the differences\ncontrast different contemporary cloud runtime environments\ndifferentiate the need and structure of Continuous Integration / Continuous deployment (CI/CD)-chains in cloud programming"
    },
    {
        "course_code": "INFR11258",
        "course_title": "Applied Interdisciplinary Project",
        "course_summary": "This course requires students to undertake a significant interdisplinary practical project in responsible and trustworthy natural language processing, under the supervision of a member of staff. The project will be done in small groups and will include the application of skills learned through other courses and requires the development and synthesis of new skills, including problem-solving, communication, and working in an interdisciplinary team.",
        "course_desc": "This course requires students to undertake a significant piece of self-directed group research in responsible and trustworth natural language processing, developed in consultation with, and supervised by, a member of staff. The project requires the application of skills learned through other courses and as well as the development and synthesis of new skills, including: \n\n* The ability to coordinate the work of an interdisciplinary team. \n\n* The ability to design, carry out, and analyse experiments to answer research questions in responsible and trustworthy NLP. \n\n* The ability to communicate novel scientific results orally and in writing.  \n\nThe course will mainly consist of practical work, but there will be a weekly whole-class session as well, in which the groups will report on progress and also raise any issues or questions.",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Coordinate with an interdisciplinary team to answer a research question in responsible and trustworthy natural language processing\nPlan and monitor a coordinated effort to meet milestones and deadlines within a limited timescale\nCommunicate novel research results to a scientific audience orally and in writing"
    },
    {
        "course_code": "INFR11211",
        "course_title": "Applied Machine Learning",
        "course_summary": "***This course replaces Introductory Applied Machine Learning (INFR11182)***\n\nMachine learning is the study of computer algorithms that learn and adapt from data, as opposed to being programmed to explicitly follow instructions. This course will discuss two main branches of machine learning: (1) Supervised Learning, which is concerned with learning to predict an output, given inputs, and (2) Unsupervised Learning, by which we wish to discover the structure embodied in data, without having access to additional information about the data, e.g. labels.\n\nThis course will equip the students with knowledge and a set of practical tools that can be applied to solve real-world machine learning problems. This achievement of this aim is underpinned by a principled approach to understanding the problem space and formulating a solution.",
        "course_desc": "Delivery:\nThe course will be delivered through a combination of: (1) pre-recorded videos lectures, (2) live question/answer and example sessions, (3) practical labs, (4) tutorials, and (5) an online discussion forum. \n\nContent:\nThe exact set of methods and algorithms explored in the course will vary slightly from year to year, but will include many of the following topics:\n- Introduction to machine learning\nThe learning problem, supervised vs unsupervised learning \n- Representing data\nCategorical vs real valued attributes, feature extraction, basis expansion\n- Classification\nNaive Bayes, logistic regression, nearest neighbours, decision trees, neural networks\n- Regression\nLinear regression\n- Ethics of machine learning\nFairness, biases in data, responsible application of machine learning methods\n- Fitting models to data\nOptimization, generalization\n- Unsupervised learning\nDimensionality reduction, PCA, clustering \n- Evaluating machine learning models\nAccuracy, precision and recall, ROC curves",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": [
            "(\nMachine Learning and Pattern Recognition (INFR11130) OR\nIntroductory Applied Machine Learning (INFD11005) OR\nMachine Learning (INFR10086) OR\nIntroductory Applied Machine Learning (INFR11182) OR\nIntroductory Applied Machine Learning (INFR10069) OR\nData Analysis and Machine Learning 4 (ELEE10031) OR\nIntroductory Applied Machine Learning (Semester 2) (INFR11205))",
            ""
        ],
        "other_requirements": "",
        "learning_outcomes": "explain the scope, goals, and limits of machine learning, and the main sub-areas of the field\ndescribe and critically compare the various techniques covered in the syllabus, and explain where they fit within the structure of the discipline\napply the taught techniques to data sets to solve machine learning problems, using appropriate software\nanalyse machine learning techniques in terms of their limitations and applicability to different machine learning problems and potential ethical concerns\ncompare and evaluate the performance of applicable machine learning techniques in a systematic way"
    },
    {
        "course_code": "INFR11180",
        "course_title": "Artificial Intelligence, Present and Future",
        "course_summary": "AI systems now outperform humans on tasks that were once taken to show great intelligence when undertaken by people (for example, playing chess). How far can this go in the future?  What are the assumptions behind different approaches to AI? What dangers can there be from AI systems, and how should AI practitioners take these into account? The course gives a quick overview of the background and of contemporary work in symbolic AI, and looks at the relationship between statistical and 2 logical approaches to AI. It also addresses some of the philosophical and ethical issues that arise.",
        "course_desc": "The course surveys the state of the art in current AI, looking at systems and techniques in various subfields (eg,  agents and reasoning;  planning, constraints and uncertainty; google search and the semantic web; dialogue and machine translation; varieties of learning).\n\nThroughout, relationships between different approaches to AI will be explored,  especially  the  symbolic/sub-symbolic  split  at  the  representation level. Philosophical and ethical issues in AI issues will be introduced.\n\nTypical topics include:\n\nReasoning agents\nLogic and inference via Logic Programming\nLinked data, semantic net and internet search\nMonte Carlo Tree Search\nPlanning under uncertainty\nAdversarial search, game playing\nProbabilistic inference\nInductive Logic Programming\nNatural language processing, approaches to machine translation\nApproaches to machine learning\nAI prospects and dangers\nEthical and Philosophical issues.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Informatics 2D - Reasoning and Agents (INFR08010)"
        ],
        "other_requirements": "",
        "learning_outcomes": "demonstrate knowledge that covers and integrates the current main conceptual frameworks at use in AI\ncompare and contrast competing approaches towards the construction of AI artefacts\nunderstand and make use of computational reasoning techniques to solve AI problems\nclearly present and justify considered opinions on major debates in the field"
    },
    {
        "course_code": "INFR11033",
        "course_title": "Automatic Speech Recognition",
        "course_summary": "This course covers the theory and practice of automatic speech recognition (ASR), with a focus on the statistical approaches that comprise the state of the art. The course introduces the overall framework for speech recognition, including speech signal analysis, acoustic modelling using hidden Markov models, language modelling and recognition search. \n\nAdvanced topics covered will include speaker adaptation, robust speech recognition and speaker identification. The practical side of the course will involve the development of a speech recognition system using a speech recognition software toolkit.",
        "course_desc": "Signal analysis for ASR\nStatistical pattern recognition (Bayes decision theory, Learning algorithms, Evaluation methods, Gaussian mixture model, and EM algorithm)\nHidden Markov Models (HMM)\nContext-dependent models\nDiscriminative training\nLanguage models for LVCSR (large vocabulary continuous speech recognition)\nDecoding\nRobust ASR (Robust features Noise reduction, Microphone arrays)\nAdaptation (Noise adaptation, Speaker adaptation/normalization, Language model adaptation)\nSpeaker recognition\nHistory of speech recognition\nAdvanced topics (Using prosody for ASR, Audio-visual ASR, Indexing, Bayesian network)\nSpeech recognition applications (including privacy implications)\n\nRelevant QAA Computing Curriculum Sections: Artificial Intelligence, Natural Language Computing",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Automatic Speech Recognition (UG) (INFR11219)"
        ],
        "other_requirements": "",
        "learning_outcomes": "describe the statistical framework used for automatic speech recognition\nunderstand the weakness of the simplified speech recognition systems and demonstrate knowledge of more advanced methods to overcome these problems\ndescribe speech recognition as an optimization problem in probabilistic terms\nrelate individual terms in the mathematical framework for speech recognition to particular modules of the system\nbuild a large vocabulary continuous speech recognition system, using a standard software toolkit"
    },
    {
        "course_code": "INFR11219",
        "course_title": "Automatic Speech Recognition (UG)",
        "course_summary": "This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead.",
        "course_desc": "This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Automatic Speech Recognition (INFR11033)"
        ],
        "other_requirements": "",
        "learning_outcomes": "describe the statistical framework used for automatic speech recognition\nunderstand the weakness of the simplified speech recognition systems and demonstrate knowledge of more advanced methods to overcome these problems\ndescribe speech recognition as an optimization problem in probabilistic terms\nrelate individual terms in the mathematical framework for speech recognition to particular modules of the system\nbuild a large vocabulary continuous speech recognition system, using a standard software toolkit"
    },
    {
        "course_code": "INFR11160",
        "course_title": "Bioinformatics 1",
        "course_summary": "This is an introductory course for the discipline of Bioinformatics for students from both physical science and life science backgrounds. Bioinformatics is an inter-disciplinary subject that develops and implements novel methodologies and tools for analysing and learning from biological data. These data are increasingly large and complex because of significant technological developments and their application at scale in biological and biomedical application areas.\n\nIn this course, we will cover the fundamental domain knowledge needed from both biological and computational disciplines to enable further study and research in this subject with a strong emphasis on practical applications of the taught methods.",
        "course_desc": "In this course, we will introduce key biological concepts including the main types of molecules we study (DNA, RNA, and protein) and the cell biological processes involved in the regulation and function of biological systems. The cornerstone of foundational Bioinformatics lies in the analysis of sequences; strings of characters that encode genetic information in organisms. We will describe the theory and put into practice how we work with and analyse these sequences using a range of databases, algorithms, and tools. You will undertake mini research projects using publicly available data to put your learning into practice. The course is taught using Python; students need to be comfortable with basic coding in Python as this is required to use the course notebooks each week and for the assessed coursework.\n\nTopics change slightly each year, but typically include:\npairwise and multiple sequence alignment, biological databases, ontologies & functional enrichment analysis, network analysis, multi-omics analysis (transcriptomics, proteomics, methylomics), and biomedical text analytics.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "communicate between biological and computational domains to facilitate effective inter-disciplinary working\nuse and / or implement Bioinformatics tools, services, and software in practical research\nhave sufficient background knowledge, skills and understanding to discover and apply additional bioinformatics techniques in future work"
    },
    {
        "course_code": "INFR11005",
        "course_title": "Bioinformatics 2",
        "course_summary": "Bioinformatics is at the interface between two of the most influential scientific fields. An appreciation of computational and biological sciences, in particular the terminology employed in both fields, is essential for those working at such an interface. In this course, we aim to cover the following:\n\n* The concepts of computer science that relate to problems in biological sciences.\n* Commercial and academic perspectives on bioinformatics.\n* The impact of bioinformatics on the methodologies used in biological science.\n* The influence biological science has on computing science.",
        "course_desc": "The course will cover the following:\n\n* Next generation sequencing technologies\n* Machine learning algorithms for sequence analysis\n* Computational assembly of genomic sequences\n* Gene finding\n* Advanced functional genomics, expression analysis\n* Industry guest lecture\n* The future of bioinformatics: proteomics, neuroinformatics, e-science.\n\nRelevant QAA Computing Curriculum Sections:  Data Structures and Algorithms, Developing Technologies",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "describe the main computational algorithms used in the analysis of biological sequences\ndiscuss the practical limitations of sequence analysis methods and contrast the methods available\nappraise common biological data sources and the key contributing error / noise sources in such data\ndemonstrate an understanding of how experimental design in biology is critical to subsequent data analysis and representation in bioinformatics\ncritically evaluate research literature in the field"
    },
    {
        "course_code": "INFR11144",
        "course_title": "Blockchains and Distributed Ledgers",
        "course_summary": "Blockchain technology and distributed ledgers have been hailed as a turning point in scaling information technology services at a global level. Although the digital currency Bitcoin is the best-known Blockchain application today, the technology is set to play a much broader role in cyber security. \n\nThis course is an introduction to blockchain systems and distributed ledgers, the relevant cryptographic tools and smart contracts programming.",
        "course_desc": "The concept of blockchain will be covered in detail together with the supporting cryptographic technology. Questions that will be covered is why it works and what problems can it solve. \n\nSyllabus:\n1. Introduction to blockchain. What is a distributed ledger. Transactions. Digital Signatures.\n2. The consensus layer. Basic Properties. Proof of Work.\n3. Robust Transaction Ledgers. Properties and Objectives. Permissioned, permissionless ledgers. \n4. Privacy Issues. Anonymity, Pseudonymity, Unlinkability. Zero-Knowledge Proofs.\n5. Scalability Issues. Byzantine agreement protocols. \n6. Blockchain as a platform. Smart Contracts. \n7. Secure multiparty computation techniques and their application to blockchain protocols. \n8. Alternative techniques to proof of work for blockchain protocols, proof of stake/space. \n9. Game theoretic analysis of blockchain protocols. \n10. Blockchain use cases, applications, and policy issues.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "explain and Analyze protocols and systems involving multiple participants and their security properties.\ndemonstrate the ability to think critically about cybersecurity.\nprogram smart contracts as part of scalable information technology services.\nanalyse and evaluate smart contract code utilizing basic cryptographic primitives such as digital signatures and hash functions."
    },
    {
        "course_code": "INFR11238",
        "course_title": "Blockchains and Distributed Ledgers (UG)",
        "course_summary": "This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead.",
        "course_desc": "This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Blockchains and Distributed Ledgers (INFR11144)"
        ],
        "other_requirements": "",
        "learning_outcomes": "explain and Analyze protocols and systems involving multiple participants and their security properties\ndemonstrate the ability to think critically about cybersecurity\nprogram smart contracts as part of scalable information technology services\nanalyse and evaluate smart contract code utilizing basic cryptographic primitives such as digital signatures and hash functions"
    },
    {
        "course_code": "INFR11206",
        "course_title": "Case Studies in AI Ethics (CSAI)",
        "course_summary": "Artificial intelligence (AI) is being deployed in real-world settings more than before. Especially, fully automated AI systems started to make critical decisions such as who should be employed or who is a criminal. In this course, the students will increase their understanding of data ethics. \n\nThe course gives an overview of the ethical issues (e.g. bias, fairness, privacy) and brings together different case studies from various contexts. The students will analyse case studies to identify and mitigate potential risks considering legal, social, ethical or professional issues.",
        "course_desc": "In this course, we will discuss the following topics:\n\nData Ethics:\n- Deployed AI technologies\n- Ethical and social issues arising with data\n\nFairness, Accountability and Transparency:\n- Overview of the definitions\n- Types of bias\n- Explainability\n\nPrivacy:\n- Arising issues (e.g. surveillance, usability vs privacy trade-off)\n- State of the art: ML approaches, Agent-based approaches\n\nTowards implementing ethical tools:\n- Implementing AI Ethics  \n- Ethics guidelines for Trustworthy AI (e.g. European Commission), AI Auditing guidelines (e.g. ICO)   \n- Applied Ethics (e.g. IEEE Ethics in Action, Markkula Centre's Ethics Toolkit)",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Case Studies in AI Ethics (CSAI) (UG) (INFR11231) OR\nProfessional Issues (Level 10) (INFR10022) OR\nEthics of Artificial Intelligence (PHIL10167)"
        ],
        "other_requirements": "",
        "learning_outcomes": "understand data ethics and arising issues (e.g. bias, fairness, privacy) in AI systems\nexplain and provide examples of how AI systems can play a critical role in decision making\nanalyse case studies to identify and mitigate potential risks considering legal, social, ethical or professional issues\napply ethical methodologies in the design of responsible AI systems"
    },
    {
        "course_code": "INFR11231",
        "course_title": "Case Studies in AI Ethics (CSAI) (UG)",
        "course_summary": "This course follows the delivery and assessment of Case Studies in AI Ethics (CSAI) (INFR11206) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11206 instead.",
        "course_desc": "This course follows the delivery and assessment of Case Studies in AI Ethics (CSAI) (INFR11206) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11206 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Case Studies in AI Ethics (CSAI) (INFR11206) OR\nProfessional Issues (Level 10) (INFR10022) OR\nEthics of Artificial Intelligence (PHIL10167)"
        ],
        "other_requirements": "",
        "learning_outcomes": "understand data ethics and arising issues (e.g. bias, fairness, privacy) in AI systems\nexplain and provide examples of how AI systems can play a critical role in decision making\nanalyse case studies to identify and mitigate potential risks considering legal, social, ethical or professional issues\napply ethical methodologies in the design of responsible AI systems"
    },
    {
        "course_code": "INFR11094",
        "course_title": "Case Studies in Design Informatics 1",
        "course_summary": "Design Informatics is a new field where design thinking and methods are used to explore the application of computational and data technologies on products, services and systems. In this class we will explore case studies of where design and emerging computational technologies are coming together. You will also learn about design thinking, design methods and look at relevant qualitative research methods in the context of design theory. You will then work in groups of mixed skills to design a response to a brief.",
        "course_desc": "This course introduces students to the emerging field of Design Informatics, using state of the art research projects and real examples. Students will learn to assess the limitations of the state of the art and critically appraise novel uses of the latest design methods, theories and technologies. \n\nThe course is organised around a series of case study domains, which are introduced via lectures. Wherever possible, examples are taken from the ongoing or recent research at the University of Edinburgh. The case studies will be discussed in groups with lecturers, tutors and fellow students in relation to theory, methods and their legal, ethical and social dimensions. There will be an individual assignment focused on critically appraising a design informatics case study. \n\nStudents will also work in groups, supported by senior students (normally, experienced students who are enrolled in CDI2), with a member of academic staff as mentor. In parallel, each group works on its own to develop a speculative design response to a selected case study domain or context, producing a prototype and conducting a short evaluative study based on that prototype.",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "discuss the research and design processes behind Design Informatics projects\ndescribe, with examples, the practical limits of current technologies and theories\nanalyse in groups problems and suggest potential solutions, which can or should combine computational and design thinking\nconduct ethical research in Design Informatics\ncritically evaluate research literature in the field, taking into account legal, social, ethical or professional issues"
    },
    {
        "course_code": "INFR11095",
        "course_title": "Case Studies in Design Informatics 2",
        "course_summary": "How would you help the next generation of Design Informatics students avoid the mistakes you made? Every time a decision is made to pursue one course of action, other routes are closed off. The goal is to lead a group of fresh thinkers to see why you made particular project design decisions, and to help them map out a different service or product that could be built from the same components.",
        "course_desc": "This course extends students' engagement with real examples in the emerging field of Design Informatics. A key component of the course is the detailed evaluation and rationale behind several current research projects that highlight the limitations of the state of the art, or novel use of the latest theories and technologies. The primary learning outcome is the development of specialist reflective and leadership skills that can then be exploited in future industrial application or academic research into Design Informatics.\n\nThe senior students following this course as part of a two-year masters complete a compulsory summer placement, and then work with junior students (normally, who are enrolled in CDI1).\n\nThe syllabus divides into three parts.\n- In Part 1, students complete a summer internship placement and are then debriefed on it in a series of tutorials in the beginning of the year\n- In Part 2, students support junior students (typically enrolled in CDI1) in their group case studies. This support can take a variety of forms, from mentoring a group of younger students to providing training and support in specialist techniques.\n- In Part 3, concurrently to the support provided to junior students, the students are mentored on their final Masters thesis, similar to the Informatics Research Proposal (INFR11137). This mentoring is in addition to the work students do with their supervisors and will cover key skills required to complete a Masters thesis\n\nFor Parts 1 and 3, a mix of tutorials and lectures are used.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "demonstrate that they can contribute to the activities of a small group, usually in the commercial sector\ncritically evaluate personal experience in addressing problems and suggesting potential solutions, and present conclusions using multimodal tools\nintroduce selected problems as potential new case studies\nlead discussion in analysing problems and scoping solutions\nmentor colleagues who extend, through engineering and/or design methods, specific features or applications identified in one real example"
    },
    {
        "course_code": "INFR11281",
        "course_title": "Case Studies in Responsible Natural Language Processing",
        "course_summary": "This course will focus on applying responsible NLP principles in practice. This will take two forms: (1) students will report and reflect on their year 1 learning in the area of legal, social, and ethical aspects of AI and NLP, (b) students will work on on case studies that draw out insights for the development and practical application of principles of responsible NLP.",
        "course_desc": "This course will enable students to practice responsible research and innovation in action. They will reflect on their learning in areas of legal, social, and ethical aspects of AI and NLP and put this learning into practice by working on case studies on responsible NLP. The course will have an interdisciplinary outlook, and the case studies will be provided by the industry partners of the CDT. Example topics include:\n\n- fairness and bias\n- social issues of model deployment\n- impact of AI and NLP technology on the workplace\n- data privacy, copyright, and other legal implications of NLP\n- translation of ethical and moral values to technical systems\n- political influence and manipulation with the help of AI and NLP\n- generative AI and the creative industries\n\nThe students will engage in two main activities: (1) student-lead seminars in which students present topics in responsible NLP based on the courses they\u00c2\u00bfve taken in year 1; (2) partner presentations introducing case studies on responsible NLP; each student will select one of these case studies and work with the partner on an analysis of that case study, drawing on their knowledge from the first part of the course.\n\nThis is a course-work only course; the students will be assessed on their seminar presentations and on a report of their case study analysis.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Critically evaluate the literature on legal, social, and ethical aspect of NLP\nWorking with partners, analyse legal, social, and ethical implications of deploying NLP technology across various application domains\nDesign potential solutions to legal, social and ethical problems, combining engineering and design thinking"
    },
    {
        "course_code": "INFR11128",
        "course_title": "Categories and Quantum Informatics",
        "course_summary": "This course is replaced by Introduction to Quantum Programming and Semantics (INFR11242) (QPS) from 2023-2024. This course will not be delivered during 2023-24, and will be officially closed from 31st July 2024.\n\nThere are several languages for programming quantum protocols. Each has its own strengths and weaknesses. This course surveys current platforms (OpenQAsm, Qiskit, Q#, Quipper, Quantomatic, and PyZX) and analyses their respective features semantically. The theoretical analysis uses category theory, a powerful mathematical tool in logic and informatics, that has influenced the design of many modern programming languages. It enables a powerful graphical calculus that lets you draw pictures instead of writing algebraic expressions. This technique is visually extremely insightful, yet completely rigorous. For example, correctness of protocols often comes down to whether a picture is connected or disconnected, whether there is information flow from one end to another. In a practical way, this course investigates the conceptual reasons why quantum protocols and quantum computing work, rather than their algorithmic and complexity-theoretic aspects.",
        "course_desc": "The course has two parallel tracks: a practical one, and a theoretical one. The practical track surveys different quantum programming platforms. These include OpenQAsm, Qiskit, Q#,  Quipper, Quantomatic, and PyZX. We discuss their basic structure, strengths, and weaknesses. Via labs and live coding in lectures, students get hands-on experience of implementing small quantum programs. The emphasis is on the primitive programming constructs and structure of each language, not on large-scale quantum software development.\n\nSimultaneously, the theoretical track analyses the features of each language in denotational semantics, focusing on monoidal categories. Via lectures and self-study reading, the course teaches students the basics of dual objects in monoidal categories. Specific attention is paid to the graphical calculus, which makes the topic visually apparent. Via exercise sheets, and their review incorporated into the contact hours, the student learns to graphically manipulate algebraic objects such as monoids and Frobenius structures. They will understand that this still allows perfectly rigorous proofs of correctness, and be able to see the information flow of a protocol that is often hidden behind superfluous details.\n\nThroughout the course, the practical and theoretical material is linked. We will study notions typically thought to belong to quantum theory, such as entanglement, no-cloning, teleportation, and complementarity. It will turn out some of these notions also make perfect sense in other settings. For example, the very same categorical description of quantum teleportation also describes classical encryption with a one-time pad. We identify characteristics of classical and quantum information, aiming to equip students to choose the right tools and techniques for future problems they may encounter.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Categories and Quantum Informatics (UG) (INFR11232)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify features of current quantum programming platforms\nmodel quantum protocols categorically and prove their correctness graphically\napply and prove basic results about monoidal categories\nfluently manipulate the graphical calculus for compact categories\ndifferentiate between categories modelling classical and quantum informatics"
    },
    {
        "course_code": "INFR11036",
        "course_title": "Computational Cognitive Neuroscience",
        "course_summary": "In this course, we study how computations carried out by the nervous system leads to cognition, in particular perception, memory, learning, and decision-making. We learn to develop and simulate computational models that incorporate data from neurobiology and / or can be used to model aspects of cognition such as measured during behavioural experiments. \n\nSuch models can be used to understand individual differences and mental disorders (e.g., autism, schizophrenia, addiction, and depression): a domain of application that is emphasised in the second half of the course is the emerging field of computational psychiatry.",
        "course_desc": "- Overview of computational neuroscience basics (models of neurons and networks)\n- Reinforcement learning models for computational neuroscience\n- Bayesian models for computational neuroscience (The Bayesian Brain)\n- Computational modelling of behavioural data\n- Models of decision-making\n- Application to individual differences (e.g., autism) and mental disorders (e.g., schizophrenia, addiction, and depression): introduction to Computational Psychiatry",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Computational Cognitive Neuroscience (UG) (INFR11233)"
        ],
        "other_requirements": "",
        "learning_outcomes": "Describe fundamental neuroscience and psychiatry concepts as well as current computational theories of the brain and mental illness.\nAbstract neuroscience and behavioural experimental data into an appropriate computational model and critically evaluate such a model from a biological and/or computational and/or clinical perspective.\nWrite computational models learned in lectures and data fitting methods in mathematical form and implement and analyse them in Python or MATLAB.\nCritically evaluate model simulations and report the results in the form of a scientific paper.\n5.\tCompare the strengths and weaknesses of alternative modelling approaches and develop a critical understanding of the power and limitations of current research."
    },
    {
        "course_code": "INFR11233",
        "course_title": "Computational Cognitive Neuroscience (UG)",
        "course_summary": "This course follows the delivery and assessment of Computational Cognitive Neuroscience (INFR11036) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11036 instead.",
        "course_desc": "This course follows the delivery and assessment of Computational Cognitive Neuroscience (INFR11036) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11036 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Computational Cognitive Neuroscience (INFR11036)"
        ],
        "other_requirements": "",
        "learning_outcomes": "Describe fundamental neuroscience and psychiatry concepts as well as current computational theories of the brain and mental illness.\nAbstract neuroscience and behavioural experimental data into an appropriate computational model and critically evaluate such a model from a biological and/or nd data fitting methods in mathemcomputational and/or clinical perspective.\nWrite computational models learned in lectures and data fitting methods in mathematical form and implement and analyse them in Python or MATLAB.\nCritically evaluate model simulations and report the results in the form of a scientific paper.\nCompare the strengths and weaknesses of alternative modelling approaches and develop a critical understanding of the power and limitations of current research."
    },
    {
        "course_code": "INFR11102",
        "course_title": "Computational Complexity",
        "course_summary": "This module studies the problem of classifying computational problems according to their intrinsic difficulty or 'complexity'. We begin by defining a standard computational model, the Turing machine, which is useful for abstracting out complexity aspects of computational problems. We define various complexity resources, such as time, space, non-determinism , randomness and non-uniformity, and learn how to classify computational problems according to their resource requirements. Among other topics, we discuss the central problem of theoretical computer science, the P vs NP problem, and explain its importance using the notions of reductions and completeness.",
        "course_desc": "* The computational model: Turing machines\n* NP and NP completeness\n* Space complexity\n* Diagonalisation\n* The polynomial hierarchy\n* Circuits\n* Randomised computation\n* Counting complexity\n\nRelevant QAA Computing Curriculum Sections: Concurrency and Parallelism, Data Structures and Algorithms, Theoretical Computing",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "formulate computational models with resource constraints, and be able to describe relationships between these models\nanalyse computational problems from a complexity perspective, and so locate them within the complexity landscape\napply mathematical skills and knowledge from earlier years (eg., from logic and discrete mathematics) to concrete problems in computational complexity\nappreciate the broader importance of fundamental problems in computer science, such as the P vs NP problem"
    },
    {
        "course_code": "INFR11209",
        "course_title": "Computational Neuroscience",
        "course_summary": "In this course we study computation in neural systems. We will consider problems such as: \n\nHow do neurons work and how do they communicate with one another? \nHow do groups of neurons work together to form representations of the external world? \nHow are memories stored and retrieved in the brain? \n\nWe will employ a combination of bottom-up and top-down approaches, meaning that we study these problems both by modelling and simulating the biological hardware, and by taking inspiration from artificial intelligence to try to build theories of the brain.",
        "course_desc": "This course focuses on computation in the nervous system. You will be introduced to basic neuroscience concepts, learn about how computational models are used to simulate processes in the brain, and learn about theories for how the brain processes information and performs computations. \n\nCourse Content:\n\n1. Introduction to basic neuroscience concepts\n2. Models of neurons\n3. Neural encoding\n4. Neural decoding\n5. Information theory\n6. Network Models\n7. Plasticity/learning\n\nThe course will be delivered through lectures and computer labs.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "describe and critically analyse fundamental concepts and approaches to studying neuroscience and neural computation\nabstract neuroscience experimental data into an appropriate computational model and critically evaluate such a model from a biological and/or computational perspective\ngiven a neuroscientific problem, identify an appropriate modelling approach to that problem and compare the strengths and weaknesses of alternative modelling approaches.\napply probabilistic, information-theoretic, and machine learning techniques to model neural function and evaluate the neurobiological implications of such models\nimplement the models and methods learned in lectures and critically evaluate the results in the context of neural computation"
    },
    {
        "course_code": "INFR11021",
        "course_title": "Computer Graphics (Level 11)",
        "course_summary": "This course is replaced by Computer Graphics: Rendering (INFR11246) from 2023-2024.\n\nThis introductory course in computer graphics comprises of three parts. The first part of the course presents a bird's-eye view of the current state-of-the-art in the field. The latter two parts cover rendering, which is one of the core topics in computer graphics, in detail. The second part of the course teaches central concepts in rendering, along with the relevant mathematics. Finally, the third part of the course focusses on applications of the theory taught in the second part.",
        "course_desc": "SYLLABUS\n\nPart I\n* Introduction [1]\n* Radiometry and photometry [1]\n* Modelling [1]\n* Special effects I: relighting [1]\n* Special effects II: compositing [1]\n\nPart II\n* Raytracing [1]\n* The rendering equation [2]\n* Monte Carlo path tracing [2]\n* Sampling [2]\n* Camera effects [1]\n\nPart III\n* Participating media [1]\n* Acceleration structures [1] \n* MCMC methods for light transport [1]\n* Gradient domain path tracing [1]\n* Overview of current research [1/2]\n* Discussion of open problems in rendering [1/2]\n* Conclusion [1]",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Computer Graphics (Level 11) (UG) (INFR11220)"
        ],
        "other_requirements": "",
        "learning_outcomes": "Define different sub-topics of Computer Graphics and to identify the focus of each of these areas. The student will also be able to describe the key open (and imminent) problems in each focus area.\nExplain the difference between real-time rendering systems (used in the video game industry) and physically-based rendering (used in cinematic and medical applications).\nPredict performance and output of state-of-the-art rendering libraries and tools for different classes of input models.\nDesign and develop programs to solve specific rendering problems by exploiting features of state-of-the-art rendering libraries.\nInterpret the results of standard algorithms on their respective failure cases, and suggest alternatives."
    },
    {
        "course_code": "INFR11220",
        "course_title": "Computer Graphics (Level 11) (UG)",
        "course_summary": "This course is replaced by Computer Graphics: Rendering (INFR11246) from 2023-2024.\n\nThis course follows the delivery and assessment of Computer Graphics (Level 11) (INFR11021) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11021 instead.",
        "course_desc": "This course follows the delivery and assessment of Computer Graphics (Level 11) (INFR11021) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11021 instead.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Computer Graphics (Level 11) (INFR11021)"
        ],
        "other_requirements": "",
        "learning_outcomes": "Define different sub-topics of Computer Graphics and to identify the focus of each of these areas. The student will also be able to describe the key open (and imminent) problems in each focus area\nExplain the difference between real-time rendering systems (used in the video game industry) and physically-based rendering (used in cinematic and medical applications)\nPredict performance and output of state-of-the-art rendering libraries and tools for different classes of input models\nDesign and develop programs to solve specific rendering problems by exploiting features of state-of-the-art rendering libraries\nInterpret the results of standard algorithms on their respective failure cases, and suggest alternatives"
    },
    {
        "course_code": "INFR11241",
        "course_title": "Computer Graphics: Geometry and Simulation",
        "course_summary": "This course introduces classic and state-of-the-art methodology in computer graphics. We will focus on methods and best practices in geometry and physical simulation, which are the basic building blocks for downstream applications such as animation, industrial design, game engineering, structural analysis, AR/VR, and medical imaging. Our curriculum will cover basic representations of shapes, geometric optimization, analysis, and principles of robust digital simulation of physical scenes. The techniques employed will involve classical numerical analysis up to deep geometric learning.\n\nThe course will include programming tasks to implement a few key algorithms in geometry processing, geometric learning, and physical simulation, to the extent that they can independently run and be analysed on modest open-source data.\n\nThis course (CGGS) and Computer Graphics: Rendering (CGR) are both courses that require no previous knowledge of computer graphics. These two courses may be taken independently or together. CGGS focusses on the representation, processing, and dynamics of 3D objects in the virtual world while CGR focusses on the rendering of virtual worlds as photo-realistic images.",
        "course_desc": "The course will be delivered through a combination of (1) live lectures, (2) tutorials, and (3) an online discussion forum.\n\nContent / Syllabus:\nThe exact set of methods and algorithms explored in the course will vary slightly from year to year, but will include many of the following topics:\n\n- Overview: geometry and simulation in digital applications.\n- Elemental digital representations of geometry: simplicial meshes, point clouds, voxelizations, implicit functions, neural fields\n- Elementary principles of discrete simulation: strain and stress tensors, force equations, time integration.\n- Geometry acquisition and reconstruction: classical (least-squares based) and modern (neural-network based) algorithms.\n- Discrete shape analysis: curvatures, topology, differential operators.\n- Finite-element spaces for simulation and analysis, including basic PDEs like elasticity, Stokes equation, and Poisson equation.\n- Simulation of rigid bodies with collisions.\n- Modern deep-learning techniques for geometry and simulation, such as physics-informed neural networks, graph neural networks, and implicit representations (e.g., signed distance fields)\n- Practical aspects of implementation and debugging in geometry: we will discuss how to identify, critically analyse, and improve performance in geometric methods, with emphasis on pitfalls and basic principles in implementation and design.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Computer Graphics: Geometry and Simulation (UG) (INFR11247)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify and isolate geometric problems and produce an algorithm to solve them\nimplement basic methods in geometry and simulation which would be adequate for either further research or as initial knowledge to find work in the relevant industry (examples of advanced applications in the industry that use this core knowledge: 3D printing, architectural design, medical imaging, weather simulations, robotics)\nuse software and tools (e.g., C++) to implement geometric algorithms and test their results\nidentify, fix, and test for possible issues with geometric algorithms in a way that transcends just 'software bugs' but rather problems with a geometric context"
    },
    {
        "course_code": "INFR11247",
        "course_title": "Computer Graphics: Geometry and Simulation (UG)",
        "course_summary": "This course follows the delivery and assessment of Computer Graphics: Geometry and Simulation (INFR11241) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11241 instead.",
        "course_desc": "This course follows the delivery and assessment of Computer Graphics: Geometry and Simulation (INFR11241) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11241 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Computer Graphics: Geometry and Simulation (INFR11241)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify and isolate geometric problems and produce an algorithm to fit\nimplement basic method in geometry and simulation which would be adequate for either further re-search or as an initial knowledge to find work in the relevant industry (example of advanced industry that uses this core knowledge: 3D printing, architectural design, medical imaging, weather simulations, robotics)\nuse software and tools (e.g.,C++) to implement geometric algorithms and test their results\nidentify, fix, and test for possible issues with geometric algorithms in a way that transcends just 'soft-ware bugs' but rather problems with a geometric context"
    },
    {
        "course_code": "INFR11246",
        "course_title": "Computer Graphics: Rendering",
        "course_summary": "This course replaces Computer Graphics (Level 11) (INFR11021) from 2023-2024.\n\nThis introductory course in computer graphics comprises of three parts. The first part of the course presents a bird's-eye view of the current state-of-the-art in the field. The latter two parts cover rendering, which is one of the core topics in computer graphics, in detail. The second part of the course teaches central concepts in rendering, along with the relevant mathematics. Finally, the third part of the course focusses on applications of the theory taught in the second part.",
        "course_desc": "SYLLABUS\n\nPart I\n* Introduction [1]\n* Radiometry and photometry [1]\n* Modelling [1]\n* Special effects I: relighting [1]\n* Special effects II: compositing [1]\n\nPart II\n* Raytracing [1]\n* The rendering equation [2]\n* Monte Carlo path tracing [2]\n* Sampling [2]\n* Camera effects [1]\n\nPart III\n* Participating media [1]\n* Acceleration structures [1]\n* MCMC methods for light transport [1]\n* Gradient domain path tracing [1]\n* Overview of current research [1/2]\n* Discussion of open problems in rendering [1/2]\n* Conclusion [1]",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": [
            "Computer Graphics (Level 11) (INFR11021)",
            "Computer Graphics (Level 11) (UG) (INFR11220)"
        ],
        "other_requirements": "",
        "learning_outcomes": "define different sub-topics of Computer Graphics and to identify the focus of each of these areas. The student will also be able to describe the key open (and imminent) problems in each focus area\nexplain the difference between real-time rendering systems (used in the video game industry) and physically-based rendering (used in cinematic and medical applications)\npredict performance and output of state-of-the-art rendering libraries and tools for different classes of input models\ndesign and develop programs to solve specific rendering problems by exploiting features of state-of-the-art rendering libraries\ninterpret the results of standard algorithms on their respective failure cases, and suggest alternatives"
    },
    {
        "course_code": "INFR11244",
        "course_title": "Computer Security (Level 11)",
        "course_summary": "To be a professional or researcher in the area, it is necessary to understand fundamental issues in connection with Cyber Security, Privacy, and Trust. This course aims to develop a deep understanding of current computer security and privacy topics and will prepare students for conducting research in this area.\n\nThe course is focused on the main aspects of Cyber Security, Privacy, and Trust. It is broken into 5 broad units: Cryptography, Secure communications, Network Security, OS security, and Web Security. Through these units students will explore topics like Cryptography, Software vulnerabilities, Web security, Malware, Access control, Mobile security, Differential privacy, Hardware protection, Side channel attacks, Block-chains, Network security, Usable security, and Passwords.\n\nThe very nature of the subject raises important societal and ethical concerns and will be raised in lectures as pertaining to each topic.\n\nWe will further provide 5 guest lectures from security professionals from industry (one for each of the 5 broad units / topics covered in the course) for our level 11 students.",
        "course_desc": "The goal of this course is to introduce students to fundamental security, privacy, and trust concepts and offer them working knowledge of threats and counter-measures in order for them to follow and leverage any developments / research in these areas. The topics to be covered in the course will include a sampling of the following: \n\n-\tIntroduction: fundamental concepts, access control models, threat modelling\n-\tNetwork security: basic networking concepts, DoS, Transport layer security, Link layer security, DNS attacks, Firewalls, Intrusion detection \n-\tUsable security: basic human factors, warning design, phishing, authentication, device authentication \n-\tCryptography: symmetric ciphers, asymmetric ciphers, MACs and hash functions, digital signatures\n-\tCryptographic protocols: identification, authentication and key agreement, SSL / TLS, anonymity protocols, TOR\n-\tOS security: OS concepts, memory and filesystem, access control, file permissions, memory safety, stack-based buffer overflows\n-\tMalware: viruses, trojan horses, worms, rootkits \n-\tWeb security: WWW basics, client-side attacks, session hijacking XSS, CSRF, defenses, server-side attacks, SQL injection, RFI, LFI",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": [
            "Computer Security (INFR10067)"
        ],
        "other_requirements": "",
        "learning_outcomes": "demonstrate detailed understanding of fundamental aspects of cyber security, privacy, and trust by being able to state relevant definitions, concepts and mechanisms\nrecognise the common security threats against computer systems, and describe and manipulate the basic mechanisms to address them\ncritically evaluate the literature related to their chosen topic, and to formulate academically-informed views on a range of security issues in the form of critical paper reviews\nuse basic techniques and design principles underlying security solutions including aspects of cryptography, security protocols, and secure programming\nconduct a hands-on basic security analysis of a computer system, and use the World Wide Web to research the latest security alerts and information"
    },
    {
        "course_code": "INFR11212",
        "course_title": "Computer Vision",
        "course_summary": "**This course replaces Image and Vision Computing (INFR11140) and Advanced Vision (INFR11031)**\n\nComputer Vision is the field of study that teaches computers how to 'see'. This means, how to go from the pixels in an image to the information that a human can describe when they see a picture, much like self-driving cars, autonomous robots, or social media apps that recommend images or videos based on your preferences. This course is an in-depth introduction to the field of Computer Vision.\n\nThe course is structured around different problems in computer vision, such as object recognition and video classification, and covers both classical and deep learning approaches.\n\nThe course can be taken without any prior knowledge of computer vision or deep learning, but it does assume some familiarity with machine learning concepts, and relevant mathematics and programming skills (see details under \"Other Requirements\"). The course delivers both theoretical and practical knowledge, and by the end you should be able to understand, design, and implement computer vision techniques for many real-world problems.",
        "course_desc": "This course teaches the principles and methodologies of computer vision, both from a theoretical and a practical perspective.\n\nThe content includes first the basics of image formation, image processing, classic computer vision principles and methods and introduction to deep learning. In the second part with focus on applications, including generative models, 3D, video understanding, vision and language, etc. \n\nThe course will be taught as a combination of: \n- Live lectures. \n- Tutorials to develop your ability to solve vision problems from a theoretical perspective.\n- Lab sessions to develop practical skills. The coursework will be structured as a series of small non-assessed practice sessions, which will build up the skills for the assessed mini-project at the end of the course.\n\nThe tentative syllabus is: \n- Foundations of Computer Vision \n- Image Formation\n- Image Processing \n- Classic Vision \n- Deep Learning \n- Generative Models \n- Geometry and 3D \n- Video Understanding \n- Vision and Language \n- Ethics \n- Learning with Limited Data",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Image and Vision Computing (INFR11140) OR\nAdvanced Vision (Level 11) (INFR11031)"
        ],
        "other_requirements": "",
        "learning_outcomes": "Define and explain principles underpinning computer vision methods\nDescribe current vision problem settings and their current solutions\nImplement, train and debug computer vision models\nDesign, explain, analyse, and compare the behaviour of computer vision models under different settings\nIdentify social and ethical implications of computer vision methods in the real world"
    },
    {
        "course_code": "INFR11278",
        "course_title": "Computer Vision (UG)",
        "course_summary": "This course follows the delivery and assessment of Computer Vision (INFR11212) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11212 instead.",
        "course_desc": "This course follows the delivery and assessment of Computer Vision (INFR11212) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11212 instead.",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Define and explain principles underpinning computer vision methods\nDescribe current vision problem settings and their current solutions\nImplement, train and debug computer vision models\nDesign, explain, analyse, and compare the behaviour of computer vision models under different settings\nIdentify social and ethical implications of computer vision methods in the real world"
    },
    {
        "course_code": "INFR11115",
        "course_title": "Credits Awarded for Autonomous Systems Research [Heriot Watt University]",
        "course_summary": "This is a placeholder course, designed to record marks for the courses delivered by Heriot Watt University as part of the Robotics and Autonomous Systems MRes course. The course mark is that achieved for the Autonomous Systems Research course taken at Heriot Watt University in accordance with the DPT of this MRes course.",
        "course_desc": "Not entered",
        "course_credits": 30,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": ""
    },
    {
        "course_code": "INFR11116",
        "course_title": "Credits Awarded for Taught Courses [Heriot Watt University] 1",
        "course_summary": "This is a placeholder course, designed to record marks for the Heriot Watt University part of the Robotics and Autonomous Systems MRes course. The mark is that achieved for any 15 point taught course taken at Heriot Watt University taken in accordance with the DPT of this MRes course.",
        "course_desc": "Not entered",
        "course_credits": 15,
        "semester": "Flexible",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": ""
    },
    {
        "course_code": "INFR11117",
        "course_title": "Credits Awarded for Taught Courses [Heriot Watt University] 2",
        "course_summary": "This is a placeholder course, designed to record marks for the Heriot Watt University part of the Robotics and Autonomous Systems MRes course. The mark is that achieved for any 15 point  taught course taken at Heriot Watt University taken in accordance with the DPT of this MRes course.",
        "course_desc": "Not entered",
        "course_credits": 15,
        "semester": "Flexible",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": ""
    },
    {
        "course_code": "INFR11007",
        "course_title": "Data Mining and Exploration",
        "course_summary": "The aim of this course is to discuss modern techniques for analysing, interpreting, visualizing and exploiting the data that is captured in scientific and commercial environments. The course will develop the ideas taught in various machine learning courses and discuss the issues in applying them to real-world data sets, as well as teaching about other techniques and data-visualization methods. The course will also feature case-study presentations and each student will undertake a mini-project on a real-world dataset.",
        "course_desc": "The course will consist of two parts, the first part being a series of lectures on what is outlined below. It is anticipated that there will also be one or two guest lectures from data mining practitioners.\n\nThe second part will consist of student presentations of papers relating to relevant topics. Students will also carry out a practical mini-project on a real-world dataset. For both paper presentations and mini-projects, lists of suggestions will be available, but students may also propose their own, subject to approval from the instructor.\n\n* Introduction, overview\n* Data preprocessing and cleaning, dealing with missing data\n* Data visualization, exploratory data analysis\n* Data mining techniques\n* Predictive modelling techniques (e.g. SVMs)\n* Performance evaluation (e.g. ROC curves)\n* Issues relating to large data sets\n* Application areas, e.g. text mining, collaborative filtering, retrieval-by-content, web mining, bioinformatics data, astronomy data \n\nRelevant QAA Computing Curriculum Sections:  Artificial Intelligence",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "describe the data mining/analysis process in overview, and demonstrate assessment of the challenges of a given data mining project\ndescribe methods used for exploratory data analysis, predictive modelling and performance evaluation\ncritically evaluate papers presented in the second part of the course\ndemonstrate the ability to conduct experimental investigations and draw valid conclusions from them\ndemonstrate use of data mining packages/computational environments in the mini-project phase"
    },
    {
        "course_code": "INFR11190",
        "course_title": "Data Visualisation",
        "course_summary": "Only available to Informatics MSc students on the Data Science or Design Informatics MSc programmes.\n\nThis course teaches how to visually explore data and how to criticise, design and implement data visualisations. It teaches the fundamentals of human perception and data visualisation, exploratory data analysis and the importance of interaction in exploration, techniques for data visualisation of specific data sets (networks, temporal data, geographic data, etc..), and storytelling. Group work (50%) includes exploring data using existing visualisation tools, designing and creating visualisation prototypes for exploration or presentation. Individual work (50%) includes criticising data visualisations.\n\nProgramming knowledge and experience with JavaScript will very helpful but are not required. The course is open only to students from the following programs: Data Science and Design Informatics.",
        "course_desc": "Only available to Informatics MSc students on the Data Science or Design Informatics MSc programmes.\n\nThis course teaches general knowledge about theory, application, design, and evaluation of visualisations. The goal of the course is to enable students to understand the potential of visualisations and how interactive visualisation interfaces can support the workflow of data analysis.\n\nThe course will enable students to describe a visualisation problem, to explore the data using visualisations, to discuss and design appropriate visualisation concepts, and to implement and critically reflect on them. The course is designed for an interdisciplinary audience, targeting students with a background in design, informatics, and other areas. General programming skills are not required but some relevant JavaScript library (D3.js, https://d3js.org) are provided during the first weeks of the course. Besides interactive visualisations, students can opt to create static visualisations (infographics, data comics, posters, etc), data physicalisations, or any other form discussed in the course.\n\nDuring most of the course, students will work in groups of two to three students using real-world datasets they find themselves or which are provided. Groups will go through all the stages of the exploration and visualisation design process, in alignment with the above listed learning outcomes; explore data and make initial findings, critique the tools and list shortcomings and possible future features, create custom visualisation designs for exploration or presentation, present the visualisations. For a final presentation, each group is expected to present a comprehensive visualisation design project, insights gained, and critical reflections. \n\nThe course aims for 11 lectures, each targeting a set of principles in data visualisations, and organized as shown below. Lectures will be held as a flipped classroom where lectures require listening to a previously recorded lecture, or reading a book chapter or representative (easy to understand) scientific paper. \n\nLecture topics:\n1.\tFoundations of data visualisation: Perception, visual variables, exploratory data analysis, explanatory visualisation, scenarios, tools.\n2.\tVisualisation Techniques: visualisations for statistical data, hierarchies and networks, temporal data, geographical data, multivariate data, etc.\n3.\tAdvanced topics: data-driven storytelling, interaction techniques, and evaluation techniques.\n4.\tGuest lectures (to be decided upon availability): data physicalisation, visual analytics, geo-visualisation, visualisation in immersive environments, HCI for visualisation, etc.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "identify and describe a visualisation challenge in terms of context, stakeholders, data, and tasks\ndesign and implement a visualisation through one of various media (website, physicalization, infographic, etc.) and through a self-chosen set of tools. Visualization designs are meant to match an earlier identified challenge\ncritically reflect on a visualisation design and suggest constructive solutions"
    },
    {
        "course_code": "INFR11198",
        "course_title": "Data-driven Business and Behaviour Analytics",
        "course_summary": "The course is an interdisciplinary introduction to the emerging field of quantitative behavioural analytics. Students will learn how to model human behaviour from data, by using a combination of mathematical and computational techniques. By combining theory and practice, this course will provide students with the necessary knowledge and skills to be able to independently draw insight from human-centred data in a broad range of contexts. Examples will be mainly drawn from finance and business, but could also include other areas such as healthcare and epidemiology.",
        "course_desc": "The course will be delivered through a combination of lectures and tutorials; students will be expected to complete both pencil-and-paper and programming-based exercises on their own time as well as during tutorials. Students will complete two projects to assess their practical and writing skills, and also sit an exam. \n\nThe topics in the course will be covered in two interconnected sections, with indicative topics listed below: \n\n1) Social Networks \n* Introduction to network science \n* Different types of social networks \n* Metrics and communities \n* Tools for network analysis \n* Financial networks\n\n2) Agent-based modelling \n* Rational and biased agents \n* Modelling decision making with agents \n* Calibration and validation of agent-based models \n* Case studies in business, finance, and economics\n\nStudents will develop their critical thinking and problem-solving skills during tutorials. Some tutorials will involve pencil-and-paper exercises where students solve increasingly difficult problems (presented in a way similar to that of the exam) on network science, and mathematical modelling of human behaviour. In others, students will work on real-world datasets and will be guided through the whole process of modelling human behaviour from a practical point of view, applying the notions learned during classes. The skills here acquired will be then assessed during the courseworks, which will be similar to what covered in the tutorials.",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "critically analyse and explain human behaviour based on empirical observations\napply a range of mathematical and computational modelling techniques to human-related data and decide which one is the most appropriate for a specific task\nmodel and simulate realistic social systems with independent or interacting individuals\ndiscuss the legal and ethical implications of working with human-related data\npresent (written / oral) highly interdisciplinary work in an understandable and comprehensive manner to people with different backgrounds"
    },
    {
        "course_code": "INFR11022",
        "course_title": "Distributed Systems (Level 11)",
        "course_summary": "A distributed system is broadly categorised as a collection or network of loosely coupled, autonomous computers that can communicate with each other and execute logically separate computations, though these may be related to concurrent computations on other nodes.\n\n* The nodes are relatively loosely coupled.\n* Each node is a self-contained autonomous computer with its own peripherals.\n* The system can survive various categories of node and network failures.\n* The nodes may execute logically separate computations, though these may be related to concurrent computations on other nodes.\n* The system may be modeled as synchronous or asynchronous.\n\nDistributed systems have become pervasive-many applications now require the cooperation of two or more computers-yet the design and implementation of such systems remain challenging and complex tasks. Difficulties arise from the concurrency of components, the lack of a global clock and the possibility of independent failure of components. Moreover designs must aim to provide inter-operability, transparency and autonomy.\n\nThe emphasis of this module is on gaining understanding of the principles and concepts that are used to design distributed systems and how network and communication facilities can be leveraged to achieve efficient distributed computing.",
        "course_desc": "1. Introduction and overview - Need for distributed systems (Failures, consistency, delay, etc.)\n2. Architecture & Communication - Scalability, Load balancing, Partitioning, RPC\n3. Fault Tolerance - Failure models, Reliability, Recovery\n4. Coordination - Ordering & Causality, Distributed transactions, Concurrency Control, Consensus/Agreement\n5. Consistency & Replication - Epidemic algorithms, Consistency Models, Replica management\n6. Distributed Storage - File systems, Large Scale systems\n7. Issues - Energy/Power, Security, Local OS Support, Verification, Testing",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Develop an understanding of the principles of distributed system and be able to demonstrate  this by explaining them\nBeing able to give an account of the trade-offs which must be made when designing a  distributed system, and make such trade-offs in their own designs\nDevelop practical skills of implementation of distributed algorithms in software so that they  will be able to take an algorithm description and realise it in software\nBeing able to give an account of the models used to design distributed systems  and to manipulate those models to reason about such systems\nBeing able to design efficient algorithms for distributed computing tasks"
    },
    {
        "course_code": "INFR11194",
        "course_title": "Doing Research in Natural Language Processing",
        "course_summary": "This course introduces critical skills needed to do research in natural language processing: identifying research questions; proposing methods to answer research questions; and communicating results orally and in writing to a scientific audience. The course emphasizes that NLP research draws on computational, mathematical, and linguistic perspectives to research, and exposes students to the key research skills from each of these perspectives.",
        "course_desc": "This course introduces critical skills needed to do research in natural language processing: identifying research questions; proposing methods to answer research questions; and communicating results orally and in writing to a scientific audience. The course emphasizes that NLP research draws on computational, mathematical, and linguistic perspectives to research, and exposes students to the key research skills from each of these perspectives.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Informatics Project Proposal (INFR11147) OR\nInformatics Research Review (INFR11136)"
        ],
        "other_requirements": "",
        "learning_outcomes": "Critically read, assess, and synthesize scientific literature in natural language  p rocessing and related fields.\nIdentify new research questions in natural language processing and propose  experimental, mathematical, or engineering methods to answer them.\nCommunicate research results in natural language processing orally to a scient ific  audience.\nCommunicate research results in natural language processing in writing to a scientific  audience."
    },
    {
        "course_code": "INFR11088",
        "course_title": "Extreme Computing",
        "course_summary": "Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, data processing, machine learning, data streaming).",
        "course_desc": "The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows:\n\n* Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling and performance.\n\n* Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services.\n\n* Data structures and algorithms: decentralised data structures; programming frameworks; design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams.\n\nThe course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problems",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "demonstrate knowledge of the need for extreme computing by providing motivating examples of the scale of problems only computing at an extreme scale can solve (e.g., problems motivated by the use of large datasets and complex computation)\ndemonstrate knowledge of the problems associated with computing at an extreme scale, such as the need for multi-tier systems and programming models\ndemonstrate knowledge of the infrastructure necessary for computing at an extreme scale through enumerating different file system designs, virtualisation techniques, replication, fault-tolerance paradigms, and alternative system designs\ndemonstrate knowledge of data structures that can be used to efficiently process large datasets; and cluster-based algorithms for data processing, machine learning, and low latency processing through the use of distributed programming paradigms\ndemonstrate knowledge of large-scale distributed deep learning systems for the purposes of solving machine learning problems of extreme scale"
    },
    {
        "course_code": "INFR11283",
        "course_title": "Financial Networks",
        "course_summary": "What if you could predict how a financial crisis unfolds before it even begins? In this course, you will  dive into the networks that shape the financial world, discovering how connections between institutions, markets, and people drive it. Rather than focusing on individual entities, you will explore the web of relationships influencing everything from financial contagions to the rise and fall of cryptocurrencies, and spending behaviour. Through practical examples, you will build a toolkit for analysing complex financial systems. Whether you are interested in banking, digital finance, or economic policy, this course offers fresh insights into finance.",
        "course_desc": "Financial Networks will be delivered through a combination of lectures and hands-on group tutorials. Students will be expected to complete both pen-and-pencil and programming-based exercises in their own time as well as during tutorials.\n\nTopics covered in this course will broadly cover these three topics:\n\n1) Network analytics\n\u00c2\u00bf Introduction to network science\n\u00c2\u00bf Different types of financial networks\n\u00c2\u00bf Network metrics and communities\n\u00c2\u00bf Programming tools for network analysis \n\n2) Network visualisation\n\u00c2\u00bf Complexity reduction through visualisation\n\u00c2\u00bf Reading financial networks\n\u00c2\u00bf Tools to visualise financial networks\n\n3) Applications*: \n\u00c2\u00bf Banking\n\u00c2\u00bf Transactions\n\u00c2\u00bf Cryptocurrencies and digital finance\n\u00c2\u00bf Risk contagion and economic policy\n\u00c2\u00bf Investing\n\n*Applications and datasets might change every year to reflect the current financial landscape. This list includes example topics that could be covered.\n\nDuring tutorials, students will learn how to use the most popular Python packages to analyse and visualise financial networks. They will also work in groups to discuss the financial and economic implications of their results, equipping them with a practical skillset which can be immediately transferred to industry. These tutorials also prepare students for the coursework, in which students will be assigned a real-world dataset and will be asked to analyse it to provide practical and actionable insights, mimicking a work environment.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Critically analyse and explain complex financial systems based on empirical observations.\nSelect and justify appropriate network analytics techniques for specific financial network tasks.\nImplement network analytics methods to uncover insights into financial behaviours and dynamics.\nEvaluate how network structures influence financial performance and risk, interpreting the implications for various financial scenarios.\nPresent highly interdisciplinary work in an understandable and comprehensive manner to people with different backgrounds."
    },
    {
        "course_code": "INFR11129",
        "course_title": "Formal Verification",
        "course_summary": "Formal verification is the use of mathematical techniques to verify the correctness of various kinds of engineering systems: software systems and digital hardware systems, for example. Formal verification techniques are exhaustive and provide much stronger guarantees of correctness than testing or simulation-based approaches. They are particularly useful for safety and security critical systems and for when system behaviour is highly complex. The course focuses on automated techniques that are currently used in industry. It gives practical exposure to current formal verification tools, explaining the input languages used and introducing the underlying mathematical techniques and algorithms used for automation.",
        "course_desc": "In recent years there have been highly noteworthy cases of the adoption of formal verification (FV) techniques in industry. For example, at Intel, FV has largely replaced simulation-based verification of their microprocessors, at Microsoft, FV is used to certify that 3rd party drivers are free of certain kinds of concurrency bugs. As FV tools and methodologies improve, FV is expected to become more and more widely used in industry. \n\nThis course aims to familiarise students with main classes of FV techniques that are likely to become most widespread in industry in the coming years. The intent is to prepare students who might go into industry with sufficient background in FV that they would be aware of when and how they might deploy FV techniques. The course will also be of interest to students who wish to go into research developing techniques for future-generation FV tools and who might need to use FV in their research. To satisfy these aims, the course has a practical focus, giving students hands-on experience with a number of tools and explaining their input languages for specifying systems and desired system properties. The course also introduces the underlying mathematical techniques, which gives students a deeper understanding of the tools and will help them use the tools most effectively. \n\nTopics the course covers include the following: \n*Formal verification in context, its current take-up in industry and challenges to its wider \nadoption \n*Syntax and semantics of CTL and LTL temporal logics \n*CTL and LTL model checking techniques, including automata-based approaches and \nbounded model checking with SAT solvers \n*The BDD data-structure used at the heart of many model checkers \n*Writing models for model checking and phrasing useful properties in CTL and LTL \n*Operational semantics of a simple imperative programming language, weakest precondition \noperators and verification condition generation \n*The capabilities of SMT solvers for discharging verification conditions \n*Assertion-based software verification \n\nOptional topics include: \n*Industrial temporal logics such as PSL and SVA used in hardware verification \n*Formal verification case studies \n*Formal verification of hybrid systems, system with both discrete state changes and \ncontinuous state changes governed by differential equations \n*Combining formal and simulation-based verification methods \n*Dual use of temporal logic properties and assertions in formal and simulation-based \nverification of hardware and software  \n*Software model checking, focusing on its use for finding concurrency bugs \n*Pattern-based detection of concurrency bugs",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "deploy bounded and unbounded model checking techniques to formally verify temporal logic properties of digital hardware and other finite state systems and protocols\nuse an assertion-based software formal-verification tool to verify desired properties of computer programs\ndescribe the basic mechanics of SAT/SMT solvers and explain how they can be applied to discharge verification queries\nassess the pros and cons of using different automated formal verification approaches on a previously-unseen hardware or software system"
    },
    {
        "course_code": "INFR11262",
        "course_title": "Foundational Biomedical Artificial Intelligence Research",
        "course_summary": "This course introduces key skills and knowledge to incorporate machine learning approaches in biomedical informatics research. The course includes practical training in Python and the statistical programming language R, an exposition of the major sources of biological and biomedical data used in biomedical informatics research, and a series of invited guest lectures highlighting achievements, challenges, and opportunities for research at the interface between computing science and biomedicine. The course also includes masterclasses on practical skills including the use of GitHub, high performance compute clusters, trusted research environments, and from CDT teaching leads in health, artificial intelligence, biomedical science, responsible research & innovation, and entrepreneurship.",
        "course_desc": "This course introduces key skills and knowledge to incorporate machine learning approaches in biomedical informatics research. The course includes practical training in Python and the statistical programming language R, an exposition of the major sources of biological and biomedical data used in biomedical informatics research, and a series of invited guest lectures highlighting achievements, challenges, and opportunities for research at the interface between computing science and biomedicine. The course also includes masterclasses on practical skills including the use of GitHub, high performance compute clusters, trusted research environments, and from CDT teaching leads in health, artificial intelligence, biomedical science, responsible research & innovation, and entrepreneurship.",
        "course_credits": 30,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": [
            "Programming for Biomedical Informatics (INFR11260)       \nTopics in Biomedical Informatics (INFR11263)"
        ],
        "other_requirements": "",
        "learning_outcomes": "Programme in Python and R using common data handling and analysis approaches and software environments designed for use with biological and biomedical data such as Biopython and R/Bioconductor.\nDevelop software using an IDE and work both individually and in teams with versioning systems following open research practices.\nDesign and run computational experiments using the EIDF cluster compute environment.\nIdentify and synthesise clear background knowledge from the literature for topics relevant to biomedical innovation research especially those involving artificial intelligence approaches.\nCritically discuss the broader societal and ethical implications of AI research in the biomedical field."
    },
    {
        "course_code": "INFR11200",
        "course_title": "Foundations of Databases",
        "course_summary": "This course replaced Advanced Topics in Foundations of Databases (INFR11122) from 2019-20.\n\nData is everywhere, coming in different shapes and volumes, and needs to be stored and managed using appropriate data management technologies. The basic software package that supports the management of data is called a database management system (DBMS). The main goal of this course is to explain some of the underlying theoretical principles and characteristics of DBMSs. More precisely, this course will explain how real-life concepts (such as a database and a query) and phenomena (such as incompleteness and inconsistency of data), can be abstracted from their physical implementation and mathematically formalised using tools coming from other areas such as computational logic. This will pave the way towards the study of query evaluation, that is, the central task of extracting meaningful information from (possibly incomplete and inconsistent) data by means of queries, following a mathematically rigorous approach. This analysis will expose the source of complexity in evaluating a query over a database, which in turn provides ideas and tools on how to devise more efficient query evaluation algorithms.",
        "course_desc": "The course will cover the following topics:\n- Relational model: data model, relational algebra, relational calculus (first-order queries), first-order query evaluation, static analysis of first-order queries (satisfiability and containment).\n\n- Conjunctive queries (CQs): syntax and semantics (via the notion of homomorphism), CQ evaluation, static analysis of CQs (satisfiability, containment and the Homomorphism Theorem), minimisation of CQs.\n\n- Fast conjunctive query evaluation: acyclic CQs, evaluating acyclic CQs (Yannakaki's algorithm), semantically acyclic CQs and their evaluation, size bounds for joins (AGM bound), worst-case optimal join algorithms.\n\n- Adding recursion - Datalog: inexpressibility of recursive queries, syntax and semantics of Datalog, Datalog query evaluation, static analysis of Datalog queries, Datalog vs. first-order queries. \n\n- Uncertainty - reasoning over possible worlds: incomplete databases, inconsistent databases, probabilistic databases, knowledge-enriched databases.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Foundations of Databases (UG) (INFR11250)"
        ],
        "other_requirements": "",
        "learning_outcomes": "abstract relational data and relational queries from their physical implementation, and formalise them in a rigorous way\nanalyse the complexity of querying relational data, and isolate the source of complexity\nexplain the semantics of Datalog queries, analyse the complexity of evaluating Datalog queries, and model real-life queries in a declarative way\nformalise uncertain data, analyse the complexity of querying uncertain data, and explain the reasons that lead to intractability\nread and summarise research papers"
    },
    {
        "course_code": "INFR11250",
        "course_title": "Foundations of Databases (UG)",
        "course_summary": "This course follows the delivery and assessment of Foundations of Databases (INFR11200) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11200 instead.",
        "course_desc": "This course follows the delivery and assessment of Foundations of Databases (INFR11200) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11200 instead.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Foundations of Databases (INFR11200)"
        ],
        "other_requirements": "",
        "learning_outcomes": "abstract relational data and relational queries from their physical implementation, and formalise them in a rigorous way\nanalyse the complexity of querying relational data, and isolate the source of complexity\nexplain the semantics of Datalog queries, analyse the complexity of evaluating Datalog queries, and model real-life queries in a declarative way\nformalise uncertain data, analyse the complexity of querying uncertain data, and explain the reasons that lead to intractability\nread and summarise research papers"
    },
    {
        "course_code": "INFR11193",
        "course_title": "Group Project in Advanced Natural Language Processing",
        "course_summary": "This course requires students to undertake a significant group project in natural language processing, with the advice of a member of staff.  The project requires the application of skills learned through other courses and requires the development and synthesis of new skills, including problem-solving, communication, and teamwork skills.",
        "course_desc": "This course requires students to undertake a significant piece of individual, self-directed research in natural language processing, developed in consultation with a member of staff.  The project requires the application of skills learned through other courses and requires the development and synthesis of new skills, including:\n\n* The ability to coordinate the work of a team with diverse intellectual background.\n\n* The ability to design and carry out experiments, implement systems, or prove mathematical results needed to answer NLP research questions.\n\n* The ability to communicate novel scientific results orally and in writing.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "coordinate with a team of diverse experts to answer a research question in natural language processing\nplan and monitor a coordinated effort to meet milestones and deadlines within a limited timescale\ncommunicate novel research results in natural language processing to a  scientific audience orally and in writing"
    },
    {
        "course_code": "INFR11203",
        "course_title": "Group Research Project (Biomedical AI)",
        "course_summary": "In this course you will undertake a group research project in Biomedical Artificial Intelligence under the supervision of a member of staff and/or small supervisory team of staff with experience in Machine Learning & Biomedicine. The project will draw on the new skills and knowledge that you have acquired through other courses and will especially develop your skills and experience in working in an inter-disciplinary research group tackling a common challenge in biomedicine using a range of methodologies.",
        "course_desc": "In this course we aim to develop your skills in working in inter-disciplinary research teams in which you will have to communicate and work effectively with people from a diverse range of backgrounds. You will learn how to manage your time and partition tasks to allow the group to progress efficiently through the project. Many teamwork elements are involved in working on a joint research project and form an essential part of your training as inter-disciplinary scientists, but the opportunity to share knowledge and skills with peers is of key importance. The project(s) themselves will be proposed by supervisors within the CDT pool of expertise and also external partners who often bring unique datasets and sectorial experience to projects. All project proposals are assessed and approved by the CDT management prior to being presented to students by the supervisory team in a dedicated showcase session.\n\nThroughout the project(s) there will be a focus on developing good scientific practice, including reproducible research methods and incorporating appropriate consideration of any ethical and societal aspects that may be involved. In the final dissertation students will need to demonstrate the ability to accurately present their research in a comprehensive and well-structured document meeting the specifications detailed on the course website.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "coordinate with a team of diverse experts to answer a research question in biomedical artificial intelligence\nplan and monitor a coordinated effort to meet milestones and deadlines within a limited timescale\ncommunicate novel research results in biomedicine and AI to an interdisciplinary scientific audience orally and in writing"
    },
    {
        "course_code": "INFR11017",
        "course_title": "Human-Computer Interaction (Level 11)",
        "course_summary": "The design and implementation of efficient, effective and user friendly computer systems, including software objects and physical internet-enabled things, depends upon understanding both the technology and its users. Only then can designers be confident that these information appliances will be properly matched to the skills, knowledge and needs of their users. The study of Human-Computer Interaction (HCI) seeks to combine perspectives and methods of enquiry drawn from disciplines such as Interaction Design, Psychology and Sociology with the tools, techniques and technologies of Computer Science to create an approach to design which is both relevant and practical.",
        "course_desc": "* Background -- the development and scope of HCI. Practical goals. \n* HCI relevant issues in human perception, memory and thinking processes. \n* Approaches to designing information appliances -- software objects and physical things. \n* Design methodologies and notations -- levels of interface design, evaluation methodologies. \n* Techniques and technologies -- dialogue styles, information presentation. \n* The design process -- user involvement, iterative design, prototyping.  \n* Evaluation -- methodologies, formative and summative. Performance analysis. \n* Specific issues in HCI -- for example: internet of things, novel interfaces, accessibility, and privacy. \n\nRelevant QAA Computing Curriculum Sections: Human-Computer Interaction (HCI), Information Systems, Systems Analysis and Design.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "demonstrate, in writing, knowledge of the issues and problems in HCI , and an  understanding of human perception and behaviour in analysing their interactions with  technology in their every day lives\nuse established design principles and methodologies to solve HCI problems\nacquire confidence in handling different disciplinary perspectives on HCI and the ability to  apply them to design problems\nhave the ability to devise, plan and execute task analysis and system evaluation studies from an  HCI perspective, and present findings in a clear and effective manner\ndemonstrate awareness of current areas of research by locating and summarising examples  of recent progress"
    },
    {
        "course_code": "INFR11140",
        "course_title": "Image and Vision Computing",
        "course_summary": "In this course we will learn how images are formed given the objects in the three dimensional world, and the basics of how computer vision inverts this process - computing properties of the world from digital images. We will cover topics including basic image formation, image processing, detection, matching and recognition that allow computers to understand the world based on image content.",
        "course_desc": "The course proceeds in five parts from foundational concepts such as image formation, through to low-level image processing operations, before building upon those to develop image representations, and use those representations for higher-level tasks such as recognition and detection. The following four parts are roughly two weeks each.\n\nImage formation. The basic mathematics and physics of how images are formed based on light reflected by real-world objects. Includes ideal pinhole camera and lens models. Some basic 3D geometry, radiometry and photometry.\n\nLow-level image analysis. We will introduce basic algorithms such as convolution and filtering for image processing, and RANSAC for fitting. These will be applied for tasks such as edge detection, and line-fitting. To provide a taste of recognition students will perform shape recognition using Bayes theorem.\n\nImage Representations: To support working with more unconstrained realistic images, we next introduce feature representations for both local and global features including colour histograms, HOG/SIFT, and descriptor bag of words.\n\nHigh-level image analysis: Building upon these image representations, we discuss the topical tasks of object recognition and sliding window-based object detection.\n\nApplications: Finally, we finish up with an introduction to some applications including basic video processing (optical flow), and foreground detection.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Introduction to Vision and Robotics (INFR09019)",
            "Image and Vision Computing (INFD11004)",
            "Image and Vision Computing (UG) (INFR11251)"
        ],
        "other_requirements": "",
        "learning_outcomes": "explain the basic physics and mathematical principles of image formation\nunderstand basic image processing operations such as convolution\nwrite programs to solve basic image analysis tasks such as edge detection and line fitting\nunderstand the concepts of local and global image descriptors, and descriptor matching\nwrite programs to perform image analysis tasks of recognition and detection"
    },
    {
        "course_code": "INFR11251",
        "course_title": "Image and Vision Computing (UG)",
        "course_summary": "This course follows the delivery and assessment of Image and Vision Computing (INFR11140) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11140 instead.",
        "course_desc": "This course follows the delivery and assessment of Image and Vision Computing (INFR11140) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11140 instead.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Image and Vision Computing (INFR11140)",
            "Introduction to Vision and Robotics (INFR09019)",
            "Image and Vision Computing (INFD11004)"
        ],
        "other_requirements": "",
        "learning_outcomes": "explain the basic physics and mathematical principles of image formation\nunderstand basic image processing operations such as convolution\nwrite programs to solve basic image analysis tasks such as edge detection and line fitting\nunderstand the concepts of local and global image descriptors, and descriptor matching\nwrite programs to perform image analysis tasks of recognition and detection"
    },
    {
        "course_code": "INFR11257",
        "course_title": "Individual Exploratory Project",
        "course_summary": "This course requires students to undertake a significant piece of self-directed, exploratory research in responsible and trustworthy natural language processing, developed in consultation with a member of staff. The project requires the application of skills learned through other courses and requires the development and synthesis of new skills, including problem-solving and communication skills.",
        "course_desc": "This course requires students to undertake a significant piece of self-directed exploratory research in responsible and trustworthy natural language processing, developed in consultation with, and supervised by a member of staff. The project requires the application of skills learned through other courses and as well as the development and synthesis of new skills, including: \n\n* The ability to identify new research questions in responsible and trustworthy NLP based on a review of the literature. \n\n* The ability to design, carry out, and analyse experiments to answer research questions in responsible and trustworthy NLP. \n\n* The ability to communicate novel scientific results orally and in writing.  \n\nThe course will mainly consist of practical work, but there will be a weekly individual meetings with the project supervisors. In these meetings, the student will report on progress and also raise any issues or questions.",
        "course_credits": 60,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Identify a specific research question in responsible and trustworthy natural language processing and propose engineering or design methods to answer it.\nCarry out and precisely document methods to answer research questions in responsible and trustworthy natural language processing.\nCommunicate novel research results to a scientific audience orally and in writing."
    },
    {
        "course_code": "INFR11192",
        "course_title": "Individual Project in Advanced Natural Language Processing",
        "course_summary": "This course requires students to undertake a significant piece of individual, self-directed research in natural language processing, developed in consultation with a member of staff.  The project requires the application of skills learned through other courses and requires the development and synthesis of new skills, including problem-solving and communication skills.",
        "course_desc": "This course requires students to undertake a significant piece of individual, self-directed research in natural language processing, developed in consultation with a member of staff.  The project requires the application of skills learned through other courses and requires the development and synthesis of new skills, including:\n\n* The ability to identify new research questions in NLP based on a review of the literature.\n\n* The ability to design and carry out experiments, implement systems, or prove mathematical results needed to answer NLP research questions.\n\n* The ability to communicate novel scientific results orally and in writing.",
        "course_credits": 40,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Individual Project in Advanced Natural Language Processing (80 credits) (INFR11204)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify a specific research question in natural language processing and propose experimental, mathematical, or engineering methods to answer it\ncarry out and precisely document methods to answer research questions in natural language processing\ncommunicate novel research results in natural language processing to a scientific audience orally and in writing"
    },
    {
        "course_code": "INFR11204",
        "course_title": "Individual Project in Advanced Natural Language Processing (80 credits)",
        "course_summary": "This course requires students to undertake a significant piece of individual, self-directed research in natural language processing, developed in consultation with a member of staff. The project requires the application of skills learned through other courses and requires the development and synthesis of new skills, including problem-solving and communication skills.",
        "course_desc": "This course requires students to undertake a significant piece of individual, self-directed research in natural language processing, developed in consultation with a member of staff. The project requires the application of skills learned through other courses and requires the development and synthesis of new skills, including:\n\n* The ability to identify new research questions in NLP based on a review of the literature.\n\n* The ability to design and carry out experiments, implement systems, or prove mathematical results needed to answer NLP research questions.\n\n* The ability to communicate novel scientific results orally and in writing.",
        "course_credits": 80,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Individual Project in Advanced Natural Language Processing (INFR11192)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify a specific research question in natural language processing and propose experimental, mathematical, or engineering methods to answer it\ncarry out and precisely document methods to answer research questions in natural language processing\ncommunicate novel research results in natural language processing to a scientific audience orally and in writing"
    },
    {
        "course_code": "INFR11197",
        "course_title": "Individual Research Project (Biomedical AI)",
        "course_summary": "The course is the main MSc project for the proposed MSc (Res) in Biomedical Artificial Intelligence. It will offer students the opportunity to gain in-depth experience of research in an interdisciplinary environment, with joint supervision from an AI and a biomedical specialist.",
        "course_desc": "The course is an individual research project where the students will work independently on an application of Artificial Intelligence to a biomedical problem. All projects will have joint supervision from an AI and a biomedical expert, enabling the student to work in an interdisciplinary environment and be embedded within the application. A particular feature of this course will be its attention to the societal and ethical aspects of the proposed research, which will form part of the assessment for the responsible innovation course.",
        "course_credits": 80,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "independently identify and apply appropriate AI algorithms to specific biomedical problems.\ncommunicate effectively, both in writing and orally, technical AI concepts to an interdisciplinary audience of biomedical scientists.\ndiscuss critically the broader societal and ethical implications of AI research in the biomedical field and in the specialised area of the project."
    },
    {
        "course_code": "INFR11147",
        "course_title": "Informatics Project Proposal",
        "course_summary": "The aim of this course is to develop generic research and/or practical skills that can be deployed in academic or commercial environments. Students will demonstrate their ability to develop interesting concepts and/or hypotheses into proposals appropriate for a larger research- or implementation-based project and demonstrate their ability to identify legal, social, ethical and professional issues.",
        "course_desc": "Structure and delivery of this course will vary according to the nature of the project, and will be agreed between student and supervisor at the start of the semester. Representative activities might include literature review, data preparation, preliminary implementation, or establishing connections and gathering requirements from stakeholders. The student will then produce a project proposal that explains the hypotheses and/or goals, project management, and milestones with approximate times with some justification for these decisions. Key methodologies should be introduced.\n\nThis 10 credit course replaces Informatics Research Proposal (Level 11) (INFR11137) and Informatics Research Proposal (Level 11) (INFR11071) - 20 credit course.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "critically evaluate research literature or other prior work appropriate for their project subject\nuse existing research literature or other prior work to justify choices in experimental design, theoretical goals, and/or implementation\ndevelop a structured project proposal\noutline project/research management issues and potential legal, social, ethical or professional issues"
    },
    {
        "course_code": "INFR11136",
        "course_title": "Informatics Research Review",
        "course_summary": "This course provides students with the opportunity to explore an area of interest in more depth than allowed in a standard taught course. For MSc students this is expected to take the form of reviews of the literature in topics related to their specialism.\n\n***This 10 credit course replaces Informatics Research Review (Level 11) (INFR11034) - 20 credit course.***",
        "course_desc": "Students and tutors will be matched up based on interests/specialisms at the start of semester 1. Students will be given examples of good reviews, guidance on literature reviewing, literature searching and citation methods. In addition they may be directed towards research seminars in relevant topics. The student should then explore the general area over the semester in consultation with their tutor. It is expected that each student will submit two minor reviews that critically evaluate a single research paper or seminar presentation during the first half of the semester. During the latter half of the semester, students will produce a substantial review of a research area.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "select literature appropriate for the review subject , and critically evaluate research literature in the chosen area\nsearch and use appropriately databases of scientific literature\nevaluate and search traditional library resources\ndiscuss a research topic in detail leading to new hypotheses\ndeliver a detailed and balanced report on a research topic"
    },
    {
        "course_code": "INFR11274",
        "course_title": "Inter-Disciplinary Biomedical Artificial Intelligence Research",
        "course_summary": "In this course you will undertake two group research projects in Artificial Intelligence for Biomedical Innovation that have been co-designed between the CDT and external partners. The projects will be supervised by a small supervisory team of staff with experience in Machine Learning & Biomedicine from within the CDT management team and external partners. The projects will draw on the new skills and knowledge that you have acquired through other courses and will especially develop your skills and experience in working in an inter-disciplinary research group tackling a common challenge in biomedicine using a range of methodologies.",
        "course_desc": "In this course we aim to develop your skills in working in inter-disciplinary research teams in which you will have to communicate and work effectively with people from a diverse range of backgrounds. You will learn how to manage your time and partition tasks to allow the group to progress efficiently through the projects. Many teamwork elements are involved in working on a joint research project and form an essential part of your training as inter-disciplinary scientists, but the opportunity to share knowledge and skills with peers is of key importance. The projects themselves will be proposed by supervisors within the CDT pool of expertise and external partners who often bring unique datasets and sectorial experience to projects. Throughout the projects there will be a focus on developing good scientific practice, including reproducible research methods, and incorporating appropriate consideration of any ethical and societal aspects that may be involved. Students will need to demonstrate the ability to accurately present their research in comprehensive and well-structured jointly prepared research reports.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Coordinate with a team of diverse experts to answer a research question in artificial intelligence for biomedical innovation.\nPlan and monitor a coordinated effort to meet milestones and deadlines within a limited timescale.\nCommunicate novel research results in biomedicine and AI to an interdisciplinary scientific audience  orally and in writing.\nIdentify and synthesise clear background knowledge of the literature surrounding the broader and  specific area of the project.\nDiscuss critically the broader societal and ethical implications of the project research in the  biomedical field and in the specialised area of the project."
    },
    {
        "course_code": "INFR11146",
        "course_title": "Internet of Things Systems, Security, and the Cloud (IoTSSC)",
        "course_summary": "IoTSSC will teach students fundamentals concepts of Internet of Things (IoT) systems, wireless communication paradigms employed in IoT, security and privacy issues, and cloud integration. The course will involve a major coursework that will require students to design, build, and evaluate a practical IoT system. Students will be required to demonstrate their prototypes and present orally their projects at the end of the course, and document their designs and results in a workshop style research paper.",
        "course_desc": "The course will cover IoT systems architecture, hardware platforms, relevant wireless technologies and networking protocols, security and privacy concepts, device programming and debugging, cloud integration, simple data analytics, and commercialisation challenges. The students should expect to be able to apply the taught concepts in the development of an IoT prototype.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "acquire good understanding of the Internet of Things concept and systems architecture;\noperate with wireless technologies and networking protocols specific to IoT systems;\nbecome familiar with standard security and privacy preserving mechanisms, and understand different cloud integration methods;\ndesign, implement/emulate, and test a simple IoT system that may interface with peripherals;\nwrite technical documentation of a research project and results obtained by means of experiments in a workshop style paper format."
    },
    {
        "course_code": "INFR11131",
        "course_title": "Introduction to Modern Cryptography",
        "course_summary": "Cryptography is the formal study of the notion of security in information systems. The course will offer an introduction to modern cryptography focusing on models and proofs of security for various basic cryptographic primitives and protocols. Cryptographic proofs are conditional on assumptions that fall in two categories: \"system assumptions\" such as the faithful execution of code, or the availability of private randomness and \"computational assumptions\". The latter are related to the computational complexity of various problems (including factoring large numbers and others). Students will learn to model security problems and prove them secure under precisely formulated system and computational assumptions.",
        "course_desc": "The course is divided in two parts: Private Key and Public Key. \n\nTopics covered in the Private Key part are: classical ciphers (Caesar, Vigenere), one-time pad and perfect secrecy, computational secrecy, pseudorandom functions and permutations, CPA security, CCA security and proofs by reduction. The following topics are also briefly discussed: block ciphers, modes of operation, message integrity, hash functions and MACs. \n\nIn the Public Key part we cover: hard computational problems such as factoring and discrete log, the Diffie-Hellman key exchange protocol, ElGamal and digital signatures. Other topics that may also be discussed (depending on time) are: zero-knowledge proofs, Schnorr Identification, commitment schemes and oblivious transfer protocols. A tentative outline of the material is given below.\n\nPart 1: Private Key\n\n- Classical ciphers: Shift cipher, Vigenere\n- Perfect secrecy\n- One-time pad (OTP)\n- Computational secrecy\n- Pseudorandom generators (PRG)\n- Pseudo-OTP\n- Security against chosen-plaintext attacks (CPA)\n- Pseudorandom functions / permutations (PRF / PRP)\n- CPA-secure encryption using PRF/PRP: block ciphers\n- Modes of operation: block ciphers, stream ciphers\n- Malleability\n- Security against chosen-ciphertext attacks (CCA)\n- Padding-oracle attacks: non-CCA secure schemes\n- Secrecy vs. integrity: message authentication codes (MAC)\n- Hash functions\n\nPart 2: Public Key\n\n- Digital Signatures\n- Trapdoor One-Way functions\n- Random oracles\n- Cyclic groups\n- The discrete logarithm/Diffie-Hellman assumptions\n- Key exchange and the Diffie-Hellman protocol\n- Public Key Encryption\n- Security against chosen-plaintext attacks\n- ElGamal Encryption\n- Zero-Knowledge proofs\n- The Schnorr identification scheme",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Introduction to Modern Cryptography (UG) (INFR11221)"
        ],
        "other_requirements": "",
        "learning_outcomes": "apply basic number theory, group theory and discrete probability to analyse cryptographic algorithms\nunderstand the notions of pseudorandom functions/generators and their connection with encryption schemes\ndevelop the ability to model security problems and to write security proofs\nunderstand fundamental cryptographic primitives including Key Exchange, Digital Signatures, Oblivious Transfer, Public-Key Encryption, Commitment, and critique or prove the security of candidate cryptographic schemes that are supposed to realize the above primitives\nunderstand basic computational problems that are important for cryptography such as the factoring problem, the RSA problem, the discrete-logarithm problem, and develop the ability to reduce the security of cryptographic schemes to computational problems"
    },
    {
        "course_code": "INFR11221",
        "course_title": "Introduction to Modern Cryptography (UG)",
        "course_summary": "This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead.",
        "course_desc": "This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Introduction to Modern Cryptography (INFR11131)"
        ],
        "other_requirements": "",
        "learning_outcomes": "apply basic number theory, group theory and discrete probability to analyse cryptographic algorithms\nunderstand the notions of pseudorandom functions/generators and their connection with encryption schemes\ndevelop the ability to model security problems and to write security proofs\nunderstand fundamental cryptographic primitives including Key Exchange, Digital Signatures, Oblivious Transfer, Public-Key Encryption, Commitment, and critique or prove the security of candidate cryptographic schemes that are supposed to realize the above primitives\nunderstand basic computational problems that are important for cryptography such as the factoring problem, the RSA problem, the discrete-logarithm problem, and develop the ability to reduce the security of cryptographic schemes to computational problems"
    },
    {
        "course_code": "INFR11189",
        "course_title": "Introduction to Practical Programming with Objects",
        "course_summary": "This course is intended for students who have no prior experience of object-oriented programming. It does assume knowledge of basic programming concepts, but provides an introduction to object-oriented design and the Java programming language. Students with no programming experience will find this course challenging, but should be able to complete it if prepared to invest additional time in self-guided study of the required basics.",
        "course_desc": "This course uses a flipped classroom model to provide a flexible learning environment. It follows a range of online materials and a recommended textbook that students explore at their own pace. Making the most of these resources requires students to manage their own schedule and locate materials appropriate to their level of experience. An online discussion board is used for asynchronous, guided learning and peer support. The only timetabled events are weekly live sessions, which are used flexibly for lectures, Q&A sessions and discussion of the assignments. Assessment is 100% coursework and based on two assignments.\n\nThe course covers the following topics:\n- Introduction to the Java programming language\n- Object-oriented design (classes, objects, inheritance, responsibility)\n- Code readability and documentation\n- The use of external libraries\n- Graphical user interfaces\n- Introduction to version control",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Informatics 1 - Object-Oriented Programming (INFR08014)       \nIntroduction to Practical Programming with Objects (INFD11001)"
        ],
        "other_requirements": "",
        "learning_outcomes": "design and implement a complete, realistic Java application to a given specification\nutilise an object-oriented approach to produce a well-structured, modular and maintainable design which is evaluated and justified by comparison with plausible alternatives\nproduce code which is clear, readable and adequately documented\nlocate and utilise supporting resources, including 3rd party library code, documentation, and online materials to support development and debugging\nutilise appropriate development tools to support development, debugging and documentation"
    },
    {
        "course_code": "INFR11099",
        "course_title": "Introduction to Quantum Computing",
        "course_summary": "REPLACED BY  INFR11256 (24/25)\nThe aim of this course is to give students a basic overview of the rapidly growing field of Quantum Computation (QC). The course will start with a brief introduction of the mathematical framework of QC. The two models of quantum circuit and measurement-based quantum computing will be introduced. We cover the most important quantum subroutines and their application to well-known quantum algorithms and compare their performance with respect to classical computing. We finish the course by surveying few more advanced topics, such as quantum error correction, algorithms for near-term architectures and secure delegated QC.",
        "course_desc": "- Basic concepts from Linear Algebra necessary for understanding the axioms of Quantum Mechanics, \n- Axioms of Quantum Mechanics, describing quantum system, quantum operators, composition, entanglement and measurements \n- Quantum Computing via quantum circuit model: Description of qubit and universal set of gates. \n- The first quantum protocols: Quantum teleportation and super dense coding \n- Quantum subroutines such as Phase Kick-back, Quantum Fourier Transform or Phase-Estimation \n- Quantum Algorithms such as Grover's Search, Deutsch-Jozsa, Bernstein-Vazirani or Shor. \n- Quantum Computing via measurement-based model: Description of graph state and measurement calculus \n- Advanced Topics: quantum error correction, algorithm for near-term architectures, unconditionally secure quantum cloud computing",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "use the mathematical framework of quantum computation to predict outcomes of quantum circuits\nexplain and analyse quantum algorithms described in quantum circuit and measurement-based quantum computing models\ndiscuss the difference of performance between classical and quantum computer for different computational tasks\nmaster notions of more advanced topics, such as error correction on algorithms for near-term architectures\ncritically read and understand scientific literature on quantum computing"
    },
    {
        "course_code": "INFR11256",
        "course_title": "Introduction to Quantum Computing",
        "course_summary": "The aim of this course is to give students a basic overview of the rapidly growing field of Quantum Computation (QC). The course will start with a brief introduction of the mathematical framework of QC. The two models of quantum circuit and measurement-based quantum computing will be introduced. We cover the most important quantum subroutines and their application to well\u0002known quantum algorithms and compare their performance with respect to classical computing.  Additionally, we survey existing quantum programming platforms. We finish the course by surveying few more advanced topics, such as quantum error correction, algorithms for near-term architectures, quantum machine learning and secure delegated QC.",
        "course_desc": "- Basic concepts from Linear Algebra necessary for understanding the axioms of Quantum Mechanics.\n- Axioms of Quantum Mechanics, describing quantum system, quantum operators, composition, entanglement and measurements.\n- Quantum Computing via quantum circuit model: Description of qubit and universal set of gates. \n- Quantum subroutines such as Phase Kick-back, Quantum Fourier Transform, Hadamard Test or Phase-Estimation. \n- Quantum Algorithms such as Grover's Search, Deutsch-Jozsa, Bernstein-Vazirani or Shor. \n- Quantum Computing via measurement-based model: Description of graph state and measurement calculus.\n- Quantum Programming: online platforms and languages.\n- Advanced Topics: quantum error correction, algorithm for near-term architectures, quantum machine learning, unconditionally secure quantum cloud computing.",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Use the mathematical framework of quantum computation to predict outcomes of quantum circuits.\nExplain and analyse quantum subroutines and algorithms described in quantum circuit and  measurement-based quantum computing models.\nDiscuss the difference of performance between classical and quantum computer for different  computational tasks.\nMaster notions of more advanced topics, such as error correction on algorithms for near-term  architectures.\nUse available quantum programming platforms."
    },
    {
        "course_code": "INFR11222",
        "course_title": "Introduction to Quantum Computing (UG)",
        "course_summary": "This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead.",
        "course_desc": "This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Introduction to Quantum Computing (INFR11099)"
        ],
        "other_requirements": "",
        "learning_outcomes": "Use the mathematical framework of quantum computation to predict outcomes of quantum circuits\nExplain and analyse quantum algorithms described in quantum circuit and measurement-based quantum computing models\nDiscuss the difference of performance between classical and quantum computer for different computational tasks\nMaster notions of more advanced topics, such as error correction on algorithms for near-term architectures\nCritically read and understand scientific literature on quantum computing"
    },
    {
        "course_code": "INFR11242",
        "course_title": "Introduction to Quantum Programming and Semantics",
        "course_summary": "This course replaces Categories and Quantum Informatics (INFR11128) from 2023-2024.\n\nThere are several languages for programming quantum protocols. Each has its own strengths and weaknesses. This course surveys current platforms (OpenQAsm, Qiskit, Q#, Quipper, Quantomatic, and PyZX) and analyses their respective features semantically. The theoretical analysis uses category theory, a powerful mathematical tool in logic and informatics, that has influenced the design of many modern programming languages. It enables a powerful graphical calculus that lets you draw pictures instead of writing algebraic expressions. This technique is visually extremely insightful, yet completely rigorous. For example, correctness of protocols often comes down to whether a picture is connected or disconnected, whether there is information flow from one end to another. In a practical way, this course investigates the conceptual reasons why quantum protocols and quantum computing work, rather than their algorithmic and complexity-theoretic aspects.",
        "course_desc": "The course has two parallel tracks: a practical one, and a theoretical one. The practical track surveys different quantum programming platforms. These include OpenQAsm, Qiskit, Q#, Quipper, Quantomatic, and PyZX. We discuss their basic structure, strengths, and weaknesses. Via labs and live coding in lectures, students get hands-on experience of implementing small quantum programs. The emphasis is on the primitive programming constructs and structure of each language, not on large-scale quantum software development.\n\nSimultaneously, the theoretical track analyses the features of each language in denotational semantics, focusing on monoidal categories. Via lectures and self-study reading, the course teaches students the basics of dual objects in monoidal categories. Specific attention is paid to the graphical calculus, which makes the topic visually apparent. Via exercise sheets, and their review incorporated into the contact hours, the student learns to graphically manipulate algebraic objects such as monoids and Frobenius structures. They will understand that this still allows perfectly rigorous proofs of correctness, and be able to see the information flow of a protocol that is often hidden behind superfluous details.\n\nThroughout the course, the practical and theoretical material is linked. We will study notions typically thought to belong to quantum theory, such as entanglement, no-cloning, teleportation, and complementarity. It will turn out some of these notions also make perfect sense in other settings. For example, the very same categorical description of quantum teleportation also describes classical encryption with a one-time pad. We identify characteristics of classical and quantum information, aiming to equip students to choose the right tools and techniques for future problems they may encounter.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Introduction to Quantum Programming and Semantics (UG) (INFR11243) OR\nCategories and Quantum Informatics (UG) (INFR11232) OR\nCategories and Quantum Informatics (INFR11128)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify features of current quantum programming platforms\nmodel quantum protocols categorically and prove their correctness graphically\napply and prove basic results about monoidal categories\nfluently manipulate the graphical calculus for compact categories\ndifferentiate between categories modelling classical and quantum informatics"
    },
    {
        "course_code": "INFR11243",
        "course_title": "Introduction to Quantum Programming and Semantics (UG)",
        "course_summary": "This course follows the delivery and assessment of Introduction to Quantum Programming and Semantics (INFR11242) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11242 instead.",
        "course_desc": "This course follows the delivery and assessment of Introduction to Quantum Programming and Semantics (INFR11242) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11242 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Introduction to Quantum Programming and Semantics (INFR11242)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify features of current quantum programming platforms\nmodel quantum protocols categorically and prove their correctness graphically\napply and prove basic results about monoidal categories\nfluently manipulate the graphical calculus for compact categories\ndifferentiate between categories modelling classical and quantum informatics"
    },
    {
        "course_code": "INFR11205",
        "course_title": "Introductory Applied Machine Learning (Semester 2)",
        "course_summary": "Organisations seek to make better decisions by examining their data with an aim to discovering and/or drawing conclusions about the information contained within. This course is about the principled application of machine learning techniques to extracting information from data. The main area that will be discussed is supervised learning, which is concerned with learning to predict an output, given inputs. A second area of study is unsupervised learning, where we wish to discover the structure in a set of patterns, i.e. there is no output \"teacher signal\". The primary aim is to provide the student with a set of practical tools that can be applied to solve real - world problems in machine learning, coupled with an appropriate, principled approach to formulating a solution.",
        "course_desc": "This course is delivered using \"flipped-classroom\" methods. Intellectual content will be delivered via a combination of online short video segments (overall, per topic, approximately the same length as a traditional lecture). Some of the topics have online quizzes associated with them, intended for you to review your understanding. During most of the lecture slots we will have other activities to review the topic material, also available by online recording.\n\nWe expect to cover the following general areas:\n\n1. Review of maths and probability\n2. Feature engineering (e.g., basis transforms, selection , Principal Components Analysis)\n3. Classification vs. Regression\n4. Supervised methods (e.g., Naive Bayes, Decision Trees and Random Forests, Linear & Logistic Regression, Support Vector Machines, Nearest Neighbours, Neural Networks)\n5. Unsupervised clustering methods (e.g., k-Means, Gaussian Mixture Models, Hierarchical Clustering)\n\nWe will use a modern machine learning programming environment and industry-standard libraries.",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Introductory Applied Machine Learning (INFR10069) OR\nIntroductory Applied Machine Learning (INFD11005) OR\nMachine Learning and Pattern Recognition (INFR11130) OR\nApplied Machine Learning (INFR11211) OR\nIntroductory Applied Machine Learning (INFR11182)"
        ],
        "other_requirements": "",
        "learning_outcomes": "explain the scope, goals and limits of machine learning, and the main sub-areas of the field\ndescribe the various techniques covered in the syllabus and where they fit within the structure of the discipline\ncritically compare, contrast and evaluate the different ML techniques in terms of their applicability to different Machine Learning problems\ngiven a data set and problem, use appropriate software to apply these techniques to the data set to solve the problem\ngiven appropriate data, use a systematic approach to conducting experimental investigations and assessing scientific hypotheses"
    },
    {
        "course_code": "INFR11195",
        "course_title": "Issues in Clinical Data Modelling",
        "course_summary": "This course provides students on the UKRI CDT in Biomedical Artificial Intelligence with the opportunity to learn the challenges of clinical data modelling directly through guest lectures by leading clinicians who collect and analyse complex biomedical datasets.",
        "course_desc": "The course is a primer in clinical data modelling, informing students upon the challenges involved in a variety of clinical contexts and in depth understanding of the data collection aspects in one particular area. \n\nUpon completion of the course, the students will have acquired:\n- The ability to critically assess and discuss the challenges associated with clinical data modelling across a variety of contexts and diseases;\n- Familiarity with the data analysis techniques currently being employed in clinical research.\n- A broad understanding of the scale and complexity of datasets across a range of subject domains.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "critically assess the challenges associated with clinical data modelling across a variety of contexts and diseases, in particular with respect to noise in the data, patient stratification and regulatory and ethical issues;\npresent and discuss the data acquisition protocols in one area of biomedicine to an interdisciplinary audience."
    },
    {
        "course_code": "INFR11215",
        "course_title": "Knowledge Graphs",
        "course_summary": "Recent advances in AI have changed the perception of what AI systems can do, from decision sup-port to answering questions. An underlying feature of many AI systems concerns how knowledge is acquired, represented, and reasoned with. Today, knowledge graphs are used extensively by most of the world's leading IT companies, from search engines (e.g., the content of the Google knowledge panel is a tiny fragment of Google's knowledge graph) and chatbots to product recommenders and many applications of AI and data science. This course provides the theory and practice of knowledge graph construction, reasoning, and question answering technologies. The students will analyse case studies to construct knowledge graphs and apply reasoning services on them.",
        "course_desc": "In this course, we will cover topics such as:\nKnowledge graph foundation and standards\n - RDF (Resource Description Framework)\n - OWL (Web Ontology Language)\n - SPARQL (Query Language for RDF and OWL)\nKnowledge graph construction, embeddings, and completion\nKnowledge graph reasoning and querying\n - Tableaux algorithm\n - Tractable schema reasoning in EL\n - Tractable query answering in DL-Lite\n - Semantic parsing \n\nThe students will be expected to prepare for the lectures by reading related textbook chapters and papers. In addition to lectures, there will be some tutorials, helping students to better understand some concepts and theories.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "construct and query over knowledge graphs by applying relevant knowledge graph standards such as RDF, OWL and SPARQL\ncomplete knowledge graphs by applying and evaluating pros and cons of knowledge graph embeddings-based techniques\nreason with knowledge graphs by applying and evaluating pros and cons of description logic reasoning algorithms\nquery over knowledge graphs by applying semantics parsing and query answering the techniques"
    },
    {
        "course_code": "INFR11093",
        "course_title": "MInf Project (Part 2)",
        "course_summary": "This is the second half of a major project that runs over the fourth and fifth years. It is intended to allow students to demonstrate their ability to organise and carry out a substantial piece of work. The project involves both the application of skills learnt in the past and the acquisition of new skills. \n\nTypical areas of activity will be:\n- gathering and understanding background information;\n-  solving conceptual problems;\n- design; implementation;\n- experimentation and evaluation;\n- writing up.\n\nThe project is conducted individually by the student under the supervision of a member of teaching staff. The project specification is usually provided by a member of staff, but students are also free to specify their own project. All project specifications must be approved by the Project Coordinator.\nThe project will normally involve the construction of an artefact, whether software, hardware, a robotic device, some other artefact incorporating computation, or some combination of these.\nThis second half continues from MInf Project (Part 1) starting with work identified in the Conclusion section of the report for MInf Project (Part 1). It is expected that work here will go into greater depth, the work carried out is not necessarily limited to that which was identified in MInf Project (Part 1).",
        "course_desc": "Project dependent",
        "course_credits": 40,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "structure and summarise a body of knowledge relating to a substantial project topic in Informatics\ncritically evaluate previous work in the area\nconduct a programme of work in further investigation of issues related to the topic, and discuss and solve conceptual problems which arise during the investigation\njustify design decisions made during the investigation, and critically evaluate the investigation\npresent work orally and visually, with demonstration of working artefacts where appropriate"
    },
    {
        "course_code": "INFR11275",
        "course_title": "ML Systems Internship Research and Engagement Report",
        "course_summary": "Students will do an (approximately) 4 month internship with a company, or equivalent. Students will write up their experience of the internship in terms of the difference in emphasis between the needs and requirements of a general company environment, and the needs and requirements of a University research environment. They will consider their work on the PhD so far an elaborate on how it can be developed for broader impact, company interest and where starting with a demand-driven and market-driven perspective would lead.",
        "course_desc": "Students will do an (approximately) 4 month internship with a company, or alternative form of engagement with external partners, bodies or stakeholders. This course will involve a reflection and write up their experience of the internship in relation to the PhD study. The work will be a supervised self-study and reflection. Due to typical confidentiality arrangements, there is no expectation of a technical reflection on the content of the internship. Rather, it will be a reflection on the experience of the internship and the impact of that on research engagement.\n\nThe report will cover:\n- Reflections on the difference in emphasis between the needs and requirements of a general company environment, and the needs and requirements of a University research environment\n- Reflection on the downstream effects of these differences on the progress of work, the longer term impact, the dissemination and communication of the work etc.\n- Reflection on the research work so far during the PhD, and company interest in that work can be enhanced,  and where starting with a demand-driven and market-driven perspective would lead.\n- Reflection on how to increase the impact of the PhD research so far, and the best approach to driving commercial and/or social use of the work in practical settings.",
        "course_credits": 30,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "An ability to delineate the needs and requirement of research and corporate/other environments.\nAn ability to reflect on research in the context of its broader impact.\nClarity about what demands there are from stakeholders in the area of the PhD."
    },
    {
        "course_code": "INFR11077",
        "course_title": "MSc Dissertation (Informatics)",
        "course_summary": "This is a major piece of full-time independent work which occupies the final months of the MSc course. It is intended to allow students to demonstrate their ability to organise and carry out a substantial investigation into a problem in Informatics, according to sound scientific and engineering principles. The project involves both the application of skills learnt in the past and the acquisition of new skills.\n\nThe types of activity involved in each project will vary but will include most of the following:\n\n    * Researching the literature and gathering background information.\n    * Analysing requirements, comparing alternatives and specifying a solution.\n    * Analysing and extending relevant theory in novel ways.\n    * Designing and implementing the solution.\n    * Experimenting with and evaluating the solution.\n    * Discussing existing results and presenting new research.\n    * Developing written and oral presentation skills.\n\nThe project is conducted individually by the student under the supervision of a member of teaching staff. Students are formed into groups for the purpose of a Review Meeting.",
        "course_desc": "Project dependent",
        "course_credits": 60,
        "semester": "Block 5 (Sem 2) and beyond",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "structure, summarise and critically evaluate a body of knowledge relating to a substantial project topic in Informatics\nconduct a programme of work in further investigation of issues related to the topic\ndiscuss and solve conceptual problems which arise during the investigation\ncritically evaluate the investigation, including design choices made\npresent their work orally and visually, with demonstration of working artefacts where appropriate"
    },
    {
        "course_code": "INFR11132",
        "course_title": "Machine Learning Practical",
        "course_summary": "This course is focused on the implementation and evaluation of machine learning systems, and is lab-based. Students who do this course will obtain experience in the design, implementation, training, and evaluation of machine learning systems.\n\nSemester 1 comprises lectures, labs, and individual coursework.\n\nSemester 2 is based around small group projects, and also includes tutorials and guest lectures.\n\nNote: this course is not a stand-alone introduction to machine learning. Please see 'Other Requirements' for details.",
        "course_desc": "The course covers practical aspects of machine learning, and will focus on practical and experimental issues in deep learning and neural networks. Topics that are covered include:\n\n* Feed-forward network architectures\n* Optimisation and learning rules \n* Regularisation and normalisation\n* Neural networks for classification\n* Autoencoders\n* Convolutional Neural Networks\n* Recurrent Neural Networks\n\nMLP is coursework-based, with lectures to support the additional material required to carry out the practical. Students who complete this course will have experience in the design, implementation, training, and evaluation of machine learning systems.\n\nMLP is a two-semester course.  During Semester 1 the course will focus on developing a deep learning framework based on experiments using the task of classification of handwritten digits using the well-known MNIST dataset. The course uses a Python software framework, and a series of Jupyter notebooks. There is a series of ten weekly lectures in Semester 1 to provide the required theoretical support to the practical work.\n\nSemester 2 will be based on small group projects, with a focus on using deep neural networks within the context of a miniproject, using an open source toolkit such as TensorFlow or PyTorch. Lectures in Semester 2 will support the coursework, and also provide insights to the current state of the art in this very fast moving area.",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": [
            "Machine Learning Practical (UG) (INFR11223)"
        ],
        "other_requirements": "",
        "learning_outcomes": "obtain experience in the design, implementation, training, and evaluation of machine learning systems.\nread technical papers, and explain their relevance to the chosen approach\ndesign and carry out appropriate experiments, and explain the methodology involved\nevaluate the resultant system\nwrite a scholarly report, suitably structured and with supporting evidence"
    },
    {
        "course_code": "INFR11223",
        "course_title": "Machine Learning Practical (UG)",
        "course_summary": "This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead.",
        "course_desc": "This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead.",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": [
            "Machine Learning Practical (INFR11132)"
        ],
        "other_requirements": "",
        "learning_outcomes": "oObtain experience in the design, implementation, training, and evaluation of machine learning systems\nread technical papers, and explain their relevance to the chosen approach\ndesign and carry out appropriate experiments, and explain the methodology involved\nevaluate the resultant system\nwrite a scholarly report, suitably structured and with supporting evidence"
    },
    {
        "course_code": "INFR11269",
        "course_title": "Machine Learning Systems",
        "course_summary": "The course on 'Machine Learning Systems' introduces the design of such systems and highlights their application in the hands-on experience of large-scale AI infrastructure. Students will acquire the skills necessary to analyse and implement (i) systems that retrieve large-scale data and (ii) systems that train and deploy large-scale machine learning models.",
        "course_desc": "The core learning objective of this course is to equip students with the skills needed for analysing and implementing systems for data retrieval, and subsequently for the training and deployment of ML models. The course will be delivered through a combination of (1) live lectures, (2) guest lectures, (3) feedback lectures, and (4) an online discussion forum such as Piazza.\n\nThe course content may slightly vary from year to year but will include many of the following topics:\n\nSystems for data retrieval:\n-\tClassify and model different types of data (e.g., key-values, graphs, tensors).\n-\tConstruct queries to extract data from given datasets (e.g., key-value queries, graph queries, tensor similarity queries).\n-\tAnalyse query results and assess the quality of results.\n-\tAnalyse the performance of the query and employ techniques to enhance query performance.\n\nSystems for training models:\n-\tUnderstand the ML system architectures (e.g., PyTorch).\n-\tUnderstand the ML chip architectures (e.g., GPU architecture, AI chips).\n-\tUnderstand methods for profiling and accelerating ML systems (e.g., NVProfiler).\n-\tUnderstand approaches for designing distributed ML systems (e.g., DeepSpeed).\n-\tUnderstand the approaches for managing resources in ML training clusters (e.g., GPU training clusters).\n\nSystems for deploying models:\n-\tUnderstand the methods for deploying ML models (e.g., model checkpoints).\n-\tUnderstand the methods for accelerating the inference of ML models (e.g. model compression, quantization).\n-\tUnderstand the approaches for managing resources in ML inference clusters (e.g., serverless inference).\n-\tUnderstand potential safety and privacy issues with ML deployment (e.g., trusted hardware, federated learning).",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Machine Learning Systems (UG) (INFR11280)"
        ],
        "other_requirements": "",
        "learning_outcomes": "Understand different types of data, queries, workflows, and architectures of machine learning  systems. Demonstrate the appropriate choice and use of particular data structures, and architectures.\nConstruct, analyse and profile implementation to given machine learning systems and iteratively improve the performance of those systems.\nCompare and evaluate different systems and suggest/synthesise an appropriate system adoption solution.\nPresent the system solutions and engage in professional dialogue with peers to improve their solutions.\nReflect on the wider quality and security issues of data and machine learning models when discussing with specialist practitioners."
    },
    {
        "course_code": "INFR11280",
        "course_title": "Machine Learning Systems (UG)",
        "course_summary": "The course on 'Machine Learning Systems' introduces the design of such systems and highlights their application in the hands-on experience of large-scale AI infrastructure. Students will acquire the skills necessary to analyse and implement (i) systems that retrieve large-scale data and (ii) systems that train and deploy large-scale machine learning models.",
        "course_desc": "The core learning objective of this course is to equip students with the skills needed for analysing and implementing systems for data retrieval, and subsequently for the training and deployment of ML models. The course will be delivered through a combination of (1) live lectures, (2) guest lectures, (3) feedback lectures, and (4) an online discussion forum such as Piazza.\n\nThe course content may slightly vary from year to year but will include many of the following topics:\n\nSystems for data retrieval:\n- Classify and model different types of data (e.g., key-values, graphs, tensors).\n- Construct queries to extract data from given datasets (e.g., key-value queries, graph queries, tensor similarity queries).\n- Analyse query results and assess the quality of results.\n- Analyse the performance of the query and employ techniques to enhance query performance.\n\nSystems for training models:\n- Understand the ML system architectures (e.g., PyTorch).\n- Understand the ML chip architectures (e.g., GPU architecture, AI chips).\n- Understand methods for profiling and accelerating ML systems (e.g., NVProfiler).\n- Understand approaches for designing distributed ML systems (e.g., DeepSpeed).\n- Understand the approaches for managing resources in ML training clusters (e.g., GPU training clusters).\n\nSystems for deploying models:\n- Understand the methods for deploying ML models (e.g., model checkpoints).\n- Understand the methods for accelerating the inference of ML models (e.g. model compression, quantization).\n- Understand the approaches for managing resources in ML inference clusters (e.g., serverless inference).\n- Understand potential safety and privacy issues with ML deployment (e.g., trusted hardware, federated learning).",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Machine Learning Systems (INFR11269)"
        ],
        "other_requirements": "",
        "learning_outcomes": "Understand different types of data, queries, workflows, and architectures of machine learning systems. Demonstrate the appropriate choice and use of particular data structures, and architectures.\nConstruct, analyse and profile implementation to given machine learning systems and iteratively improve the performance of those systems.\nCompare and evaluate different systems and suggest/synthesise an appropriate system adoption solution.\nPresent the system solutions and engage in professional dialogue with peers to improve their solutions.\nReflect on the wider quality and security issues of data and machine learning models when discussing with specialist practitioners."
    },
    {
        "course_code": "INFR11271",
        "course_title": "Machine Learning Systems Project (100 credits)",
        "course_summary": "This course provides a project write up for an individual project in Machine Learning Systems of 100 credits for students on the EPSRC CDT in Machine Learning Systems.",
        "course_desc": "This project is an individually write up of a personal (but likely collaborative) research project, and a proposal of work going forward. The focus of the assessment of this project is not particularly the research itself, but the rigour, methodology, clarity and scholarly way in which that project was tackled, and the identification of future directions. Students will undertake a research project, and provide a written report on that, and on future directions according to provided guidance. This will form part of the assessment of progression for CDT PhD students. This differs from the 60 point and 80 point projects in that it includes comment on the collaborative project information and proposals on management of collaboration.",
        "course_credits": 100,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "The capability of providing clear background knowledge of the literature surrounding the broader and specific area off study, that identifies the current research boundaries, and what problems are of interest.\nThe ability to design a research programme in a justified way, engage in systematic, organised  scholarly work according to a plan, and be able to provide meaningful conclusions to that work, and put in the work required to make progress in that programme (whether the outcome is successful or not).\nThe ability to write research papers and monographs in a scholarly, clear, precise and unambiguous way that communicates well with both specialist and less-specialist readers.\nA concrete plan for future research that would provide a significant improvement to the current state-of-affairs and be considered an excellent contribution. The student should demonstrate the ability to distinguish between valuable and less valuable ideas, and time-cost research with a reasonable level of adequacy. The student should demonstrate a point, and a clear direction and focus for future work.\nPractical rigour (in experiments) and theoretical rigour (in explanation and/or modelling/analysis), and collaboration and interaction structure \u00c2\u00bf how collaboration will enhance the project and what structure the collaboration will take, and how that collaboration should be managed."
    },
    {
        "course_code": "INFR11270",
        "course_title": "Machine Learning Systems Project (60 credits)",
        "course_summary": "This course provides a project write up for an individual project in Machine Learning Systems of 60 credits for students on the EPSRC CDT in Machine Learning Systems.",
        "course_desc": "This project is an individually write up of a personal (but likely collaborative) research project, and a proposal of work going forward. The focus of the assessment of this project is not particularly the research itself, but the rigour, methodology, clarity and scholarly way in which that project was tackled. and the identification of future directions. Students will undertake a research project, and provide a written report on that, and on future directions according to provided guidance. This will form part of the assessment of progression for CDT PhD students.",
        "course_credits": 60,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "The capability of providing clear background knowledge of the literature surrounding the broader and specific area off study, that identifies the current research boundaries, and what problems are of interest.\nThe ability to design a research programme in a justified way, engage in systematic, organised  scholarly work according to a plan, and be able to provide meaningful conclusions to that work, and put in the work required to make progress in that programme (whether the outcome is successful or not).\nThe ability to write research papers and monographs in a scholarly, clear, precise and unambiguous way that communicates well with both specialist and less-specialist readers.\na concrete plan for future research that would provide a significant improvement to the current  state-of affairs and be considered an excellent contribution. The student should demonstrate the ability to distinguish between valuable and less valuable ideas, and time-cost research with a reasonable level of adequacy. The student should demonstrate a point, and a clear direction and focus for future work.\nBoth practical rigour (in experiments) and theoretical rigour (in explanation and/or  modelling/analysis)."
    },
    {
        "course_code": "INFR11272",
        "course_title": "Machine Learning Systems Project (80 credits)",
        "course_summary": "This course provides a project write up for an individual project in Machine Learning Systems of 80 credits for students on the EPSRC CDT in Machine Learning Systems.",
        "course_desc": "This project is an individually write up of a personal (but likely collaborative) research project, and a proposal of work going forward. The focus of the assessment of this project is not particularly the \nresearch itself, but the rigour, methodology, clarity and scholarly way in which that project was tackled. and the identification of future directions. Students will undertake a research project, and \nprovide a written report on that, and on future directions according to provided guidance. This will form part of the assessment of progression for CDT PhD students.\n\nThis course differs from the 60-credit course in having an assessment of how the potential benefits of collaboration, and how it benefits others across the ML-systems stack.",
        "course_credits": 80,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "The capability of providing clear background knowledge of the literature surrounding the broader  and specific area off study, that identifies the current research boundaries, and what problems are  of interest.\nThe ability to design a research programme in a justified way, engage in systematic, organised  scholarly work according to a plan, and be able to provide meaningful conclusions to that work, and  put in the work required to make progress in that programme (whether the outcome is successful or  not).\nThe ability to write research papers and monographs in a scholarly, clear, precise and unambiguous way that communicates well with both specialist and less-specialist readers.\nA concrete plan for future research that would provide a significant improvement to the current  state-of affairs and be considered an excellent contribution. The student should demonstrate the ability to distinguish between valuable and less valuable ideas, and time-cost research with a reasonable level of adequacy. The student should demonstrate a point, and a clear direction and focus for future work.\nBoth practical rigour (in experiments) and theoretical rigour (in explanation and/or modelling/analysis), and an understanding of potential benefits of collaboration, and how it benefits others across the ML-systems stack."
    },
    {
        "course_code": "INFR11202",
        "course_title": "Machine Learning Theory",
        "course_summary": "This course is an introduction to the theory of learning algorithms and their properties that are relevant to the widespread use of machine learning. The course starts with the standard mathematical concepts in theoretical ML. It then covers classical analytic results about accuracy, confidence, sample complexity and model complexity. Standard learning/optimisation algorithms are described in this context. In modern research areas such as trustworthy machine learning, several properties including privacy, fairness and interpretability are considered vital for widespread reliable use of machine learning. These topics are discussed in a mathematical perspective.\n\nThe course aims to provide a firm foundation in reading and understanding mathematical ideas so that students are equipped to follow the latest developments and research, and to interpret relevant properties and trade-offs. Throughout, the course will take the approach of precise mathematical definition and analysis, coupled with easy examples and intuition to aid understanding.",
        "course_desc": "The following is an indicative list of topics in the course:\n\n\t1. Notations, terminology and formal models.\n\t2. Learning theory: Empirical risk minimisation and sampling complexity. Probably approximately correct (PAC) guarantees.\n\t3. Complexity of learning models (e.g. VC dimension) and bias-complexity tradeoff.\n\t4. Optimization algorithms. Regression, SVM, Stochastic gradient descent and its variants.\n\t5. Regularization, convexity, stability, Lipschitzness and other properties\n\t6. Statistical Privacy\n\t7. Mechanisms for privacy preserving machine learning. Differentially private stochastic gradient descent.\n\t8. Interpretable machine learning. (E.g. Feature importance)\n\t9. Fairness.\n\nThe topics will be discussed with reference to standard machine learning techniques, and examples of realistic problems. Our approach will include precise definitions and analysis as well as examples and intuitive explanations. The relevance and domain of applicability of the various concepts will be discussed.\n\nTutorials and problem sets will be available to help understanding and exploration of the subject.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Machine Learning Theory (UG) (INFR11224)"
        ],
        "other_requirements": "",
        "learning_outcomes": "interpret and explain rigorous statements about properties of machine learning methods\nevaluate properties of learning models through proofs and examples\ntelate, compare, and contrast the implications of various qualities of machine learning models covered in the course\nformulate precise mathematical requirements corresponding to desired properties in real learning problems, and explain their decisions"
    },
    {
        "course_code": "INFR11224",
        "course_title": "Machine Learning Theory (UG)",
        "course_summary": "This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead.",
        "course_desc": "This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Machine Learning Theory (INFR11202)"
        ],
        "other_requirements": "",
        "learning_outcomes": "interpret and explain rigorous statements about properties of machine learning methods\nevaluate properties of learning models through proofs and examples\nrelate, compare, and contrast the implications of various qualities of machine learning models covered in the course\nformulate precise mathematical requirements corresponding to desired properties in real learning problems, and explain their decisions"
    },
    {
        "course_code": "INFR11130",
        "course_title": "Machine Learning and Pattern Recognition",
        "course_summary": "Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods.\n\nThis is an advanced course. Students should not choose this class without the required background (see \"Other Requirements\" box); students without this background are strongly advised to take a more practical-based course, such as Applied Machine Learning (INFR11211).",
        "course_desc": "The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.\n\n- Classification and Regression:\n                  Linear Regression, logistic regression, Bayes classifiers\n- Expanded feature representations: \n                  Basis functions, neural networks, kernel methods\n- Generalization, regularization and inference: \n                  Penalised cost functions, Bayesian prediction, learning theory\n- Model selection, pruning and combination: \n                 Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods.\n- Representation and metric learning: \n                  Dimensionality reduction, clustering, feature learning\n\nTo support these topics we will also cover:\n- Optimization and Inference algorithms: \n                  Stochastic gradient descent, simple Monte Carlo ideas, and more specialised methods as required.\n- Practical issues: \n                   Formulating problems as machine learning, adapting methods to fit problems. \n                   Numerical and programming issues important for machine learning.\n                   Ethical issues, such as responsible application of methods and privacy concerns.",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": [
            "Applied Machine Learning (INFR11211) OR\nMachine Learning (INFR10086)"
        ],
        "other_requirements": "",
        "learning_outcomes": "frame an applied problem as a machine learning task, identifying appropriate methods\ncritically compare and contrast alternative machine learning methods for a given task\nderive and motivate novel variants of machine learning methods\ncreate accessible and useful explanations of the workings and failure modes of machine learning methods\ncheck and refine implementations of learning algorithms, while applying them in practice"
    },
    {
        "course_code": "INFR11097",
        "course_title": "Masters Dissertation (Design Informatics)",
        "course_summary": "The goal of this course is to make something new, that makes work, care or play better, by designing with data. The dissertation reports an in depth investigation of a significant problem in Design Informatics, according to sound scientific, engineering and design principles.",
        "course_desc": "Project dependent.\n\nThis is a major piece of full-time independent work which occupies the final months of the MSc course. If taken as part of a one-year masters, it accounts for all of a student's time following their course exams. If taken as part of a two-year masters, it accounts for 1/3 of student time during Semester 1 of Year 2, and 2/3 of student time in Semester 2 of Year 2. It allows students to demonstrate their ability to organise and carry out a substantial investigation into a problem in Design Informatics, according to sound scientific, engineering and design principles. The project involves both the application of skills learnt in the past and the acquisition of new skills. The project often involves the construction of an artefact, whether software, hardware, a robotic device, some other artefact incorporating computation, or some combination of these.\n\nThe types of activity involved in each project vary but include most of the following:\n- Researching the literature and gathering background information.\n- Analysing requirements, comparing alternatives and specifying a solution.\n- Analysing and exploiting relevant theory in novel ways.\n- Designing and implementing the solution.\n- Experimenting with and evaluating the solution.\n- Exploring the solution as part of a product or service.\n- Discussing existing results and presenting new research.\n- Developing written and oral presentation skills.\n\nThe project is conducted individually by the student under the supervision of a member of teaching staff.  Students are formed into groups for the purpose of Review Meetings.",
        "course_credits": 60,
        "semester": "Flexible",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "structure and summarise a body of knowledge relating to a substantial project topic in Design Informatics\ncritically evaluate previous work in the area\nconduct a programme of work in further investigation of issues related to the topic, and discuss and solve conceptual problems which arise during the investigation\njustify design decisions made during the investigation, and critically evaluate the investigation\npresent their work, with demonstration of working products or services where appropriate"
    },
    {
        "course_code": "INFR11207",
        "course_title": "Methods for Causal Inference",
        "course_summary": "Causal inference is an important emerging area in AI and data science allowing us to move away from merely associational statements towards cause-effect statements. Being able to develop and/or apply causal inference techniques has broad applications in social and biomedical sciences, e.g., in answering questions such as \"How effective is a given treatment for curing/preventing a disease?\" or \"Which genetic variants can causally increase the risk of disease and hence be targeted by drugs?\" or \"What economic policy could have prevented the 2008 financial crisis?\"\n\nIn this course we develop causal inference techniques to address the above questions. This is a relatively advanced course and students are expected to be familiar with foundations of probability, statistics and calculus (see \"Other Requirements\" box)",
        "course_desc": "The aims and the structure of the course are as follows:\n\n- Estimating causal effects: Why correlations alone are misleading?\n- Randomised trials vs observational data\n- Part I: Causal Effect Estimation\n- Rubin's framework: Potential outcomes with observed and unobserved confounders\n- Pearl's framework: Structural causal models with observed and unobserved confounders\n- Computer simulations and numerical exercises in Python\n- Part II: Causal Discovery\n- Constraint-based algorithms and Score-based algorithms\n- Functional Causal Models\n- Computer simulations and numerical exercises in Python\n\nTeaching of the theory is followed by illustrative examples from biomedicine and social sciences, together with appropriate computer simulations and numerical exercise.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Methods for Causal Inference (UG) (INFR11234)"
        ],
        "other_requirements": "",
        "learning_outcomes": "explain the difference between causal and associational estimation and justify why causal inference techniques are necessary to derive meaning from observational data\nexplain the difference between randomised trials vs observational studies related to public health and other types of data more generally\nlearn and apply foundational causal estimation techniques using two major frameworks: (i) Rubin's Potential Outcomes and (ii) Pearls Structural (graphical) causal models to simulated examples and real world data, in the presence of observed and unobserved variables\nexplain different types of causal discovery algorithm, learn their underlying assumptions and short-comings, and be able to apply them to data using available software\nmodify / repurpose a current technique in order to apply it to a particular problem of interest"
    },
    {
        "course_code": "INFR11234",
        "course_title": "Methods for Causal Inference (UG)",
        "course_summary": "This course follows the delivery and assessment of Methods for Causal Inference (INFR11207) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11207 instead.",
        "course_desc": "This course follows the delivery and assessment of Methods for Causal Inference (INFR11207) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11207 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Methods for Causal Inference (INFR11207)"
        ],
        "other_requirements": "",
        "learning_outcomes": "explain the difference between causal and associational estimation and justify why causal inference techniques are necessary to derive meaning from observational data\nexplain the difference between randomised trials vs observational studies related to public health and other types of data more generally\nlearn and apply foundational causal estimation techniques using two major frameworks: (i) Rubin's Potential Outcomes and (ii) Pearls Structural (graphical) causal models to simulated examples and real world data, in the presence of observed and unobserved variables\nexplain different types of causal discovery algorithm, learn their underlying assumptions and short-comings, and be able to apply them to data using available software\nmodify / repurpose a current technique in order to apply it to a particular problem of interest"
    },
    {
        "course_code": "INFR11248",
        "course_title": "Modelling Concurrent Systems (Level 11)",
        "course_summary": "Concurrent and distributed systems are famously hard to analyse. This theoretical course presents state-of-the-art mathematical models and techniques that make understanding concurrency possible. In the process, we will touch on fundamental philosophical, mathematical and computational questions. What does 'concurrency' actually mean? How do we know our concurrent system behaves correctly? What does 'correctly' actually mean? This course is especially relevant to any student with an interest in a scientific career in programming languages, models, or distributed systems, and also to students looking to design or implement distributed systems in industry.",
        "course_desc": "Beginning with simple examples and protocols, we will develop a theory to describe models of concur-rent systems of increasing complexity, based on process algebra. We will learn how to compare these models, and the key concepts that describe what it means for systems to be equivalent, such as bisimulation and trace equivalence. We will learn how to specify prove  properties of systems, and the assumptions we must make about the environment in which these systems operate, such as fairness. The course lectures will introduce concepts using standard examples, and students will apply what they have learned to new problems in homework questions delivered weekly. In tutorials, students can discuss solutions to their homework problems and get feedback on their work, developing their solutions into a summative homework portfolio that they submit for grading at two checkpoints throughout the semester.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": [
            "Modelling Concurrent Systems (Level 10) (INFR10089)"
        ],
        "other_requirements": "",
        "learning_outcomes": "construct accurate models of concurrent systems, including protocols and other distributed communicating systems\nanalyse (models of) concurrent systems and show various notions of equivalence and refinement between them\nevaluate the comparative benefits and drawbacks of various concurrency models\narticulate safety and liveness properties of concurrent systems using temporal logic and other tools\njustify the correctness of concurrent systems under various assumptions about their executing context"
    },
    {
        "course_code": "INFR11161",
        "course_title": "Natural Computing",
        "course_summary": "This module teaches you about bio-inspired algorithms for optimisation and search problems. The algorithms are based on simulated evolution (including Genetic algorithms and Genetic programming), particle swarm optimisation, ant colony optimisation as well as systems made of membranes or biochemical reactions among molecules. These techniques are useful for searching very large spaces. For example, they can be used to search large parameter spaces in engineering design and spaces of possible schedules in scheduling. However, they can also be used to search for rules and rule sets, for data mining, for good feed-forward or recurrent neural nets and so on. The idea of evolving, rather than designing, algorithms and controllers is especially appealing in AI. In a similar way it is tempting to use the intrinsic dynamics of real systems consisting e.g. of quadrillions of molecules to perform computations for us. The course includes technical discussions about the applicability and a number of practical applications of the algorithms.\n\nIn this module, students will learn about\n\n- The practicalities of natural computing methods: How to design algorithms for particular classes of problems.\n\n- Some of the underlying theory: How such algorithms work and what is provable about them. \n\n- Issues of experimental design: How to decide whether an metaheuristic algorithm works well. \n\n- Current commercial applications. \n\n- Current research directions.",
        "course_desc": "The lectures will cover the following subjects:\n\n- Computational aspects of animal behaviour and of biological, chemical or physical systems\n- Genetic and Evolutionary Algorithms: Selection, recombination and mutation, fitness and objective functions\n- Swarm intelligence, particle swarms, differential evolution, robot swarms\n- Theory: the schema theorem and its flaws; convergence, statistical mechanics approaches\n- Comparisons among various metaheuristic algorithms, No-Free-Lunch theorems\n- Hybrid, hyperheuristic, and memetic algorithms\n- Multi-objective optimisation\n- Genetic programming\n- Applications such as engineering optimisation; scheduling; data-mining; neural net design\n- Experimental issues: Design and analysis of sets of experiments\n\nRelevant QAA Computing Curriculum Sections: Artificial Intelligence, Data Structures and Algorithms, Simulation and Modelling",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "understand natural computation techniques in theory and in their broad applicability to a range of hard problems in search, optimisation and machine learning\nto know when a natural computing technique is applicable, which one to choose and how to evaluate the results\nto know how to apply a natural computing technique to a real problem and how to choose the parameters for optimal performance\nmatch techniques with problems, evaluating results, tuning parameters, creating (memetic) algorithms by evolution"
    },
    {
        "course_code": "INFR11157",
        "course_title": "Natural Language Understanding, Generation, and Machine Translation",
        "course_summary": "This course explores current research on processing natural language: interpreting, generating, and translating. The course will focus mainly on deep learning approaches to various NLP tasks and applications. It will provide an introduction to the main neural network architectures used in NLP and how they are used for tasks such as syntactic and semantic parsing, as well as end-user applications such as machine translation and text summarisation.\n\nBuilding on linguistic and algorithmic knowledge taught in prerequisite courses, this course also aims to further develop students' understanding of the strengths and weaknesses of current approaches with respect to linguistic and computational considerations. Practical assignments will provide the opportunity to implement and analyse some of the approaches considered.",
        "course_desc": "The course aims to familiarise students with recent research across a range of topics within NLP, mainly within the framework of neural network models, and with a focus on applications such as machine translation, summarisation, and semantic parsing.",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Natural Language Understanding, Generation, and Machine Translation (UG) (INFR11225)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify and discuss the main linguistic, machine learning, and ethical challenges involved in the development and use of natural language processing systems\nunderstand and describe state-of-the-art models and algorithms used to address challenges in natural language processing systems\ndesign, implement, and apply modifications to state-of-the-art natural language processing systems\nunderstand the computational and engineering challenges that arise in the use of different models for natural language processing, and discuss the pros and cons of different models for a given task\nunderstand, design and justify approaches to evaluation and error analysis in natural language processing systems"
    },
    {
        "course_code": "INFR11225",
        "course_title": "Natural Language Understanding, Generation, and Machine Translation (UG)",
        "course_summary": "This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead.",
        "course_desc": "This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead.",
        "course_credits": 20,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Natural Language Understanding, Generation, and Machine Translation (INFR11157)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify and discuss the main linguistic, machine learning, and ethical challenges involved in the development and use of natural language processing systems\nunderstand and describe state-of-the-art models and algorithms used to address challenges in natural language processing systems\ndesign, implement, and apply modifications to state-of-the-art natural language processing systems\nunderstand the computational and engineering challenges that arise in the use of different models for natural language processing, and discuss the pros and cons of different models for a given task\nunderstand, design and justify approaches to evaluation and error analysis in natural language processing systems"
    },
    {
        "course_code": "INFR11024",
        "course_title": "Parallel Architectures (Level 11)",
        "course_summary": "The aims of this course are threefold: (a) to investigate the various forms of parallelism found in uniprocessors and in multiprocessor and multicomputer systems; (b) to explore the issues which arise in these systems in terms of: (i) ensuring that programs are executed correctly by the hardware; (ii) maximising performance (c) to undertake an in-depth investigation of a specific area of current research in parallel architecture.",
        "course_desc": "* Introduction\nParallelism and Performance\nParallelism in Software \n\n* Uniprocessor Parallelism\nVector & SIMD Instructions\nSuperscalar and VLIW processors \n\n* Interconnection networks\nIntroduction\nRouting Functions\nStatic Networks\nDynamic Networks\nCombining Networks \n\n* Multiprocessor & Multicomputer Systems\nIntroduction\nShared Memory Systems\nDirectory-based Coherence Protocols\nMemory Consistency\nNUMA Systems\nMessage Passing Systems \n\n*Performance & Scalability\nPerformance metrics\nScalability \n\nRelevant QAA Computing Curriculum Sections:  Architecture, Simulation and Modelling",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "describe the various forms of parallelism found in modern computer systems and the techniques used (a) to ensure that programs are executed correctly by parallel hardware (b) to maximise performance.\nassess the effectiveness of techniques used to enhance the performance of computer systems.\nrecord observations of on-line experiments, present this information in a variety of formats and draw conclusions from it.\ninvestigate, explain and comment critically on a specific area of current parallel computer architecture research."
    },
    {
        "course_code": "INFR11023",
        "course_title": "Parallel Programming Languages and Systems (Level 11)",
        "course_summary": "The module familiarises students with the issues involved in designing, implementing and applying parallel programming systems. Initial motivation will be provided by consideration of a number of typical high performance applications and parallel architectures. This will highlight the role of parallel software systems as a means of bridging the gap between these and allow abstraction of the issues which must be addressed by any such system (partitioning, communication, agglomeration, scheduling). It will explore the ways in which these challenges have been addressed by a range of systems, including both de facto standards and more adventurous research projects.",
        "course_desc": "* Introduction. Conceptual and architectural models of parallelism. Parallel algorithmic paradigms and simple parallel algorithms.Iterative, recursive pipeline and bag-of-task parallelism.\n* Generic issues in shared variable programming. Mutual exclusion, condition synchronization. Locks, barriers semaphores and monitors, use and implementation.\n* Realisation in Pthreads and Java.\n* Issues in message passing programming. Channels and synchronization models.\n* Realisation in MPI: communicators, simple and collective operations\n* Selected case studies highlighting alternative approaches, for example,\no Associative models. Linda, tuple space and related primitives.\no Threading Building Blocks.\n\nRelevant QAA Computing Curriculum Sections:  Concurrency and Parallelism",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Parallel Programming Languages and Systems (Level 11) (UG) (INFR11226)"
        ],
        "other_requirements": "",
        "learning_outcomes": "describe generic issues (as discussed in the syllabus) which must be addressed by any parallel programming system\nexplain, given a description of a previously unseen parallel application, where specific instances of the generic issues will arise\nexplain, in considerable detail, the ways in which the generic issues are addressed by the MPI and Pthreads programming models and their supporting infrastructure\napply their practical experience with MPI and Pthreads to write clean, adaptable and scalable parallel programs for simple applications\ncompare the approaches proposed by a range of more speculative programming models"
    },
    {
        "course_code": "INFR11226",
        "course_title": "Parallel Programming Languages and Systems (Level 11) (UG)",
        "course_summary": "This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead.",
        "course_desc": "This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Parallel Programming Languages and Systems (Level 11) (INFR11023)"
        ],
        "other_requirements": "",
        "learning_outcomes": "describe generic issues (as discussed in the syllabus) which must be addressed by any parallel programming system\nexplain, given a description of a previously unseen parallel application, where specific instances of the generic issues will arise\nexplain, in considerable detail, the ways in which the generic issues are addressed by the MPI and Pthreads programming models and their supporting infrastructure\napply their practical experience with MPI and Pthreads to write clean, adaptable and scalable parallel programs for simple applications\ncompare the approaches proposed by a range of more speculative programming models"
    },
    {
        "course_code": "INFR11264",
        "course_title": "Placement Dissertation Project",
        "course_summary": "This course comprises an individual placement research project as part of the UKRI CDT in AI for Biomedical Innovation. It offers students the opportunity to gain in-depth experience of research in an interdisciplinary environment, with joint supervision in AI and biomedical science ordinarily conducted in an external partner organisation.",
        "course_desc": "The course is an individual research project where students will work independently on an application of Artificial Intelligence to a biomedical problem in an external partner organisation associated with the UKRI CDT in AI for Biomedical Innovation. All projects will have joint supervision between the University and the external partner that jointly provides adequate supervision of both AI and biomedical components, enabling the student to work in an interdisciplinary environment and be embedded within the application. A particular feature of this course will be its attention to the societal and ethical aspects of the research, which will form part of the assessment.",
        "course_credits": 60,
        "semester": "Block 5 (Sem 2) and beyond",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Identify and synthesise clear background knowledge of the literature surrounding the broader and specific area of the project.\nCo-design a research project in consultation with supervisors and successfully undertake a time constrained systematic piece of scholarly work according to a plan, and provide a well-structured,  thorough dissertation report with critical analysis and interpretation.\nIndependently identify and apply appropriate AI algorithms to specific biomedical problems.\nCommunicate effectively, both in writing and orally, technical AI concepts to an interdisciplinary audience.\nDiscuss critically the broader societal and ethical implications of AI research in the biomedical field and in the specialised area of the project."
    },
    {
        "course_code": "INFR11150",
        "course_title": "Principles and Design of IoT Systems",
        "course_summary": "The course is concerned with the emerging discipline of digitising the physical world with networks of wireless sensors, analysing the sensor data using machine learning techniques to extract concise actionable information, and influencing the physical world via actuators, with an optional human in the loop. \n\nThe course imparts foundational concepts in IoT through personal research distilled in the form of one survey papers on foundational topics in IoT, and students working in pairs gain hands-on experience by realising a healthcare application idea as a demonstrable IoT system using wearable sensors by the end of the semester.",
        "course_desc": "The course aims to deliver a sound understanding of the design and analysis of Internet of Things systems through personal research and practice. The research in selected topics in IoT provides the foundational knowledge distilled in the form of a 3000-word survey paper. \n\nThe students conduct a major piece of coursework working in pairs to develop an IoT application using wearable sensors. Students will experience all the stages in the design and implementation of a complex system, from its specification to the demonstration of a working prototype. They will be exposed to aspects of embedded systems programming, sensor data analytics using machine learning methods, user interface design, system integration and testing. Each pair will demonstrate a working prototype at the end of Semester 1 and deliver a written report at the start of Semester 2. \n\nEach student pair is given a  couple of Inertial Measurement Unit (IMU)  with 3-axis accelerometer and 3-axis gyroscope sensors, and Android app for sensor data collection. The task will be to design, implement and demonstrate a system for human activity recognition in real-time using the wearable sensor which interfaces to an Android App.",
        "course_credits": 20,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Perform the end-to-end design, implementation and demonstration of a typical Internet of Things system.\nDemonstrate skills in data collection, cleaning, pre-processing, feature extraction and classification of  noisy time-series sensor data, using machine learning techniques.\nDevelop Android apps and communicate with Bluetooth low-energy devices.\nGather information from primary sources, such as research papers, for a review paper on a given IoT  topic.\nWork productively in a team, where members have complimentary skill sets, and demonstrate  competence in project management, requirements capture, negotiations, and oral and written  presentations."
    },
    {
        "course_code": "INFR11239",
        "course_title": "Principles and Design of IoT Systems (UG)",
        "course_summary": "This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead.",
        "course_desc": "This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Principles and Design of IoT Systems (INFR11150)"
        ],
        "other_requirements": "",
        "learning_outcomes": "experience the end-to-end design, implementation and demonstration of a typical Internet of Things system, and gaining skills in embedded programming for the collection and processing of sensor data, processing and analysis using machine learning methods, and, displaying the results in an Android mobile application\ngain knowledge in a selection of methods for pre-processing, feature extraction and classification of time-series sensor data, and their efficacy when applied to noisy sensor data\ngain experience using tools such as compilers for IoT development board using inertial sensors, system-level simulators, and Android mobile applications development\nearn the process of gathering information from primary sources such as research papers and reports for comparative study in selected foundational topics in IoT which are distilled in two survey papers\ngain experience working with another team member with complimentary skill sets; develop skills in project management, requirements capture, negotiations, and oral and written presentations"
    },
    {
        "course_code": "INFR11240",
        "course_title": "Privacy and Security with Machine Learning",
        "course_summary": "The increasing popularity of machine learning (ML) and its new applications has raised security and privacy concerns. ML techniques provide adversaries with new capabilities to undermine the security and privacy of ICT systems. Moreover, there is a growing recognition of the security and privacy issues of ML algorithms. These issues can have tremendous consequences in a society that increasingly relies on ML, so they call for more robust methods that allow harnessing the benefits of ML in adversarial settings.\n\nThis is an introductory course on the topic. The course will provide an overview of adversarial applications of ML techniques, including those that undermine the privacy and security of ML-based systems. The course will also cover existing countermeasures and mitigation strategies.",
        "course_desc": "The course is divided into two blocks:\n\n1.\tEmerging applications of ML techniques in the security and privacy domain\n\n2.\tThreats to the privacy and security of ML models and risk mitigation strategies\n\nIn Block 1, we will cover novel applications of ML techniques to a range of problems in the security domain: traffic analysis, (de)anonymization of documents, hardware side channels, etc. The focus will be on how ML has augmented the attacker's capabilities.\n\nIn Block 2, we will turn to threats to the security and privacy of ML algorithms. We will review some of the following attacks: membership inference attacks, poisoning attacks, adversarial examples, etc. We will also discuss countermeasures that have been proposed to mitigate these attacks. \n\nThe lectures will combine presentations of specific research papers and the background in ML and Cyber Security required to follow the papers.\n\nMost of the lectures will have a traditional format, where the lecturer will guide the discussion. The students will prepare for the lectures by reading the papers and reviewing the theory.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Privacy and Security with Machine Learning (UG) (INFR11252)"
        ],
        "other_requirements": "",
        "learning_outcomes": "classify the attacks covered by the course according to their adversary model (e.g., objective, background knowledge, and capabilities)\ndefine the underlying privacy and security properties undermined by the attacks\nidentify properties and assumptions of each setting that are necessary for the effectiveness of some of the attacks (e.g., in attacks against a supervised model: overfitting of the model, i.i.d. assumption, etc)\ndiscuss the challenges in mitigating specific attacks (e.g., trade-offs between accuracy and privacy)\nidentify the privacy and security concerns in real-world applications of ML. For example, if you train an ML model on healthcare data, what could go wrong for your future users\u00c2\u00bf privacy?"
    },
    {
        "course_code": "INFR11252",
        "course_title": "Privacy and Security with Machine Learning (UG)",
        "course_summary": "This course follows the delivery and assessment of Privacy and Security with Machine Learning (INFR11240) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11240 instead.",
        "course_desc": "This course follows the delivery and assessment of Privacy and Security with Machine Learning (INFR11240) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11240 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Privacy and Security with Machine Learning (INFR11240)"
        ],
        "other_requirements": "",
        "learning_outcomes": "classify the attacks covered by the course according to their adversary model (e.g., objective, background knowledge, and capabilities)\ndefine the underlying privacy and security properties undermined by the attacks\nidentify properties and assumptions of each setting that are necessary for the effectiveness of some of the attacks (e.g., in attacks against a supervised model: overfitting of the model, i.i.d. assumption, etc)\ndiscuss the challenges in mitigating specific attacks (e.g., trade-offs between accuracy and privacy)\nidentify the privacy and security concerns in real-world applications of ML. For example, if you train an ML model on healthcare data, what could go wrong for your future users\u00c2\u00bf privacy?"
    },
    {
        "course_code": "INFR11134",
        "course_title": "Probabilistic Modelling and Reasoning",
        "course_summary": "When dealing with real world data, we often need to deal with uncertainty. For example, short segments of speech may be ambiguous, and we need to take into account context in order to make sense of an utterance. Probability theory provides a rigorous method for representing and reasoning with uncertain knowledge. The course covers two main areas (i) the process of inference with probabilistic models and (ii) learning probabilistic models from data. \n\nIts aim is to provide a firm grounding in probabilistic modelling and reasoning, and to give a basis which will allow students to go on to develop their interests in more specific areas, such as statistical language modelling, bioinformatics, computational neuroscience, or computer vision, to name a few examples.",
        "course_desc": "The course will cover the most important topics in probabilistic modelling and unsupervised learning, and provide a thorough basis for understanding extensions, further developments and applications.\n\nWhile the precise topics will vary slightly from year to year, the core content will revolve around:\n- probabilistic graphical models\n- exact inference\n- learning from data\n- methods for approximate inference and learning\n\nThe course will be delivered in a series of lectures and exercises. In addition to working through exercises with pencil and paper, the students will be expected to complete some programming exercises to gain experience with implementing and using the material taught in the course.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Probabilistic Modelling and Reasoning (UG) (INFR11235)"
        ],
        "other_requirements": "",
        "learning_outcomes": "define the joint distribution implied by directed and undirected probabilistic graphical models, convert between different graphical models, and carry out inference in graphical models from first principles by hand\ndemonstrate understanding of frequentist and Bayesian methods for parameter estimation by hand derivation of estimation equations for specific problems\ncritically discuss differences between various latent variable models for data and derive EM updates for various latent variable models. Demonstrate ability to implement approximate inference and learning methods\nexplain when and why the methods taught in the course are applicable and demonstrate experience gained from practically implementing them"
    },
    {
        "course_code": "INFR11235",
        "course_title": "Probabilistic Modelling and Reasoning (UG)",
        "course_summary": "This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead.",
        "course_desc": "This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Probabilistic Modelling and Reasoning (INFR11134)"
        ],
        "other_requirements": "",
        "learning_outcomes": "define the joint distribution implied by directed and undirected probabilistic graphical models, convert between different graphical models, and carry out inference in graphical models from first principles by hand\ndemonstrate understanding of frequentist and Bayesian methods for parameter estimation by hand derivation of estimation equations for specific problems\ncritically discuss differences between various latent variable models for data and derive EM updates for various latent variable models. Demonstrate ability to implement approximate inference and learning methods\nexplain when and why the methods taught in the course are applicable and demonstrate experience gained from practically implementing them"
    },
    {
        "course_code": "INFR11260",
        "course_title": "Programming for Biomedical Informatics",
        "course_summary": "The scale and diversity of biomedical data being generated globally is facilitating a step-change in our understanding of human disease. To take advantage of these data effectively we need to use different computational techniques to retrieve, parse, and analyse them.\n\nThis course will consist of a series of lectures and tutorials covering a selection of advanced programming topics in Python specifically tailored to the analysis of biomedical data.\n\nThe course aims to equip students will the skills and experience needed to pursue future specialist courses in biomedical informatics and related disciplines.",
        "course_desc": "In this course, students will learn how to use Python to retrieve and parse data from biological repositories through bulk download and application programming interfaces (APIs). They will learn about established data formats for different data modalities so that they understand the structure and content of the data they are using and how it was generated. Each week we will focus on analytical tasks in linked topics that span the main components of modern biomedical informatics research. Topics will change slightly each year, but will typically include tools, algorithms, and approaches for biological sequence, multi-omics (transcriptomics, proteomics, methylomics), biomedical network, and biomedical text analysis. Each topic will be explored using real-world examples.\n\nThe course will be taught in twice weekly paired lectures, with the first lecture introducing background material, programming concepts, and techniques and the second lecture demonstrating their applied use in an interactive tutorial style. The course will be supported by Jupyter Notebooks for each topic that will contain technical programming examples and exemplars of their application to real-world biomedical data.\n\nSummative assessment will consist of weekly problems in each topic area and a final exam based on the lecture and tutorial content.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Select sources of biomedical data appropriate for a given research question.\nDetermine the most suitable methods to use to analyse these data.\nImplement and critically evaluate advanced Python code for biomedical data projects using  reproducible research practices."
    },
    {
        "course_code": "INFR11255",
        "course_title": "Programming for Data Science at Scale",
        "course_summary": "The Programming for Data Science at Scale course will utilise the paradigms of programming at large scale to equip students with the practical skills required to leverage large-scale computational resources across a distributed cluster of computers.",
        "course_desc": "Delivery Method:\nThe course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and  (4) an online discussion forum (Piazza forum).\n\nContent/Syllabus:\nThe course will vary slightly from year to year, but will include many of the following topics:\n- Introduction to large-scale data processing\n- Data-parallel programming: functional collections\n- Distributed Data-parallel programming\n- Distributed Key-value processing\n- Optimizing distributed data processing: Shuffling and partitioning\n- Distributed Query processing\n- Distributed Graph processing\n- Distributed Tensor processing\n\nAs this is a practical course touching a large number of topics and from separate areas, it is coursework only. For proper evaluation, students must be presented with real problems, rather than \"toy\" ones which can be solved in a very limited time. The evaluation is based on the following components:\n1) Quizzes - learning outcomes 1, 2, 3.\n2) Programming assignment - learning outcome 2.\n3) Design assignment - learning outcomes 1, 3, 4.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "demonstrate an understanding of the concepts behind different large-scale programming models and their associated data models.\nconstruct and justify a formulation in terms of a programming model for a given problem and implement that formulation on top of an existing framework.\nidentify how to decompose large problems into sub-problems and compose the results by applying appropriate programming models.\npresent implementations and engage in professional dialogue with peers to identify and  adapt those implementations better to meet requirements."
    },
    {
        "course_code": "INFR11187",
        "course_title": "Quantum Cyber Security",
        "course_summary": "In this course we cover a broad range of effects that the development of quantum technologies bring on the security and privacy of communication and computation. In particular we consider (i) post-quantum security: security of classical protocols when the adversaries have access to quantum computers or other quantum technologies and (ii) quantumly-enhanced security: when quantum technologies are used by honest parties to achieve better (in terms of security or efficiency) performance. We give an overview of the field, while in each case we focus on selected examples to illustrate how to handle security in a world with quantum technologies.",
        "course_desc": "This course deals with the various effects that developing quantum technologies will have on cyber security. Quantum computing and quantum information theory offers new possibilities (in terms of efficiency and security). Here we examine both the extra attacks that adversaries equipped with quantum technologies can perform and the extra possibilities opened when honest parties use quantum technologies.\n\nThe students first will be introduced to quantum information concepts (qubits, mixed states, operations, distance measures) as well as quantum algorithms (factoring, discrete logarithms, search) and their limitations. This will lead to LO1, namely learn the mathematical machinery and the power (and limitations) of quantum information and computation, in view of using these for cyber security.\n\nThe second part consists of learning and understanding quantum cryptography and specifically \"quantum-key-distribution\" protocols, including their security proofs and the how different implementations affect the performance (see LO4). The limitations (practical and theoretical) of quantum cryptography will also be analysed here (including impossibility results).\n\nThe third part deals with generalising classical notions such as encryption, authentication and secure delegated computation to quantum information. Introducing students in these concepts prepares them for the next generation of quantum cyber security that is bound to become relevant when large(r) quantum computers are constructed (LO5).\n\nFinally, the last part of the course focuses on classical protocols and their security under quantum attacks. A cryptosystem based on the learning-with-errors problems will be introduced as a (key) example of this possibility (LO2). Furthermore, general quantum attacks (superposition attacks, the quantum random oracle model, etc) will be introduced and students will learn to analyse general quantum attacks on a given classical protocol (LO3).",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Quantum Cyber Security (UG) (INFR11227)"
        ],
        "other_requirements": "",
        "learning_outcomes": "demonstrate their understanding of the power and limitations of quantum computation by evaluating the performance of quantum algorithms and be able to use the basic mathematical formalism for quantum information and quantum cryptography\ntest whether a classical cryptosystem is secure against a range of quantum attacks\nanalyse quantum attacks to classical protocols\ndemonstrate their understanding of the security of quantum cryptography by analysing the security proofs including the effects of different physical implementations\nuse security notions for quantum information, such as encryption and authentication, in quantum cryptographic protocols and their application to blind quantum computation"
    },
    {
        "course_code": "INFR11227",
        "course_title": "Quantum Cyber Security (UG)",
        "course_summary": "This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead.",
        "course_desc": "This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Quantum Cyber Security (INFR11187)"
        ],
        "other_requirements": "",
        "learning_outcomes": "demonstrate their understanding of the power and limitations of quantum computation by evaluating the performance of quantum algorithms and be able to use the basic mathematical formalism for quantum information and quantum cryptography\ntest whether a classical cryptosystem is secure against a range of quantum attacks\nanalyse quantum attacks to classical protocols\ndemonstrate their understanding of the security of quantum cryptography by analysing the security proofs including the effects of different physical implementations\nuse security notions for quantum information, such as encryption and authentication, in quantum cryptographic protocols and their application to blind quantum computation"
    },
    {
        "course_code": "INFR11268",
        "course_title": "Quantum Informatics Group Project",
        "course_summary": "This course is part of the CDT in Quantum Informatics training programme. Interdisciplinary groups of 3-4 students work on a research project, surveying literature and implementing the project. Special attention is paid to communication with students and audiences with a different undergraduate background than the student.",
        "course_desc": "Students are teamed into groups of 3 or 4, ideally consisting of students from different undergraduate backgrounds (Informatics, Physics, Mathematics, Engineering, etc). The group works together on a small research project. The first phase concentrates on writing a literature survey that is accessible to students from all undergraduate backgrounds. In the second phase the project is implemented. Students then individually write a summary report reflecting on interdisciplinary collaboration, which together with a project group presentation forms the basis for the course assessment. The literature review will feed into the annual report for the first year review.",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Explain their projects and surrounding topics to audiences of different backgrounds.\nTailor their mode of working to collaborators from different backgrounds.\nReflect on working in interdisciplinary teams."
    },
    {
        "course_code": "INFR11273",
        "course_title": "Quantum Informatics Individual Project",
        "course_summary": "This course comprises the third term of the CDT in Quantum Informatics training programme. Students work on an individual research project, developing a research proposal for years 2-4 of their PhD studies.",
        "course_desc": "Guided by a supervisor, the student performs individual research on a delineated topic, writes a report on their findings, and develops a research proposal for years 2-4 of their PhD studies. It is assessed via a brief report, which forms the basis for the first year review.",
        "course_credits": 60,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Explain their project and surrounding topics\nReflect on working on research individually\nPropose a coherent research direction for their further PhD studies"
    },
    {
        "course_code": "INFR11267",
        "course_title": "Quantum Informatics Practical Orientation",
        "course_summary": "This course comprises elements of the first two terms of the CDT in Quantum Informatics training programme. It consists of two parts: a residential programme at the National Quantum Computing Centre, and personal development workshops.",
        "course_desc": "In the NQCC residential programme teams of students work on industrial use cases, and in sandbox sessions are introduced to varied quantum hardware provided via NQCC using relevant Software Development Kits. This practice-based orientation includes Responsible Research and Innovation analysis approaches to quantum technologies including regulation. Participation in the residential programme is assessed through a brief report. Additionally, students participate in three personal development courses offered by the Institute for Academic Development, and write a summary report about what they have learned. These two pieces of writing form the basis for assessment, and also feed into the annual report for the first year review.",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Reflect on working in interdisciplinary teams.\nDefine and compare varied quantum hardware platforms.\nIncorporate personal efficiency and improvement."
    },
    {
        "course_code": "INFR11201",
        "course_title": "Randomized Algorithms",
        "course_summary": "This course is about randomness as a resource in algorithms and computation. The course introduces basic mathematical models and techniques and applies them to the design and analysis of various randomized algorithms. We will also cover a variety of applications of probabilistic ideas and randomization in several areas of computer science.",
        "course_desc": "1) Introduction, review of discrete probability, and elementary examples including randomized algorithms for checking identities, matrix multiplication verification, minimum cut in graphs.\n\n2) Discrete Random Variables, Moments, Deviations and Tail Inequalities; applications, including the coupon collector problem.\n\n3) Chernoff bounds and applications: random sampling and estimation of discrete distributions. The birthday paradox and applications.\n\n4) The Probabilistic Method: random graphs and threshold phenomena. Max-cut approximation. Lovasz Local Lemma and application to boolean satisfiability.\n\n5) Random Walks and Markov Chains: hitting and cover times; stationary distributions, random walks on undirected graphs.\n\n6) The Monte Carlo Method; applications including sampling and approximate counting, the markov chain monte carlo method, the Metropolis algorithm.\n\n7) Coupling of Markov Chains, mixing time, and applications, including card shuffling and sampling of graph colourings and independent sets.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "understand and apply fundamental tools in discrete probability (e.g. expectation, concentration inequalities, the probabilistic method, random walks) toward the design and analysis of randomized algorithms\nunderstand randomized algorithms for selected combinatorial and graph problems\nanalyze expected running time and error probabilities of randomized algorithms\nunderstand the fundamentals of Markov chains and their algorithmic applications\napply Monte Carlo methods such as MCMC to some discrete algorithmic problems"
    },
    {
        "course_code": "INFR11010",
        "course_title": "Reinforcement Learning",
        "course_summary": "Reinforcement learning (RL) refers to a collection of machine learning techniques which solve sequential decision making problems using a process of trial-and-error. It is a core area of research in artificial intelligence and machine learning, and today provides one of the most powerful approaches to solving decision problems. This course covers foundational models and algorithms used in RL, as well as advanced topics such as scalable function approximation using neural network representations and concurrent interactive learning of multiple RL agents.",
        "course_desc": "Main topics to be covered include the following: \n\n* Reinforcement learning framework \n* Bandit problems and action selection \n* Dynamic programming \n* Monte Carlo methods \n* Temporal difference learning \n* Planning in RL \n* Function approximation for generalisation \n* Actor-critic and gradient-based optimisation \n* Multi-agent reinforcement learning \n* Training agents and evaluating performance\n\nRelevant QAA Computing Curriculum Sections:  Artificial Intelligence, Data Structures and Algorithms, Intelligent Information Systems Technologies, Simulation and Modelling",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Reinforcement Learning (UG) (INFR11236)"
        ],
        "other_requirements": "",
        "learning_outcomes": "gain knowledge of basic and advanced reinforcement learning techniques\nidentify suitable learning tasks to which these learning techniques can be applied\nappreciate the current limitations of reinforcement learning techniques\ngain an ability to formulate decision problems, set up and run computational experiments, evaluation of results from experiments"
    },
    {
        "course_code": "INFR11236",
        "course_title": "Reinforcement Learning (UG)",
        "course_summary": "This course follows the delivery and assessment of Reinforcement Learning (INFR11010) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11010 instead.",
        "course_desc": "This course follows the delivery and assessment of Reinforcement Learning (INFR11010) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11010 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Reinforcement Learning (INFR11010)"
        ],
        "other_requirements": "",
        "learning_outcomes": "gain knowledge of basic and advanced reinforcement learning techniques\nidentify suitable learning tasks to which these learning techniques can be applied\nappreciate the current limitations of reinforcement learning techniques\ngain an ability to formulate decision problems, set up and run computational experiments, evaluation of results from experiments"
    },
    {
        "course_code": "INFR11216",
        "course_title": "Research Methods in Financial Computing",
        "course_summary": "The aim of this course is to equip students on the MSc in Advanced Technology in Financial Computing (ATFC) with the necessary theoretical, conceptual and applied skills to critically and effectively read, \nevaluate, design, propose and ultimately carry out relevant and effective research projects in the realm of financial computing. This course will provide students with an opportunity to develop the necessary theoretical and practical foundational skills that are specifically relevant to conduct financial computing oriented research that can be deployed in academic and commercial environments.",
        "course_desc": "This course introduces the necessary elements to support research in the realm of financial computing, such as providing a holistic understanding of some of the theoretical, conceptual, and applied skills to be able to read, evaluate, design, propose and undertake research in financial computing critically and effectively. \n\nBy allowing students to experience and practice the different aspects of the research journey, students will be able to develop a good understanding of research and practical skills to support effective research design in financial computing, such as what kind of data should be collected and analysed, about how inferences should be drawn if the aims of the research are to be realised, as well as appreciating the importance of demonstrating that conclusions drawn from the research are robust and well-grounded epistemologically, theoretically and methodologically. \n\nTopics covered will include:\n- What makes research piece interesting, relevant, and how to critically assess its contribution to knowledge\n- The role of theory and key theoretical frameworks of financial computing research\n- Identifying relevant research questions in financial computing\n- Identification, contrasting and combining methodological approaches\n- Identification of research contexts and datasets in financial computing\n- Developing effective research strategy and structure\n- Critical revision of relevant academic literature\n- The strengths and weaknesses of different kinds of research design as they relate to the aims, objectives and theoretical underpinnings of any piece of research in financial computing\n- Ethics, fairness and diversity, appreciation of good research practice and key practical considerations when proposing research in financial computing\n\nThe delivery of this course will vary between lectures and tutorials. Lectures are aimed at providing an overarching guidance on the key aspects to master the learning outcomes of the course and foundations to undertake the written coursework, while tutorials are organised to facilitate in-depth and interactive discussion with peers and tutors, to allow the opportunity to explore areas of interest with respect to specific angles of the topics covered in the course.\n\nBy the end of this course, students will produce a research proposal, where they will have the opportunity to exercise and practice the key elements of a financial computing research journey and \nreceive feedback.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "critically evaluate academic literature on various financial computing issues or other prior work  appropriate for their chosen research subject\nuse existing literature or other prior work to select and justify choices on the most appropriate  methodological and philosophical frameworks, experimental designs, and theoretical goals to  carry out their own research in a financial computing related subject\ncritically apply project management skills to assess, direct, manage and deliver a research project, such as developing timely plans with a clear breakdown of the relevant activities and  tasks required to achieve the project\u00c2\u00bfs goal, identify links and dependencies between required  activities and tasks and determine risk mitigation strategies\ndevelop skills on relevant project implementation issues, such as recognising the availability,  strengths, and limitations associated with primary and secondary data, identify the required databases, instruments, tools, and test environments to process the necessary data to conduct  research, understand the core quantitative, qualitative and mixed methods approaches used to  conduct research in the realm of financial computing, and recognise potential legal, social,  ethical and professional issues\ndevelop a structured research project proposal in the domain of financial computing"
    },
    {
        "course_code": "INFR11259",
        "course_title": "Researching Responsible and Trustworthy Natural Language Processing",
        "course_summary": "This course introduces critical skills needed to do design, build, evaluate and deploy responsible and trustworthy natural language processing systems. This includes identifying research questions; proposing methods to answer research questions; and communicating results orally and in writing to a scientific audience. The course brings together methodologies from NLP and from design informatics, as well as covering legal, social, and ethical aspects of NLP systems. Key skills in public engagement and working with industry also feature in the course.",
        "course_desc": "This course is a compulsory course for first year students of the CDT in Designing Responsible NLP. Its key aim is to bring together the two methodologies at the heart of this CDT: engineering-oriented thinking as it's common in NLP and design thinking as it's common to design informatics. Key methods from law, social science, and philosophy are also covered, as well a topics such as public engagement and working with industry. The course will meet twice a week, and the sessions will be a mixture of student-led activities (e.g., presentations) and lecturer-led activities (e.g., methods tutorials). Students will take part in a small course project (done in groups), submit a project report an other written work, and also give oral presentations (either live or in the form of videos). These aspect of the course will be assessed.",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Critically read, assess, and synthesize scientific literature in natural language processing and design informatics and related fields.\nIdentify new research questions in responsible and trustworthy natural language processing and propose engineering or methods to answer them.\nCommunicate research results orally and through media such as videos\nCommunicate research results in writing to a range of audiences."
    },
    {
        "course_code": "INFR11098",
        "course_title": "Secure Programming",
        "course_summary": "This course studies the principles and practices of secure programming. Secure programming means writing programs in a safe fashion, to avoid vulnerabilities that can be exploited by attackers. It also means using security features provided by libraries, such as authentication and encryption, appropriately and effectively. A range of programming platforms will be considered, ranging from low-level (e.g. Android OS), through web programming (e.g., JavaScript and Python) to high-level large-scale languages (e.g., Java). New and emerging language-based security mechanisms will be examined, including ways of specifying and enforcing security policies statically and dynamically (e.g., to enforce access controls or information flow policies).",
        "course_desc": "- Security maintainance of deployed software systems, including \"penetrate-and-patch\", vulnerability enumeration (CVE IDs) and classification (CWE taxonomy).\n- Secure programming techniques and common pitfalls, covering input validation, output filtering, use of cryptography and authentication. Standards such as the OWASP guidelines and the CERT Secure Coding Standards.\n- Malware (including adware, spyware) and its use of software vulnerabilities as an attack vector. Programming resilience against malware.\n- Low-level programming platforms, VMs and their security provisions, for example including process isolation, capabilities and permissions. Mobile operating system platforms as examples.\n- Web programming platforms and security provisions. HTTP protocol, forms, clientside and server-side threats and their avoidance.\n- High-level and Enterprise security programming, including cryptography via cryptographic libraries, authentication via GSSAPI.\n- Security APIs and their distinction from cryptography APIs. Use and design of security APIs for key management, hashing and encryption. Implementation in hardware and software.\n- Language-based techniques for assisting security programming, using dynamic enforcement via runtime monitoring and static enforcement via program analysis. Example tools.\n- Methods and tools for taint checking and information flow tracking to manage programming with sensitive data. Privacy risks with lack of encapsulation.\n- Methods and tools for controlling resource usage with permissions and capabilities, and static analysis for guarantees in advance.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "know how to respond to security alerts specifying CVE ID numbers which identify software issues\nidentify possible security programming errors when conducting code reviews in languages such as Java, C or Python\ndefine a methodology for security testing and use appropriate tools in its implementation\napply new security-enhanced programming models and tools which help ensure security goals, e.g.,with access control, information flow tracking, protocol implementation, or atomicity enforcement"
    },
    {
        "course_code": "INFR11208",
        "course_title": "Security Engineering",
        "course_summary": "This course aims to give students a thorough understanding of how to engineer security in modern systems. We discuss threat actors from nation states through cybercrime gangs to abuse by family members. We dive into detailed case studies of applications such as payment networks and vehicle systems. We analyse the protection mechanisms of platforms they rely on, such as smartcards, mobile phones and cloud systems. We work through multiple perspectives: classical systems engineering, the psychology of users good and bad, and the incentives facing different actors in the system. This enables students to take a holistic view of security as an emergent property of complex systems, and of related properties such as safety, and to understand how to manage them as systems and their environments evolve.",
        "course_desc": "As ever more devices participate in online systems that become ever more complex, it is ever more important, and more difficult, to manage emergent properties such as security, safety and sustainability. Security engineering is not just about individual mechanisms such as cryptography and access controls but how they work together at scale in real systems. This course will illustrate how to analyse threats and hazards systematically, evolve security policies, integrate them with safety policies and accounting standards as need be, test and certify the resulting systems, and manage their evolution as vulnerabilities are discovered or as their requirements change over time.\n\nOver the course of 15 lectures we will study how real systems are attacked by a variety of opponents and how their defences evolve to cope. We will look in detail at important applications such as payments, home automation and vehicles. We will look at the psychology of secure design: how we can minimise the risk of attacks involving deception. We will analyse the economics of security: when service providers have adequate incentives to prevent fraud, and where market failure or poor regulation get in the way. \n\nWe will take a deep dive into the protection mechanisms of the underlying platforms, from smartcards through mobile phones to containers, and at whole ecosystems such as phone apps, cloud services and network security. By the end of the course, students should be able to analyse a security problem across the entire systems stack, from the threats and protection goals down through the application and the platforms and if need be to the hardware. They should also appreciate how security interacts with related emergent properties such as safety and sustainability.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Security Engineering (UG) (INFR11228)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify ways of attacking a real-world system, leading to a threat model, a security policy, protection goals and assurance targets\nuse adversarial thinking to analyse the relationships between threats, hazards, actors and defence mechanisms\ncompare and synthesise the perspectives of different system stakeholders and threat actors, using economic and psychological viewpoints as well as technical ones\ndemonstrate critical thinking about unsolved problems, residual risk and emerging threats as systems scale or their environment changes"
    },
    {
        "course_code": "INFR11228",
        "course_title": "Security Engineering (UG)",
        "course_summary": "This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead.",
        "course_desc": "This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Security Engineering (INFR11208)"
        ],
        "other_requirements": "",
        "learning_outcomes": "identify ways of attacking a real-world system, leading to a threat model, a security policy, protection goals and assurance targets\nuse adversarial thinking to analyse the relationships between threats, hazards, actors and defence mechanisms\ncompare and synthesise the perspectives of different system stakeholders and threat actors, using economic and psychological viewpoints as well as technical ones\ndemonstrate critical thinking about unsolved problems, residual risk and emerging threats as systems scale or their environment changes"
    },
    {
        "course_code": "INFR11210",
        "course_title": "Seminar in Cognitive Modelling",
        "course_summary": "This course provides students an opportunity to explore their choice of topic in cognitive science in depth while honing their science communication skills and broadly surveying the foundations of cognitive science. The course aims to expose students to a variety of cognitive models (e.g., connectionist, Bayesian, quantum models) and to discuss and evaluate competing models for similar problems. \n\nStudents will be expected to present and critique classic and recent research articles from the cognitive modelling literature, chosen from a list provided by the instructor.",
        "course_desc": "The first semester will focus on developing research skills (finding / reading / reviewing literature and science communication) while surveying foundational topics in cognitive science. The second semester will focus specifically on evaluating and presenting cognitive models. Each semester is split into two parts. In the first part, the instructor will provide introductory information and background material, as well as information on how to develop skills in reading scientific papers and presenting them. In the second part, students will present papers, chosen from a list provided by the instructor (or approved by the instructor).\n\nTopics covered by the instructor will include:\n- How to read, analyse, and present research papers in cognitive modelling\n- Example presentation(s) of papers\n- Introduction and overview of modelling approaches/philosophies \n- Model comparison and evaluation methods\n\nTopics available for students to present will vary depending on the instructor. Topics may include: analogical reasoning, animal cognition, attention, biological motion, categorization, causality, communication, concepts, development, ecological considerations of modelling, event cognition, inductive reasoning, judgment & decision making, language, learning, memory, meta-cognition, number cognition, object cognition, physical reasoning, perception, problem solving, rationality, social reasoning, spatial cognition, specialization, theory of mind, temporal cognition etc.",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": [
            "Informatics Research Review (INFR11136) OR\nSeminar in Cognitive Modelling (UG) (INFR11237)"
        ],
        "other_requirements": "",
        "learning_outcomes": "demonstrate understanding of a range of classic and current articles in cognitive science / modelling by summarizing and critiquing their central ideas and/or results\ndemonstrate understanding of the relationship between computational models and cognitive theories, by being able to critically assess the theoretical adequacy of a given model\ncompare and contrast the strengths and weaknesses of different models of the same behaviour\nsearch the literature and synthesize information from several papers on the same topic and create a coherent oral presentation on that topic\ncommunicate (written and oral) key findings in cognitive science/modelling to  inter-disciplinary audiences"
    },
    {
        "course_code": "INFR11237",
        "course_title": "Seminar in Cognitive Modelling (UG)",
        "course_summary": "This course follows the delivery and assessment of Seminar in Cognitive Modelling (INFR11210) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11210 instead.",
        "course_desc": "This course follows the delivery and assessment of Seminar in Cognitive Modelling (INFR11210) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11210 instead.",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": [
            "Seminar in Cognitive Modelling (INFR11210)",
            "Informatics Research Review (INFR11136)"
        ],
        "other_requirements": "",
        "learning_outcomes": "demonstrate understanding of a range of classic and current articles in cognitive science / modelling by summarizing and critiquing their central ideas and / or results\ndemonstrate understanding of the relationship between computational models and cognitive theories, by being able to critically assess the theoretical adequacy of a given model\ncompare and contrast the strengths and weaknesses of different models of the same behaviour\nsearch the literature and synthesize information from several papers on the same topic and create a coherent oral presentation on that topic\ncommunicate (written and oral) key findings in cognitive science/modelling to inter-disciplinary audiences"
    },
    {
        "course_code": "INFR11254",
        "course_title": "Simulation, Analysis, and Validation of Computational Models",
        "course_summary": "We will study advanced computational methods to model, simulate, and solve complex problems in engineering, science, and society. The course provides an introduction into the field of scientific computing from an interdisciplinary viewpoint and will enable a well-informed use of models, methodologies, and software in a variety of use cases. We will discuss dynamics, control, optimisation, risk, and resilience of systems as well as reliability, scalability, validation and verification of models. The course will be useful for work on real-world challenges in domains such as robotics, digital twins, supply chains, and manufacturing.",
        "course_desc": "The course relies on the insight that all data are observations of an underlying dynamical systems and that data can be used more efficiently when supported by dynamical models. In order to help to realise this potential, the course offer an environment to engage with the following topics: \n\n- methods of qualitative and quantitative modelling \n\n- stability and the role of feedback in dynamics systems \n\n- analysis of stochasticity and response to perturbations \n\n- resilience and trustworthiness \n\n- modelling strategies and explainability by design \n\n- case studies on various levels of complexity \n\n- principles of validation, verification, and credibility\n\n- outlook at current research and challenges\n\n\nThe course will be delivered by weekly lectures that are accompanied by opportunities for self-study to revise your background in calculus, programming, and critical thinking in the first three weeks. A central part of the course are three workshops that provide hands-on experience in modeling, analysis and visualisation, which will be useful towards the coursework that will run over the last weeks of the teaching period. \n\nThe intended audience are those wanting the background required to begin research and development of computing science methods in various application areas.",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "understand the process of conceptualizing complex systems\ndesign frameworks for simulation of such systems\nto use simulation software in practical use cases\nassess and mitigate requirements of computational power for simulations\nunderstand processes for model validation and verification"
    },
    {
        "course_code": "INFR11124",
        "course_title": "Social and Technological Networks",
        "course_summary": "In this course, we will study core properties of networks arising in various social, scientific and technological contexts. We will see techniques for their analysis, and applications in social networks, World Wide Web, Internet, IoT etc. The course will cover fundamental theories and techniques from machine learning, algorithms and mathematics. We will see the relevance of these techniques in real networks, as well as use of network-based techniques in more general data analysis. The course will involve theoretical analysis in class, development of algorithms, and writing of programs to analyse network data.",
        "course_desc": "The course will study computational, mathematical and data analysis aspects of networks. Typical topics will include properties of social networks, epidemics, spread of innovation, random graphs, metric properties, preferential attachments and power law networks. It will cover relation to data analysis and machine learning: including clustering and community detection, submodularity, optimization, embedding (dimension reduction) and classification. Other current topics will be covered as appropriate.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "demonstrate critical understanding of principal concepts in the subject of properties of large networks.\napply concepts and techniques that are at the forefront of network science\nundertake autonomous small projects in this area, with responsibility for own work, planning and execution.\ndevelop original and creative responses to problems; apply critical analysis and synthesis to forefront issues in network analysis\ncritically review and evaluate own work and that of others in the area of network analysis; communicate one's understanding and analysis in a concise manner."
    },
    {
        "course_code": "INFR11214",
        "course_title": "Standards Compliant Software Development",
        "course_summary": "As our societies and economies become increasingly dependent on software-based systems there is a corresponding increase in the development of standards and regulation that aim to ensure such systems are fit for purpose.  This course provides an overview of standards and regulation, what is necessary to ensure compliance and, processes to maintain compliance from initial requirements to the eventual decommissioning of the system.  We will consider modern architectures and agile, continuous processes, investigating their strengths and weaknesses.",
        "course_desc": "The course provides an overview of standards and regulations affecting software-based systems, concentrating on the way standards and regulations exert control over compliant systems.  We will then consider how standards and regulation influence requirements and the requirements gathering process.  Then consider tools and techniques that can be deployed to provide evidence of compliance.  Finally we consider the full process from the initiation of development to the eventual decommissioning of the system.\n\nWe consider:\n - Standards and regulation: Here we consider a range of standards and regulation such as the MISRA C/C++ coding standard, the emerging EU AI regulations, Medical Device Standards such as EN 62304, Avionics (DO-178C), Process Control (IEC 61508) and others, including Security standards\n - Requirements gathering: Here we consider practices like hazard and risk analysis, performance requirements, conformance to rules, and how the compliance requirement influences and is incorporated into the more general requirements process\n - Evidence supporting compliance:  Here we look at tools and techniques that support the generation of evidence that the system complies with these include standard architectures, testing, static analysers, verifiers, and others\n - Processes for compliant systems:  increasingly systems continuously evolve as they are modified in use (not all standards admit the possibility of evolution).  Here we consider the range of approaches to process from the rigid v-model to modern system development practice and how different processes organise the production of compliance evidence\n\nClass members will work in small groups taking a case study as their focus. Groups will be guided to provide a documented analysis of the strengths, weaknesses, potential for improvement and sustainability of the system and associated compliance-demonstrating processes. This work will be available to other class members as part of the learning materials of the course.  Each class member will also develop a portfolio demonstrating they have individually achieved the learning outcomes of the course. This will be based on work included in the analysis of the case study augmented by appropriate other evidence. Acceptable kinds of evidence demonstrating achievement of the learning outcomes are diverse so part of the assessment is the design of the portfolio in advance of its construction.  There are two or three 'standard' portfolio designs but class members are encouraged to develop their own approaches that take account of their personal strengths and weaknesses.  Portfolio designs will include assessment criteria. Each week there will be a group meeting, around 1-2 hours of recorded material covering the lecture material in the course and a guest lecture given by a practitioner on their experience of working with standards compliant systems.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Standards Compliant Software Development (UG) (INFR11253)"
        ],
        "other_requirements": "",
        "learning_outcomes": "describe the structure of typical standards and regulation for a range of domains of application\nexplain and motivate the goals set by regulation and standards and how they influence the requirements for compliant systems\ngiven an example system and standard or regulation, justify what evidence would be needed to comply with the regulation or standard\ngiven an example system development process and standard or regulation, evaluate how effective the process can be in generating evidence of compliance to the standard or regulation"
    },
    {
        "course_code": "INFR11253",
        "course_title": "Standards Compliant Software Development (UG)",
        "course_summary": "This course follows the delivery and assessment of Standards Compliant Software Development (INFR11214) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11214 instead.",
        "course_desc": "This course follows the delivery and assessment of Standards Compliant Software Development (INFR11214) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11214 instead.",
        "course_credits": 10,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": [
            "Standards Compliant Software Development (INFR11214)"
        ],
        "other_requirements": "",
        "learning_outcomes": "describe the structure of typical standards and regulation for a range of domains of application\nexplain and motivate the goals set by regulation and standards and how they influence the requirements for compliant systems\ngiven an example system and standard or regulation, justify what evidence would be needed to comply with the regulation or standard\ngiven an example system development process and standard or regulation, evaluate how effective the process can be in generating evidence of compliance to the standard or regulation"
    },
    {
        "course_code": "INFR11145",
        "course_title": "Text Technologies for Data Science",
        "course_summary": "This course teaches the basic technologies required for text processing, focussing mainly on information retrieval and text classification. It gives a detailed overview of information retrieval and describes how search engines work. It also covers basic knowledge of the main steps for text classification. \n\nThis course is a highly practical course, where at least 50% of what is taught in the course will be implemented from scratch in course works and labs, and students are required to complete a final project in small groups. All lectures, labs, and two course works will take place in Semester 1. The final group project will be due early Semester 2 by week 3 or 4.",
        "course_desc": "Syllabus:\n* Introduction to IR and text processing, system components\n* Zipf, Heaps, and other text laws \n* Pre-processing: tokenization, normalisation, stemming, stopping.\n* Indexing: inverted index, boolean and proximity search\n* Evaluation methods and measures (e.g., precision, recall, MAP, significance testing).\n* Query expansion\n* IR toolkits and applications\n* Ranked retrieval and learning to rank\n* Text classification: feature extraction, baselines, evaluation\n* Web search",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": [
            "Text Technologies for Data Science (UG) (INFR11229)"
        ],
        "other_requirements": "",
        "learning_outcomes": "build basic search engines from scratch, and use IR tools for searching massive collections of text documents\nbuild feature extraction modules for text classification\nimplement evaluation scripts for IR and text classification\nunderstand how web search engines (such as Google) work\nwork effectively in a team to produce working systems"
    },
    {
        "course_code": "INFR11229",
        "course_title": "Text Technologies for Data Science (UG)",
        "course_summary": "This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead.",
        "course_desc": "This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead.",
        "course_credits": 20,
        "semester": "Full Year",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "duild basic search engines from scratch, and use IR tools for searching massive collections of text documents\nduild feature extraction modules for text classification\nimplement evaluation scripts for IR and text classification\nunderstand how web search engines (such as Google) work\nwork effectively in a team to produce working systems"
    },
    {
        "course_code": "INFR11141",
        "course_title": "The Human Factor: Working with Users",
        "course_summary": "This is an introduction to the fields of Human Factors and User Experience with an emphasis on developing practical skills that are grounded in a strong knowledge of theory.",
        "course_desc": "\"If the user can't use it, then it doesn't work at all.\" (Susan Dray) When technical systems that have been crafted in years of painstaking work fail in practice, more often than not this is due to a lack of fit between the complex system, the people who interact with it, and the contexts in which it is used. In the best case, failure is just annoying, in the worst case, it costs lives.\n\nIn this course, we will look at the art and craft of building technical systems that people can actually use successfully. To this end, we will draw on relevant findings from anthropology; behavioural, cognitive and social psychology; human-computer interaction; and sociology. The course will be taught using a flipped classroom - before class, you will work through materials; in class, we will work on activities designed to review the material and deepen your learning.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Understand how relevant aspects of context affect the interaction between people and technical systems, with a particular emphasis on anthropometric, behavioural, cognitive, and social factors (ABCS)\nAssess the usability of a technological artefact, including both hardware and software, given a particular context of use\nIntegrate user experience and human factors into the process of designing or improving a technological artefact\nEnsure that systems are resilient and learn from user errors"
    },
    {
        "course_code": "INFR11276",
        "course_title": "The Human Factor: Working with Users (UG)",
        "course_summary": "This course follows the delivery and assessment of The Human Factor: Working with Users (INFR11141) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11141 instead.",
        "course_desc": "This course follows the delivery and assessment of The Human Factor: Working with Users (INFR11141) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11141 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Understand how relevant aspects of context affect the interaction between people and technical systems, with a particular emphasis on anthropometric, behavioural, cognitive, and social factors (ABCS)\nAssess the usability of a technological artefact, including both hardware and software, given a particular context of use\nIntegrate user experience and human factors into the process of designing or improving a technological artefact\nEnsure that systems are resilient and learn from user errors"
    },
    {
        "course_code": "INFR11263",
        "course_title": "Topics in Biomedical Informatics",
        "course_summary": "The course will consist of a series of lectures and assisted discussions on biomedical innovation delivered by selected experts in the respective domains. \n\nThe course will cover a variety of biomedical topics, data types and their challenges/constraints along with state-of-the-art methodologies in biomedical informatics.\n\nIt aims to equip students with essential interdisciplinary skills to explore and discuss biomedical research and innovation challenges and critically assess analytic avenues to answer them.",
        "course_desc": "During the course, students will be exposed to a varied selection of biomedical research topics and data analytics approaches representative of current challenges in the biomedical domain. Sessions \nwill cover cutting-edge research problems that involve clinical and lab-collected data challenges including patient, omics and time-series data. \n\nThe topics will be delivered by experts in the respective biomedical application areas presenting a published work of biomedical analysis. In advance of each lecture, students will be provided with a \nresearch article that will form the basis of the lecture and the follow-on discussion. Students will be required to study the article prior to the session, critically examining suitability of (a) data for the \nresearch question at hand and (b) methodologies used for data analysis, as well as discuss (c) the conclusions drawn from the analysis.\n\nSessions will be interactive and students will be expected to actively participate in discussions, which will help them gain the skills that will be probed in the final course assessment. \nSummative assessment will consist of an exam with the choice of answering two of three questions based on the content of three of the sessions presented during the semester. An additional \nformative assessment will follow the same format as the exam but on a single presentation (typically the first in the series)",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "critically assess the challenges associated with biomedical data analysis and modelling across a variety of contexts, in particular with respect to noise in the data, patient stratification and  regulatory and ethical issues.\ncritically discuss and compare data acquisition, analysis and modelling protocols.\npresent and explain biomedical data problems and appropriate analysis in one area of  biomedicine to an interdisciplinary audience."
    },
    {
        "course_code": "INFR11282",
        "course_title": "Topics in Biomedical Informatics (UG)",
        "course_summary": "This course follows the delivery and assessment of Topics in Biomedical Informatics (INFR11263) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11263 instead.",
        "course_desc": "This course follows the delivery and assessment of Topics in Biomedical Informatics (INFR11263) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11263 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Critically assess the challenges associated with biomedical data analysis and modelling across a variety of contexts, in particular with respect to noise in the data, patient stratification and regulatory and ethical issues.\nCritically discuss and compare data acquisition, analysis and modelling protocols.\nPresent and explain biomedical data problems and appropriate analysis in one area of biomedicine to an interdisciplinary audience."
    },
    {
        "course_code": "INFR11266",
        "course_title": "Topics in Quantum Informatics",
        "course_summary": "This course surveys research topics in Quantum Informatics within the remit of the Centre for Doctoral Training in Quantum Informatics. Grouped by theme, supervisors will give introductions to their specialist research area, including academic and industrial guest speakers. Along the way, open challenges will be highlighted, that could become the topic of your research project. There will also be plenty of opportunity for questions and discussion. By taking notes and making short summaries, you will compile an overview of topics of interest in Quantum Informatics, and their interconnections.",
        "course_desc": "Students will gain an overview of the research topics in the remit of the Centre for Doctoral Training in Quantum Informatics, of their interconnections, of open challenges, and of the Centre\u00c2\u00bfs experts that could supervise projects in those areas. The content may vary according to the latest developments, but focus on the core topics underpinning Quantum Informatics. The course will take the form of two long-form seminars a week given by rotating speakers, followed by a discussion. Students will make brief summaries of each seminar, to be compiled into a final report overviewing what they have learnt of the geography of the research area that is Quantum Informatics.",
        "course_credits": 20,
        "semester": "",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "Define at a high level the research topics that form the area of Quantum Informatics.\nExplain how these topics are related to each other.\nJustify why these topics are relevant scientifically and/or societally.\nPoint out which experts can supervise projects in which direction."
    },
    {
        "course_code": "INFR11114",
        "course_title": "Types and Semantics for Programming Languages",
        "course_summary": "Type systems and semantics are mathematical tools for precisely describing aspects of programming language. A type system imposes constraints on programs in order to guarantee their safe execution, whilst a semantics specifies what a program will do when executed. This course gives an introduction to the main ideas and methods of type systems and semantics. This enables a deeper understanding of existing programming languages, as well as the ability to design and specify new language features.  The course also introduces relevant parts of logic and discrete mathematics used to describe types and semantics.",
        "course_desc": "-\tInductive definitions and proof by induction\n-\tProducts, sums, unit, empty, and implication.\n-\tIntuitionistic and classical logic.\n-\tUniversals and existentials.\n-\tLists and higher-order types.\n-\tSimply-typed lambda calculus. Variable binding.\n-\tCall-by-value and call-by-name.\n-\tSmall-step operational semantics.\n-\tProgress and preservation.\n-\tType inference.\n-\tUntyped lambda calculus.\n\nRelevant QAA Computing Curriculum Sections: Comparative Programming Languages, Compilers and Syntax Directed Tools, Programming Fundamentals, Theoretical Computing",
        "course_credits": 10,
        "semester": "Semester 1",
        "prerequisites": "",
        "prohibited_combinations": "",
        "other_requirements": "",
        "learning_outcomes": "write inductive definitions and prove properties of them using induction\nexploit the connection between logic and type systems, where propositions correspond to types and proofs correspond to programs; understand how conjunction corresponds to products, disjunction to sums, and implication to functions\nread and understand the presentation of operational semantics and type systems via inference rules for lambda calculus, and be able to modify such a presentation to include a new language feature, such as exceptions\nwrite a formal semantics for a programming language in the operational style, given a careful informal description of the language\nstate and prove the preservation and progress theorems that link operational semantics and type systems"
    },
    {
        "course_code": "INFR11158",
        "course_title": "Usable Security and Privacy",
        "course_summary": "Humans are a vital component of secure and private systems, they are also one of the most expensive components and the most challenging to reason about. In this course, students will learn about how to create systems that are usable while still fulfilling their primary security or privacy mission. Students will also learn about research topics such as designing user studies to critically evaluate interfaces and reading academic papers to create an academically-informed view of the topic.",
        "course_desc": "Introduction: History and overview of the Usable Security and Privacy research area.\nStudy design: Security and privacy activities tend to be secondary tasks. Students will learn how to design and analyse usability studies that are common in security and privacy such as targeting secondary tasks or ethically using some deception.\nPrivacy: Basic overview of the definitions of privacy as well as some of the legal and social aspects of it. Analysis of common privacy issues and how they are expressed through user interaction with systems.\nSecurity: Overview of common security technologies and how they are impacted by usability. In- depth look at select topics such as password construction and management.\nEthics: Discussion of ethics, particularly around research in topics in security and privacy where participants can be particularly vulnerable.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Usable Security and Privacy (UG) (INFR11230)"
        ],
        "other_requirements": "",
        "learning_outcomes": "understand key topics in Security, Privacy, and Human-Computer Interaction\nidentify privacy and security concerns in different contexts\ncritically evaluate the literature to develop an academically-informed view of proposed security and privacy solutions from a human factors perspective\ndesign studies to rigorously evaluate the usability of a security or privacy tool\napply techniques and design approaches to security and privacy problems to create usable solutions"
    },
    {
        "course_code": "INFR11230",
        "course_title": "Usable Security and Privacy (UG)",
        "course_summary": "This course follows the delivery and assessment of Usable Security and Privacy (INFR11158) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11158 instead.",
        "course_desc": "This course follows the delivery and assessment of Usable Security and Privacy (INFR11158) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11158 instead.",
        "course_credits": 10,
        "semester": "Semester 2",
        "prerequisites": "",
        "prohibited_combinations": [
            "Usable Security and Privacy (INFR11158)"
        ],
        "other_requirements": "",
        "learning_outcomes": "understand key topics in Security, Privacy, and Human-Computer Interaction\nidentify privacy and security concerns in different contexts\ncritically evaluate the literature to develop an academically-informed view of proposed security and privacy solutions from a human factors perspective\ndesign studies to rigorously evaluate the usability of a security or privacy tool\napply techniques and design approaches to security and privacy problems to create usable solutions"
    }
]